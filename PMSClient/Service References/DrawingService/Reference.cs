//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace PMSClient.DrawingService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcDrawing", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcDrawing : PMSClient.DrawingService.DcModelBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DrawIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DrawingNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DrawingTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtraDimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MainDimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Customer {
            get {
                return this.CustomerField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerField, value) != true)) {
                    this.CustomerField = value;
                    this.RaisePropertyChanged("Customer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DrawID {
            get {
                return this.DrawIDField;
            }
            set {
                if ((this.DrawIDField.Equals(value) != true)) {
                    this.DrawIDField = value;
                    this.RaisePropertyChanged("DrawID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DrawingName {
            get {
                return this.DrawingNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DrawingNameField, value) != true)) {
                    this.DrawingNameField = value;
                    this.RaisePropertyChanged("DrawingName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DrawingType {
            get {
                return this.DrawingTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DrawingTypeField, value) != true)) {
                    this.DrawingTypeField = value;
                    this.RaisePropertyChanged("DrawingType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExtraDimension {
            get {
                return this.ExtraDimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtraDimensionField, value) != true)) {
                    this.ExtraDimensionField = value;
                    this.RaisePropertyChanged("ExtraDimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MainDimension {
            get {
                return this.MainDimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.MainDimensionField, value) != true)) {
                    this.MainDimensionField = value;
                    this.RaisePropertyChanged("MainDimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcModelBase", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PMSClient.DrawingService.DcDrawing))]
    public partial class DcModelBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DrawingService.IDrawingService")]
    public interface IDrawingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDrawingService/GetDrawing", ReplyAction="http://tempuri.org/IDrawingService/GetDrawingResponse")]
        PMSClient.DrawingService.DcDrawing[] GetDrawing(int s, int t, string drawingName, string customer, string mainDimension);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDrawingService/GetDrawing", ReplyAction="http://tempuri.org/IDrawingService/GetDrawingResponse")]
        System.Threading.Tasks.Task<PMSClient.DrawingService.DcDrawing[]> GetDrawingAsync(int s, int t, string drawingName, string customer, string mainDimension);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDrawingService/GetDrawingCount", ReplyAction="http://tempuri.org/IDrawingService/GetDrawingCountResponse")]
        int GetDrawingCount(string drawingName, string customer, string mainDimension);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDrawingService/GetDrawingCount", ReplyAction="http://tempuri.org/IDrawingService/GetDrawingCountResponse")]
        System.Threading.Tasks.Task<int> GetDrawingCountAsync(string drawingName, string customer, string mainDimension);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDrawingService/AddDrawing", ReplyAction="http://tempuri.org/IDrawingService/AddDrawingResponse")]
        void AddDrawing(PMSClient.DrawingService.DcDrawing model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDrawingService/AddDrawing", ReplyAction="http://tempuri.org/IDrawingService/AddDrawingResponse")]
        System.Threading.Tasks.Task AddDrawingAsync(PMSClient.DrawingService.DcDrawing model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDrawingService/UpdateDrawing", ReplyAction="http://tempuri.org/IDrawingService/UpdateDrawingResponse")]
        void UpdateDrawing(PMSClient.DrawingService.DcDrawing model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDrawingService/UpdateDrawing", ReplyAction="http://tempuri.org/IDrawingService/UpdateDrawingResponse")]
        System.Threading.Tasks.Task UpdateDrawingAsync(PMSClient.DrawingService.DcDrawing model);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDrawingServiceChannel : PMSClient.DrawingService.IDrawingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DrawingServiceClient : System.ServiceModel.ClientBase<PMSClient.DrawingService.IDrawingService>, PMSClient.DrawingService.IDrawingService {
        
        public DrawingServiceClient() {
        }
        
        public DrawingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DrawingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DrawingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DrawingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.DrawingService.DcDrawing[] GetDrawing(int s, int t, string drawingName, string customer, string mainDimension) {
            return base.Channel.GetDrawing(s, t, drawingName, customer, mainDimension);
        }
        
        public System.Threading.Tasks.Task<PMSClient.DrawingService.DcDrawing[]> GetDrawingAsync(int s, int t, string drawingName, string customer, string mainDimension) {
            return base.Channel.GetDrawingAsync(s, t, drawingName, customer, mainDimension);
        }
        
        public int GetDrawingCount(string drawingName, string customer, string mainDimension) {
            return base.Channel.GetDrawingCount(drawingName, customer, mainDimension);
        }
        
        public System.Threading.Tasks.Task<int> GetDrawingCountAsync(string drawingName, string customer, string mainDimension) {
            return base.Channel.GetDrawingCountAsync(drawingName, customer, mainDimension);
        }
        
        public void AddDrawing(PMSClient.DrawingService.DcDrawing model) {
            base.Channel.AddDrawing(model);
        }
        
        public System.Threading.Tasks.Task AddDrawingAsync(PMSClient.DrawingService.DcDrawing model) {
            return base.Channel.AddDrawingAsync(model);
        }
        
        public void UpdateDrawing(PMSClient.DrawingService.DcDrawing model) {
            base.Channel.UpdateDrawing(model);
        }
        
        public System.Threading.Tasks.Task UpdateDrawingAsync(PMSClient.DrawingService.DcDrawing model) {
            return base.Channel.UpdateDrawingAsync(model);
        }
    }
}
