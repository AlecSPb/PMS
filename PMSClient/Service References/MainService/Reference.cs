//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace PMSClient.MainService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcOrder", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcOrder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionAbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionOriginalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionStandardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DeadLineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MinimumAcceptDefectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string POField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PolicyTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuantityUnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ReviewTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReviewerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SampleNeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateRemarkField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionAbbr {
            get {
                return this.CompositionAbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionAbbrField, value) != true)) {
                    this.CompositionAbbrField = value;
                    this.RaisePropertyChanged("CompositionAbbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionOriginal {
            get {
                return this.CompositionOriginalField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionOriginalField, value) != true)) {
                    this.CompositionOriginalField = value;
                    this.RaisePropertyChanged("CompositionOriginal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionStandard {
            get {
                return this.CompositionStandardField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionStandardField, value) != true)) {
                    this.CompositionStandardField = value;
                    this.RaisePropertyChanged("CompositionStandard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerName {
            get {
                return this.CustomerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerNameField, value) != true)) {
                    this.CustomerNameField = value;
                    this.RaisePropertyChanged("CustomerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DeadLine {
            get {
                return this.DeadLineField;
            }
            set {
                if ((this.DeadLineField.Equals(value) != true)) {
                    this.DeadLineField = value;
                    this.RaisePropertyChanged("DeadLine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dimension {
            get {
                return this.DimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionField, value) != true)) {
                    this.DimensionField = value;
                    this.RaisePropertyChanged("Dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DimensionDetails {
            get {
                return this.DimensionDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionDetailsField, value) != true)) {
                    this.DimensionDetailsField = value;
                    this.RaisePropertyChanged("DimensionDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MinimumAcceptDefect {
            get {
                return this.MinimumAcceptDefectField;
            }
            set {
                if ((object.ReferenceEquals(this.MinimumAcceptDefectField, value) != true)) {
                    this.MinimumAcceptDefectField = value;
                    this.RaisePropertyChanged("MinimumAcceptDefect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PO {
            get {
                return this.POField;
            }
            set {
                if ((object.ReferenceEquals(this.POField, value) != true)) {
                    this.POField = value;
                    this.RaisePropertyChanged("PO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PolicyType {
            get {
                return this.PolicyTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PolicyTypeField, value) != true)) {
                    this.PolicyTypeField = value;
                    this.RaisePropertyChanged("PolicyType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityField, value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductType {
            get {
                return this.ProductTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductTypeField, value) != true)) {
                    this.ProductTypeField = value;
                    this.RaisePropertyChanged("ProductType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purity {
            get {
                return this.PurityField;
            }
            set {
                if ((object.ReferenceEquals(this.PurityField, value) != true)) {
                    this.PurityField = value;
                    this.RaisePropertyChanged("Purity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuantityUnit {
            get {
                return this.QuantityUnitField;
            }
            set {
                if ((object.ReferenceEquals(this.QuantityUnitField, value) != true)) {
                    this.QuantityUnitField = value;
                    this.RaisePropertyChanged("QuantityUnit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReviewTime {
            get {
                return this.ReviewTimeField;
            }
            set {
                if ((this.ReviewTimeField.Equals(value) != true)) {
                    this.ReviewTimeField = value;
                    this.RaisePropertyChanged("ReviewTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reviewer {
            get {
                return this.ReviewerField;
            }
            set {
                if ((object.ReferenceEquals(this.ReviewerField, value) != true)) {
                    this.ReviewerField = value;
                    this.RaisePropertyChanged("Reviewer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SampleNeed {
            get {
                return this.SampleNeedField;
            }
            set {
                if ((object.ReferenceEquals(this.SampleNeedField, value) != true)) {
                    this.SampleNeedField = value;
                    this.RaisePropertyChanged("SampleNeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateRemark {
            get {
                return this.StateRemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.StateRemarkField, value) != true)) {
                    this.StateRemarkField = value;
                    this.RaisePropertyChanged("StateRemark");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcPlanVHP", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcPlanVHP : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AllWeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CalculationDensityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FillingRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GrainSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double KeepTempTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MillingRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MoldDiameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MoldTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid OrderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PlanDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlanLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PrePressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PreTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RoomHumidityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RoomTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SingleWeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpecialRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ThicknessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPDeviceCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VaccumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AllWeight {
            get {
                return this.AllWeightField;
            }
            set {
                if ((this.AllWeightField.Equals(value) != true)) {
                    this.AllWeightField = value;
                    this.RaisePropertyChanged("AllWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CalculationDensity {
            get {
                return this.CalculationDensityField;
            }
            set {
                if ((this.CalculationDensityField.Equals(value) != true)) {
                    this.CalculationDensityField = value;
                    this.RaisePropertyChanged("CalculationDensity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FillingRequirement {
            get {
                return this.FillingRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.FillingRequirementField, value) != true)) {
                    this.FillingRequirementField = value;
                    this.RaisePropertyChanged("FillingRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GrainSize {
            get {
                return this.GrainSizeField;
            }
            set {
                if ((object.ReferenceEquals(this.GrainSizeField, value) != true)) {
                    this.GrainSizeField = value;
                    this.RaisePropertyChanged("GrainSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double KeepTempTime {
            get {
                return this.KeepTempTimeField;
            }
            set {
                if ((this.KeepTempTimeField.Equals(value) != true)) {
                    this.KeepTempTimeField = value;
                    this.RaisePropertyChanged("KeepTempTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineRequirement {
            get {
                return this.MachineRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineRequirementField, value) != true)) {
                    this.MachineRequirementField = value;
                    this.RaisePropertyChanged("MachineRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MillingRequirement {
            get {
                return this.MillingRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.MillingRequirementField, value) != true)) {
                    this.MillingRequirementField = value;
                    this.RaisePropertyChanged("MillingRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MoldDiameter {
            get {
                return this.MoldDiameterField;
            }
            set {
                if ((this.MoldDiameterField.Equals(value) != true)) {
                    this.MoldDiameterField = value;
                    this.RaisePropertyChanged("MoldDiameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MoldType {
            get {
                return this.MoldTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MoldTypeField, value) != true)) {
                    this.MoldTypeField = value;
                    this.RaisePropertyChanged("MoldType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid OrderID {
            get {
                return this.OrderIDField;
            }
            set {
                if ((this.OrderIDField.Equals(value) != true)) {
                    this.OrderIDField = value;
                    this.RaisePropertyChanged("OrderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PlanDate {
            get {
                return this.PlanDateField;
            }
            set {
                if ((this.PlanDateField.Equals(value) != true)) {
                    this.PlanDateField = value;
                    this.RaisePropertyChanged("PlanDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlanLot {
            get {
                return this.PlanLotField;
            }
            set {
                if ((this.PlanLotField.Equals(value) != true)) {
                    this.PlanLotField = value;
                    this.RaisePropertyChanged("PlanLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PrePressure {
            get {
                return this.PrePressureField;
            }
            set {
                if ((this.PrePressureField.Equals(value) != true)) {
                    this.PrePressureField = value;
                    this.RaisePropertyChanged("PrePressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PreTemperature {
            get {
                return this.PreTemperatureField;
            }
            set {
                if ((this.PreTemperatureField.Equals(value) != true)) {
                    this.PreTemperatureField = value;
                    this.RaisePropertyChanged("PreTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Pressure {
            get {
                return this.PressureField;
            }
            set {
                if ((this.PressureField.Equals(value) != true)) {
                    this.PressureField = value;
                    this.RaisePropertyChanged("Pressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessCode {
            get {
                return this.ProcessCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessCodeField, value) != true)) {
                    this.ProcessCodeField = value;
                    this.RaisePropertyChanged("ProcessCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RoomHumidity {
            get {
                return this.RoomHumidityField;
            }
            set {
                if ((this.RoomHumidityField.Equals(value) != true)) {
                    this.RoomHumidityField = value;
                    this.RaisePropertyChanged("RoomHumidity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RoomTemperature {
            get {
                return this.RoomTemperatureField;
            }
            set {
                if ((this.RoomTemperatureField.Equals(value) != true)) {
                    this.RoomTemperatureField = value;
                    this.RaisePropertyChanged("RoomTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SingleWeight {
            get {
                return this.SingleWeightField;
            }
            set {
                if ((this.SingleWeightField.Equals(value) != true)) {
                    this.SingleWeightField = value;
                    this.RaisePropertyChanged("SingleWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpecialRequirement {
            get {
                return this.SpecialRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialRequirementField, value) != true)) {
                    this.SpecialRequirementField = value;
                    this.RaisePropertyChanged("SpecialRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness {
            get {
                return this.ThicknessField;
            }
            set {
                if ((this.ThicknessField.Equals(value) != true)) {
                    this.ThicknessField = value;
                    this.RaisePropertyChanged("Thickness");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPDeviceCode {
            get {
                return this.VHPDeviceCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPDeviceCodeField, value) != true)) {
                    this.VHPDeviceCodeField = value;
                    this.RaisePropertyChanged("VHPDeviceCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPRequirement {
            get {
                return this.VHPRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPRequirementField, value) != true)) {
                    this.VHPRequirementField = value;
                    this.RaisePropertyChanged("VHPRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Vaccum {
            get {
                return this.VaccumField;
            }
            set {
                if ((this.VaccumField.Equals(value) != true)) {
                    this.VaccumField = value;
                    this.RaisePropertyChanged("Vaccum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcMaterialNeed", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcMaterialNeed : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpecialNeedsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purity {
            get {
                return this.PurityField;
            }
            set {
                if ((object.ReferenceEquals(this.PurityField, value) != true)) {
                    this.PurityField = value;
                    this.RaisePropertyChanged("Purity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpecialNeeds {
            get {
                return this.SpecialNeedsField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialNeedsField, value) != true)) {
                    this.SpecialNeedsField = value;
                    this.RaisePropertyChanged("SpecialNeeds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcMaterialOrder", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcMaterialOrder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderPOField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ShipFeeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierAbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierReceiverField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderPO {
            get {
                return this.OrderPOField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderPOField, value) != true)) {
                    this.OrderPOField = value;
                    this.RaisePropertyChanged("OrderPO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityField, value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ShipFee {
            get {
                return this.ShipFeeField;
            }
            set {
                if ((this.ShipFeeField.Equals(value) != true)) {
                    this.ShipFeeField = value;
                    this.RaisePropertyChanged("ShipFee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Supplier {
            get {
                return this.SupplierField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierField, value) != true)) {
                    this.SupplierField = value;
                    this.RaisePropertyChanged("Supplier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierAbbr {
            get {
                return this.SupplierAbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierAbbrField, value) != true)) {
                    this.SupplierAbbrField = value;
                    this.RaisePropertyChanged("SupplierAbbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierAddress {
            get {
                return this.SupplierAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierAddressField, value) != true)) {
                    this.SupplierAddressField = value;
                    this.RaisePropertyChanged("SupplierAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierEmail {
            get {
                return this.SupplierEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierEmailField, value) != true)) {
                    this.SupplierEmailField = value;
                    this.RaisePropertyChanged("SupplierEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierReceiver {
            get {
                return this.SupplierReceiverField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierReceiverField, value) != true)) {
                    this.SupplierReceiverField = value;
                    this.RaisePropertyChanged("SupplierReceiver");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcMaterialOrderItem", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcMaterialOrderItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DeliveryDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid MaterialOrderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderItemNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProvideRawMaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UnitPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DeliveryDate {
            get {
                return this.DeliveryDateField;
            }
            set {
                if ((this.DeliveryDateField.Equals(value) != true)) {
                    this.DeliveryDateField = value;
                    this.RaisePropertyChanged("DeliveryDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid MaterialOrderID {
            get {
                return this.MaterialOrderIDField;
            }
            set {
                if ((this.MaterialOrderIDField.Equals(value) != true)) {
                    this.MaterialOrderIDField = value;
                    this.RaisePropertyChanged("MaterialOrderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderItemNumber {
            get {
                return this.OrderItemNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderItemNumberField, value) != true)) {
                    this.OrderItemNumberField = value;
                    this.RaisePropertyChanged("OrderItemNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProvideRawMaterial {
            get {
                return this.ProvideRawMaterialField;
            }
            set {
                if ((object.ReferenceEquals(this.ProvideRawMaterialField, value) != true)) {
                    this.ProvideRawMaterialField = value;
                    this.RaisePropertyChanged("ProvideRawMaterial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purity {
            get {
                return this.PurityField;
            }
            set {
                if ((object.ReferenceEquals(this.PurityField, value) != true)) {
                    this.PurityField = value;
                    this.RaisePropertyChanged("Purity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double UnitPrice {
            get {
                return this.UnitPriceField;
            }
            set {
                if ((this.UnitPriceField.Equals(value) != true)) {
                    this.UnitPriceField = value;
                    this.RaisePropertyChanged("UnitPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcMaterialInventoryIn", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcMaterialInventoryIn : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialLot {
            get {
                return this.MaterialLotField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialLotField, value) != true)) {
                    this.MaterialLotField = value;
                    this.RaisePropertyChanged("MaterialLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purity {
            get {
                return this.PurityField;
            }
            set {
                if ((object.ReferenceEquals(this.PurityField, value) != true)) {
                    this.PurityField = value;
                    this.RaisePropertyChanged("Purity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Supplier {
            get {
                return this.SupplierField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierField, value) != true)) {
                    this.SupplierField = value;
                    this.RaisePropertyChanged("Supplier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcMaterialInventoryOut", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcMaterialInventoryOut : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiverField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialLot {
            get {
                return this.MaterialLotField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialLotField, value) != true)) {
                    this.MaterialLotField = value;
                    this.RaisePropertyChanged("MaterialLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purity {
            get {
                return this.PurityField;
            }
            set {
                if ((object.ReferenceEquals(this.PurityField, value) != true)) {
                    this.PurityField = value;
                    this.RaisePropertyChanged("Purity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Receiver {
            get {
                return this.ReceiverField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiverField, value) != true)) {
                    this.ReceiverField = value;
                    this.RaisePropertyChanged("Receiver");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcPlanWithMisson", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcPlanWithMisson : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PMSClient.MainService.DcOrder MissonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PMSClient.MainService.DcPlanVHP PlanField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PMSClient.MainService.DcOrder Misson {
            get {
                return this.MissonField;
            }
            set {
                if ((object.ReferenceEquals(this.MissonField, value) != true)) {
                    this.MissonField = value;
                    this.RaisePropertyChanged("Misson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PMSClient.MainService.DcPlanVHP Plan {
            get {
                return this.PlanField;
            }
            set {
                if ((object.ReferenceEquals(this.PlanField, value) != true)) {
                    this.PlanField = value;
                    this.RaisePropertyChanged("Plan");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcDelivery", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcDelivery : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeliveryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeliveryNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InvoiceNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackageInformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackageTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ShipTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeliveryName {
            get {
                return this.DeliveryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeliveryNameField, value) != true)) {
                    this.DeliveryNameField = value;
                    this.RaisePropertyChanged("DeliveryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeliveryNumber {
            get {
                return this.DeliveryNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.DeliveryNumberField, value) != true)) {
                    this.DeliveryNumberField = value;
                    this.RaisePropertyChanged("DeliveryNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InvoiceNumber {
            get {
                return this.InvoiceNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.InvoiceNumberField, value) != true)) {
                    this.InvoiceNumberField = value;
                    this.RaisePropertyChanged("InvoiceNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PackageInformation {
            get {
                return this.PackageInformationField;
            }
            set {
                if ((object.ReferenceEquals(this.PackageInformationField, value) != true)) {
                    this.PackageInformationField = value;
                    this.RaisePropertyChanged("PackageInformation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PackageType {
            get {
                return this.PackageTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PackageTypeField, value) != true)) {
                    this.PackageTypeField = value;
                    this.RaisePropertyChanged("PackageType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ShipTime {
            get {
                return this.ShipTimeField;
            }
            set {
                if ((this.ShipTimeField.Equals(value) != true)) {
                    this.ShipTimeField = value;
                    this.RaisePropertyChanged("ShipTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcDeliveryItem", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcDeliveryItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DeliveryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string POField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PackNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Abbr {
            get {
                return this.AbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.AbbrField, value) != true)) {
                    this.AbbrField = value;
                    this.RaisePropertyChanged("Abbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Customer {
            get {
                return this.CustomerField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerField, value) != true)) {
                    this.CustomerField = value;
                    this.RaisePropertyChanged("Customer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DeliveryID {
            get {
                return this.DeliveryIDField;
            }
            set {
                if ((this.DeliveryIDField.Equals(value) != true)) {
                    this.DeliveryIDField = value;
                    this.RaisePropertyChanged("DeliveryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailRecord {
            get {
                return this.DetailRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailRecordField, value) != true)) {
                    this.DetailRecordField = value;
                    this.RaisePropertyChanged("DetailRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PO {
            get {
                return this.POField;
            }
            set {
                if ((object.ReferenceEquals(this.POField, value) != true)) {
                    this.POField = value;
                    this.RaisePropertyChanged("PO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PackNumber {
            get {
                return this.PackNumberField;
            }
            set {
                if ((this.PackNumberField.Equals(value) != true)) {
                    this.PackNumberField = value;
                    this.RaisePropertyChanged("PackNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Position {
            get {
                return this.PositionField;
            }
            set {
                if ((object.ReferenceEquals(this.PositionField, value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIDField, value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductType {
            get {
                return this.ProductTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductTypeField, value) != true)) {
                    this.ProductTypeField = value;
                    this.RaisePropertyChanged("ProductType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((object.ReferenceEquals(this.WeightField, value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordTest", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordTest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionAbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionXRFField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DensityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionActualField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string POField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResistanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SampleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionAbbr {
            get {
                return this.CompositionAbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionAbbrField, value) != true)) {
                    this.CompositionAbbrField = value;
                    this.RaisePropertyChanged("CompositionAbbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionXRF {
            get {
                return this.CompositionXRFField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionXRFField, value) != true)) {
                    this.CompositionXRFField = value;
                    this.RaisePropertyChanged("CompositionXRF");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Customer {
            get {
                return this.CustomerField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerField, value) != true)) {
                    this.CustomerField = value;
                    this.RaisePropertyChanged("Customer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Defects {
            get {
                return this.DefectsField;
            }
            set {
                if ((object.ReferenceEquals(this.DefectsField, value) != true)) {
                    this.DefectsField = value;
                    this.RaisePropertyChanged("Defects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Density {
            get {
                return this.DensityField;
            }
            set {
                if ((object.ReferenceEquals(this.DensityField, value) != true)) {
                    this.DensityField = value;
                    this.RaisePropertyChanged("Density");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dimension {
            get {
                return this.DimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionField, value) != true)) {
                    this.DimensionField = value;
                    this.RaisePropertyChanged("Dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DimensionActual {
            get {
                return this.DimensionActualField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionActualField, value) != true)) {
                    this.DimensionActualField = value;
                    this.RaisePropertyChanged("DimensionActual");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PO {
            get {
                return this.POField;
            }
            set {
                if ((object.ReferenceEquals(this.POField, value) != true)) {
                    this.POField = value;
                    this.RaisePropertyChanged("PO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIDField, value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Resistance {
            get {
                return this.ResistanceField;
            }
            set {
                if ((object.ReferenceEquals(this.ResistanceField, value) != true)) {
                    this.ResistanceField = value;
                    this.RaisePropertyChanged("Resistance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sample {
            get {
                return this.SampleField;
            }
            set {
                if ((object.ReferenceEquals(this.SampleField, value) != true)) {
                    this.SampleField = value;
                    this.RaisePropertyChanged("Sample");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestType {
            get {
                return this.TestTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TestTypeField, value) != true)) {
                    this.TestTypeField = value;
                    this.RaisePropertyChanged("TestType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((object.ReferenceEquals(this.WeightField, value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordVHP", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordVHP : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CurrentTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtraInformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double OmegaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PV1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PV2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PV3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid PlanVHPIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SVField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Shift1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Shift2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VaccumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WaterTemperatureInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WaterTemperatureOutField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CurrentTime {
            get {
                return this.CurrentTimeField;
            }
            set {
                if ((this.CurrentTimeField.Equals(value) != true)) {
                    this.CurrentTimeField = value;
                    this.RaisePropertyChanged("CurrentTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExtraInformation {
            get {
                return this.ExtraInformationField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtraInformationField, value) != true)) {
                    this.ExtraInformationField = value;
                    this.RaisePropertyChanged("ExtraInformation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Omega {
            get {
                return this.OmegaField;
            }
            set {
                if ((this.OmegaField.Equals(value) != true)) {
                    this.OmegaField = value;
                    this.RaisePropertyChanged("Omega");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PV1 {
            get {
                return this.PV1Field;
            }
            set {
                if ((this.PV1Field.Equals(value) != true)) {
                    this.PV1Field = value;
                    this.RaisePropertyChanged("PV1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PV2 {
            get {
                return this.PV2Field;
            }
            set {
                if ((this.PV2Field.Equals(value) != true)) {
                    this.PV2Field = value;
                    this.RaisePropertyChanged("PV2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PV3 {
            get {
                return this.PV3Field;
            }
            set {
                if ((this.PV3Field.Equals(value) != true)) {
                    this.PV3Field = value;
                    this.RaisePropertyChanged("PV3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PlanVHPID {
            get {
                return this.PlanVHPIDField;
            }
            set {
                if ((this.PlanVHPIDField.Equals(value) != true)) {
                    this.PlanVHPIDField = value;
                    this.RaisePropertyChanged("PlanVHPID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SV {
            get {
                return this.SVField;
            }
            set {
                if ((this.SVField.Equals(value) != true)) {
                    this.SVField = value;
                    this.RaisePropertyChanged("SV");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Shift1 {
            get {
                return this.Shift1Field;
            }
            set {
                if ((this.Shift1Field.Equals(value) != true)) {
                    this.Shift1Field = value;
                    this.RaisePropertyChanged("Shift1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Shift2 {
            get {
                return this.Shift2Field;
            }
            set {
                if ((this.Shift2Field.Equals(value) != true)) {
                    this.Shift2Field = value;
                    this.RaisePropertyChanged("Shift2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Ton {
            get {
                return this.TonField;
            }
            set {
                if ((this.TonField.Equals(value) != true)) {
                    this.TonField = value;
                    this.RaisePropertyChanged("Ton");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Vaccum {
            get {
                return this.VaccumField;
            }
            set {
                if ((this.VaccumField.Equals(value) != true)) {
                    this.VaccumField = value;
                    this.RaisePropertyChanged("Vaccum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WaterTemperatureIn {
            get {
                return this.WaterTemperatureInField;
            }
            set {
                if ((this.WaterTemperatureInField.Equals(value) != true)) {
                    this.WaterTemperatureInField = value;
                    this.RaisePropertyChanged("WaterTemperatureIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WaterTemperatureOut {
            get {
                return this.WaterTemperatureOutField;
            }
            set {
                if ((this.WaterTemperatureOutField.Equals(value) != true)) {
                    this.WaterTemperatureOutField = value;
                    this.RaisePropertyChanged("WaterTemperatureOut");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordMilling", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordMilling : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GasProtectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MillingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MillingToolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RatioField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPPlanLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightOutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightRemainField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GasProtection {
            get {
                return this.GasProtectionField;
            }
            set {
                if ((object.ReferenceEquals(this.GasProtectionField, value) != true)) {
                    this.GasProtectionField = value;
                    this.RaisePropertyChanged("GasProtection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialSource {
            get {
                return this.MaterialSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialSourceField, value) != true)) {
                    this.MaterialSourceField = value;
                    this.RaisePropertyChanged("MaterialSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MillingTime {
            get {
                return this.MillingTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.MillingTimeField, value) != true)) {
                    this.MillingTimeField = value;
                    this.RaisePropertyChanged("MillingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MillingTool {
            get {
                return this.MillingToolField;
            }
            set {
                if ((object.ReferenceEquals(this.MillingToolField, value) != true)) {
                    this.MillingToolField = value;
                    this.RaisePropertyChanged("MillingTool");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Ratio {
            get {
                return this.RatioField;
            }
            set {
                if ((this.RatioField.Equals(value) != true)) {
                    this.RatioField = value;
                    this.RaisePropertyChanged("Ratio");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPPlanLot {
            get {
                return this.VHPPlanLotField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPPlanLotField, value) != true)) {
                    this.VHPPlanLotField = value;
                    this.RaisePropertyChanged("VHPPlanLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WeightIn {
            get {
                return this.WeightInField;
            }
            set {
                if ((this.WeightInField.Equals(value) != true)) {
                    this.WeightInField = value;
                    this.RaisePropertyChanged("WeightIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WeightOut {
            get {
                return this.WeightOutField;
            }
            set {
                if ((this.WeightOutField.Equals(value) != true)) {
                    this.WeightOutField = value;
                    this.RaisePropertyChanged("WeightOut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WeightRemain {
            get {
                return this.WeightRemainField;
            }
            set {
                if ((this.WeightRemainField.Equals(value) != true)) {
                    this.WeightRemainField = value;
                    this.RaisePropertyChanged("WeightRemain");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordMachine", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordMachine : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Diameter1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Diameter2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtraRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness4Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPPlanLotField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Defects {
            get {
                return this.DefectsField;
            }
            set {
                if ((object.ReferenceEquals(this.DefectsField, value) != true)) {
                    this.DefectsField = value;
                    this.RaisePropertyChanged("Defects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diameter1 {
            get {
                return this.Diameter1Field;
            }
            set {
                if ((this.Diameter1Field.Equals(value) != true)) {
                    this.Diameter1Field = value;
                    this.RaisePropertyChanged("Diameter1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diameter2 {
            get {
                return this.Diameter2Field;
            }
            set {
                if ((this.Diameter2Field.Equals(value) != true)) {
                    this.Diameter2Field = value;
                    this.RaisePropertyChanged("Diameter2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dimension {
            get {
                return this.DimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionField, value) != true)) {
                    this.DimensionField = value;
                    this.RaisePropertyChanged("Dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExtraRequirement {
            get {
                return this.ExtraRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtraRequirementField, value) != true)) {
                    this.ExtraRequirementField = value;
                    this.RaisePropertyChanged("ExtraRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness1 {
            get {
                return this.Thickness1Field;
            }
            set {
                if ((this.Thickness1Field.Equals(value) != true)) {
                    this.Thickness1Field = value;
                    this.RaisePropertyChanged("Thickness1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness2 {
            get {
                return this.Thickness2Field;
            }
            set {
                if ((this.Thickness2Field.Equals(value) != true)) {
                    this.Thickness2Field = value;
                    this.RaisePropertyChanged("Thickness2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness3 {
            get {
                return this.Thickness3Field;
            }
            set {
                if ((this.Thickness3Field.Equals(value) != true)) {
                    this.Thickness3Field = value;
                    this.RaisePropertyChanged("Thickness3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness4 {
            get {
                return this.Thickness4Field;
            }
            set {
                if ((this.Thickness4Field.Equals(value) != true)) {
                    this.Thickness4Field = value;
                    this.RaisePropertyChanged("Thickness4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPPlanLot {
            get {
                return this.VHPPlanLotField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPPlanLotField, value) != true)) {
                    this.VHPPlanLotField = value;
                    this.RaisePropertyChanged("VHPPlanLot");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordDeMold", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordDeMold : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeMoldTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Diameter1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Diameter2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Temperature1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Temperature2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness4Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPPlanLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeMoldType {
            get {
                return this.DeMoldTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DeMoldTypeField, value) != true)) {
                    this.DeMoldTypeField = value;
                    this.RaisePropertyChanged("DeMoldType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diameter1 {
            get {
                return this.Diameter1Field;
            }
            set {
                if ((this.Diameter1Field.Equals(value) != true)) {
                    this.Diameter1Field = value;
                    this.RaisePropertyChanged("Diameter1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diameter2 {
            get {
                return this.Diameter2Field;
            }
            set {
                if ((this.Diameter2Field.Equals(value) != true)) {
                    this.Diameter2Field = value;
                    this.RaisePropertyChanged("Diameter2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Temperature1 {
            get {
                return this.Temperature1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Temperature1Field, value) != true)) {
                    this.Temperature1Field = value;
                    this.RaisePropertyChanged("Temperature1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Temperature2 {
            get {
                return this.Temperature2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Temperature2Field, value) != true)) {
                    this.Temperature2Field = value;
                    this.RaisePropertyChanged("Temperature2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness1 {
            get {
                return this.Thickness1Field;
            }
            set {
                if ((this.Thickness1Field.Equals(value) != true)) {
                    this.Thickness1Field = value;
                    this.RaisePropertyChanged("Thickness1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness2 {
            get {
                return this.Thickness2Field;
            }
            set {
                if ((this.Thickness2Field.Equals(value) != true)) {
                    this.Thickness2Field = value;
                    this.RaisePropertyChanged("Thickness2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness3 {
            get {
                return this.Thickness3Field;
            }
            set {
                if ((this.Thickness3Field.Equals(value) != true)) {
                    this.Thickness3Field = value;
                    this.RaisePropertyChanged("Thickness3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness4 {
            get {
                return this.Thickness4Field;
            }
            set {
                if ((this.Thickness4Field.Equals(value) != true)) {
                    this.Thickness4Field = value;
                    this.RaisePropertyChanged("Thickness4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPPlanLot {
            get {
                return this.VHPPlanLotField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPPlanLotField, value) != true)) {
                    this.VHPPlanLotField = value;
                    this.RaisePropertyChanged("VHPPlanLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordBonding", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordBonding : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApperanceCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ApperanceCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApperancePersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BindingCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BindingCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BindingPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CleanCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CleanCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CleanPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DimensionCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionWarpageCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstructionCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PackCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateAppearanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateBelongField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PlateCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateDimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateHardnessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateLastWeldMaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateMaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateOtherRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlatePersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PlatePreProcessCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlatePreProcessPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlatePreProcessRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateSuplierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateUseCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SprayCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SprayCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SprayPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetAbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetAppearanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TargetCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetCompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetCustomerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetDefectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetDetailRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetDiameterCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetDimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetDimensionActualField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetPOField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TargetPreProcessCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetPreProcessPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetPreProcessRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetThicknessCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetWarpageCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetWeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime WarpageCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WarpageFixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WarpagePersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime WeldCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeldCuStringDiameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeldHoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeldMaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeldPersonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApperanceCheck {
            get {
                return this.ApperanceCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.ApperanceCheckField, value) != true)) {
                    this.ApperanceCheckField = value;
                    this.RaisePropertyChanged("ApperanceCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ApperanceCheckTime {
            get {
                return this.ApperanceCheckTimeField;
            }
            set {
                if ((this.ApperanceCheckTimeField.Equals(value) != true)) {
                    this.ApperanceCheckTimeField = value;
                    this.RaisePropertyChanged("ApperanceCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApperancePerson {
            get {
                return this.ApperancePersonField;
            }
            set {
                if ((object.ReferenceEquals(this.ApperancePersonField, value) != true)) {
                    this.ApperancePersonField = value;
                    this.RaisePropertyChanged("ApperancePerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BindingCheck {
            get {
                return this.BindingCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.BindingCheckField, value) != true)) {
                    this.BindingCheckField = value;
                    this.RaisePropertyChanged("BindingCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BindingCheckTime {
            get {
                return this.BindingCheckTimeField;
            }
            set {
                if ((this.BindingCheckTimeField.Equals(value) != true)) {
                    this.BindingCheckTimeField = value;
                    this.RaisePropertyChanged("BindingCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BindingPerson {
            get {
                return this.BindingPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.BindingPersonField, value) != true)) {
                    this.BindingPersonField = value;
                    this.RaisePropertyChanged("BindingPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CleanCheck {
            get {
                return this.CleanCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.CleanCheckField, value) != true)) {
                    this.CleanCheckField = value;
                    this.RaisePropertyChanged("CleanCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CleanCheckTime {
            get {
                return this.CleanCheckTimeField;
            }
            set {
                if ((this.CleanCheckTimeField.Equals(value) != true)) {
                    this.CleanCheckTimeField = value;
                    this.RaisePropertyChanged("CleanCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CleanPerson {
            get {
                return this.CleanPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.CleanPersonField, value) != true)) {
                    this.CleanPersonField = value;
                    this.RaisePropertyChanged("CleanPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DimensionCheck {
            get {
                return this.DimensionCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionCheckField, value) != true)) {
                    this.DimensionCheckField = value;
                    this.RaisePropertyChanged("DimensionCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DimensionCheckTime {
            get {
                return this.DimensionCheckTimeField;
            }
            set {
                if ((this.DimensionCheckTimeField.Equals(value) != true)) {
                    this.DimensionCheckTimeField = value;
                    this.RaisePropertyChanged("DimensionCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DimensionPerson {
            get {
                return this.DimensionPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionPersonField, value) != true)) {
                    this.DimensionPersonField = value;
                    this.RaisePropertyChanged("DimensionPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DimensionWarpageCheck {
            get {
                return this.DimensionWarpageCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionWarpageCheckField, value) != true)) {
                    this.DimensionWarpageCheckField = value;
                    this.RaisePropertyChanged("DimensionWarpageCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstructionCode {
            get {
                return this.InstructionCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.InstructionCodeField, value) != true)) {
                    this.InstructionCodeField = value;
                    this.RaisePropertyChanged("InstructionCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PackCheck {
            get {
                return this.PackCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.PackCheckField, value) != true)) {
                    this.PackCheckField = value;
                    this.RaisePropertyChanged("PackCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PackCheckTime {
            get {
                return this.PackCheckTimeField;
            }
            set {
                if ((this.PackCheckTimeField.Equals(value) != true)) {
                    this.PackCheckTimeField = value;
                    this.RaisePropertyChanged("PackCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PackPerson {
            get {
                return this.PackPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PackPersonField, value) != true)) {
                    this.PackPersonField = value;
                    this.RaisePropertyChanged("PackPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateAppearance {
            get {
                return this.PlateAppearanceField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateAppearanceField, value) != true)) {
                    this.PlateAppearanceField = value;
                    this.RaisePropertyChanged("PlateAppearance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateBelong {
            get {
                return this.PlateBelongField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateBelongField, value) != true)) {
                    this.PlateBelongField = value;
                    this.RaisePropertyChanged("PlateBelong");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PlateCheckTime {
            get {
                return this.PlateCheckTimeField;
            }
            set {
                if ((this.PlateCheckTimeField.Equals(value) != true)) {
                    this.PlateCheckTimeField = value;
                    this.RaisePropertyChanged("PlateCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateDimension {
            get {
                return this.PlateDimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateDimensionField, value) != true)) {
                    this.PlateDimensionField = value;
                    this.RaisePropertyChanged("PlateDimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateHardness {
            get {
                return this.PlateHardnessField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateHardnessField, value) != true)) {
                    this.PlateHardnessField = value;
                    this.RaisePropertyChanged("PlateHardness");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateLastWeldMaterial {
            get {
                return this.PlateLastWeldMaterialField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateLastWeldMaterialField, value) != true)) {
                    this.PlateLastWeldMaterialField = value;
                    this.RaisePropertyChanged("PlateLastWeldMaterial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateLot {
            get {
                return this.PlateLotField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateLotField, value) != true)) {
                    this.PlateLotField = value;
                    this.RaisePropertyChanged("PlateLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateMaterial {
            get {
                return this.PlateMaterialField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateMaterialField, value) != true)) {
                    this.PlateMaterialField = value;
                    this.RaisePropertyChanged("PlateMaterial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateOtherRecord {
            get {
                return this.PlateOtherRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateOtherRecordField, value) != true)) {
                    this.PlateOtherRecordField = value;
                    this.RaisePropertyChanged("PlateOtherRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlatePerson {
            get {
                return this.PlatePersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PlatePersonField, value) != true)) {
                    this.PlatePersonField = value;
                    this.RaisePropertyChanged("PlatePerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PlatePreProcessCheckTime {
            get {
                return this.PlatePreProcessCheckTimeField;
            }
            set {
                if ((this.PlatePreProcessCheckTimeField.Equals(value) != true)) {
                    this.PlatePreProcessCheckTimeField = value;
                    this.RaisePropertyChanged("PlatePreProcessCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlatePreProcessPerson {
            get {
                return this.PlatePreProcessPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PlatePreProcessPersonField, value) != true)) {
                    this.PlatePreProcessPersonField = value;
                    this.RaisePropertyChanged("PlatePreProcessPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlatePreProcessRecord {
            get {
                return this.PlatePreProcessRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.PlatePreProcessRecordField, value) != true)) {
                    this.PlatePreProcessRecordField = value;
                    this.RaisePropertyChanged("PlatePreProcessRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateSuplier {
            get {
                return this.PlateSuplierField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateSuplierField, value) != true)) {
                    this.PlateSuplierField = value;
                    this.RaisePropertyChanged("PlateSuplier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateUseCount {
            get {
                return this.PlateUseCountField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateUseCountField, value) != true)) {
                    this.PlateUseCountField = value;
                    this.RaisePropertyChanged("PlateUseCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SprayCheck {
            get {
                return this.SprayCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.SprayCheckField, value) != true)) {
                    this.SprayCheckField = value;
                    this.RaisePropertyChanged("SprayCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SprayCheckTime {
            get {
                return this.SprayCheckTimeField;
            }
            set {
                if ((this.SprayCheckTimeField.Equals(value) != true)) {
                    this.SprayCheckTimeField = value;
                    this.RaisePropertyChanged("SprayCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SprayPerson {
            get {
                return this.SprayPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.SprayPersonField, value) != true)) {
                    this.SprayPersonField = value;
                    this.RaisePropertyChanged("SprayPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetAbbr {
            get {
                return this.TargetAbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetAbbrField, value) != true)) {
                    this.TargetAbbrField = value;
                    this.RaisePropertyChanged("TargetAbbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetAppearance {
            get {
                return this.TargetAppearanceField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetAppearanceField, value) != true)) {
                    this.TargetAppearanceField = value;
                    this.RaisePropertyChanged("TargetAppearance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TargetCheckTime {
            get {
                return this.TargetCheckTimeField;
            }
            set {
                if ((this.TargetCheckTimeField.Equals(value) != true)) {
                    this.TargetCheckTimeField = value;
                    this.RaisePropertyChanged("TargetCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetComposition {
            get {
                return this.TargetCompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetCompositionField, value) != true)) {
                    this.TargetCompositionField = value;
                    this.RaisePropertyChanged("TargetComposition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetCustomer {
            get {
                return this.TargetCustomerField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetCustomerField, value) != true)) {
                    this.TargetCustomerField = value;
                    this.RaisePropertyChanged("TargetCustomer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDefects {
            get {
                return this.TargetDefectsField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetDefectsField, value) != true)) {
                    this.TargetDefectsField = value;
                    this.RaisePropertyChanged("TargetDefects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDetailRecord {
            get {
                return this.TargetDetailRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetDetailRecordField, value) != true)) {
                    this.TargetDetailRecordField = value;
                    this.RaisePropertyChanged("TargetDetailRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDiameterCheck {
            get {
                return this.TargetDiameterCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetDiameterCheckField, value) != true)) {
                    this.TargetDiameterCheckField = value;
                    this.RaisePropertyChanged("TargetDiameterCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDimension {
            get {
                return this.TargetDimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetDimensionField, value) != true)) {
                    this.TargetDimensionField = value;
                    this.RaisePropertyChanged("TargetDimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDimensionActual {
            get {
                return this.TargetDimensionActualField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetDimensionActualField, value) != true)) {
                    this.TargetDimensionActualField = value;
                    this.RaisePropertyChanged("TargetDimensionActual");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetPO {
            get {
                return this.TargetPOField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetPOField, value) != true)) {
                    this.TargetPOField = value;
                    this.RaisePropertyChanged("TargetPO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetPerson {
            get {
                return this.TargetPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetPersonField, value) != true)) {
                    this.TargetPersonField = value;
                    this.RaisePropertyChanged("TargetPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TargetPreProcessCheckTime {
            get {
                return this.TargetPreProcessCheckTimeField;
            }
            set {
                if ((this.TargetPreProcessCheckTimeField.Equals(value) != true)) {
                    this.TargetPreProcessCheckTimeField = value;
                    this.RaisePropertyChanged("TargetPreProcessCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetPreProcessPerson {
            get {
                return this.TargetPreProcessPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetPreProcessPersonField, value) != true)) {
                    this.TargetPreProcessPersonField = value;
                    this.RaisePropertyChanged("TargetPreProcessPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetPreProcessRecord {
            get {
                return this.TargetPreProcessRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetPreProcessRecordField, value) != true)) {
                    this.TargetPreProcessRecordField = value;
                    this.RaisePropertyChanged("TargetPreProcessRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetProductID {
            get {
                return this.TargetProductIDField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetProductIDField, value) != true)) {
                    this.TargetProductIDField = value;
                    this.RaisePropertyChanged("TargetProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetThicknessCheck {
            get {
                return this.TargetThicknessCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetThicknessCheckField, value) != true)) {
                    this.TargetThicknessCheckField = value;
                    this.RaisePropertyChanged("TargetThicknessCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetWarpageCheck {
            get {
                return this.TargetWarpageCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetWarpageCheckField, value) != true)) {
                    this.TargetWarpageCheckField = value;
                    this.RaisePropertyChanged("TargetWarpageCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetWeight {
            get {
                return this.TargetWeightField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetWeightField, value) != true)) {
                    this.TargetWeightField = value;
                    this.RaisePropertyChanged("TargetWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime WarpageCheckTime {
            get {
                return this.WarpageCheckTimeField;
            }
            set {
                if ((this.WarpageCheckTimeField.Equals(value) != true)) {
                    this.WarpageCheckTimeField = value;
                    this.RaisePropertyChanged("WarpageCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WarpageFix {
            get {
                return this.WarpageFixField;
            }
            set {
                if ((object.ReferenceEquals(this.WarpageFixField, value) != true)) {
                    this.WarpageFixField = value;
                    this.RaisePropertyChanged("WarpageFix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WarpagePerson {
            get {
                return this.WarpagePersonField;
            }
            set {
                if ((object.ReferenceEquals(this.WarpagePersonField, value) != true)) {
                    this.WarpagePersonField = value;
                    this.RaisePropertyChanged("WarpagePerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime WeldCheckTime {
            get {
                return this.WeldCheckTimeField;
            }
            set {
                if ((this.WeldCheckTimeField.Equals(value) != true)) {
                    this.WeldCheckTimeField = value;
                    this.RaisePropertyChanged("WeldCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WeldCuStringDiameter {
            get {
                return this.WeldCuStringDiameterField;
            }
            set {
                if ((object.ReferenceEquals(this.WeldCuStringDiameterField, value) != true)) {
                    this.WeldCuStringDiameterField = value;
                    this.RaisePropertyChanged("WeldCuStringDiameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WeldHold {
            get {
                return this.WeldHoldField;
            }
            set {
                if ((object.ReferenceEquals(this.WeldHoldField, value) != true)) {
                    this.WeldHoldField = value;
                    this.RaisePropertyChanged("WeldHold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WeldMaterial {
            get {
                return this.WeldMaterialField;
            }
            set {
                if ((object.ReferenceEquals(this.WeldMaterialField, value) != true)) {
                    this.WeldMaterialField = value;
                    this.RaisePropertyChanged("WeldMaterial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WeldPerson {
            get {
                return this.WeldPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.WeldPersonField, value) != true)) {
                    this.WeldPersonField = value;
                    this.RaisePropertyChanged("WeldPerson");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcProduct", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcProduct : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionActualField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string POField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Abbr {
            get {
                return this.AbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.AbbrField, value) != true)) {
                    this.AbbrField = value;
                    this.RaisePropertyChanged("Abbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Customer {
            get {
                return this.CustomerField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerField, value) != true)) {
                    this.CustomerField = value;
                    this.RaisePropertyChanged("Customer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Defects {
            get {
                return this.DefectsField;
            }
            set {
                if ((object.ReferenceEquals(this.DefectsField, value) != true)) {
                    this.DefectsField = value;
                    this.RaisePropertyChanged("Defects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dimension {
            get {
                return this.DimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionField, value) != true)) {
                    this.DimensionField = value;
                    this.RaisePropertyChanged("Dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DimensionActual {
            get {
                return this.DimensionActualField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionActualField, value) != true)) {
                    this.DimensionActualField = value;
                    this.RaisePropertyChanged("DimensionActual");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PO {
            get {
                return this.POField;
            }
            set {
                if ((object.ReferenceEquals(this.POField, value) != true)) {
                    this.POField = value;
                    this.RaisePropertyChanged("PO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Position {
            get {
                return this.PositionField;
            }
            set {
                if ((object.ReferenceEquals(this.PositionField, value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIDField, value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductType {
            get {
                return this.ProductTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductTypeField, value) != true)) {
                    this.ProductTypeField = value;
                    this.RaisePropertyChanged("ProductType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((object.ReferenceEquals(this.WeightField, value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IOrderService")]
    public interface IOrderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetAllOrderInPage", ReplyAction="http://tempuri.org/IOrderService/GetAllOrderInPageResponse")]
        PMSClient.MainService.DcOrder[] GetAllOrderInPage(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetAllOrderInPage", ReplyAction="http://tempuri.org/IOrderService/GetAllOrderInPageResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetAllOrderInPageAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderBySearchInPage", ReplyAction="http://tempuri.org/IOrderService/GetOrderBySearchInPageResponse")]
        PMSClient.MainService.DcOrder[] GetOrderBySearchInPage(int skip, int take, string customer, string compositionstd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderBySearchInPage", ReplyAction="http://tempuri.org/IOrderService/GetOrderBySearchInPageResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetOrderBySearchInPageAsync(int skip, int take, string customer, string compositionstd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderCountBySearch", ReplyAction="http://tempuri.org/IOrderService/GetOrderCountBySearchResponse")]
        int GetOrderCountBySearch(string customer, string compositionstd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderCountBySearch", ReplyAction="http://tempuri.org/IOrderService/GetOrderCountBySearchResponse")]
        System.Threading.Tasks.Task<int> GetOrderCountBySearchAsync(string customer, string compositionstd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddOrder", ReplyAction="http://tempuri.org/IOrderService/AddOrderResponse")]
        int AddOrder(PMSClient.MainService.DcOrder order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddOrder", ReplyAction="http://tempuri.org/IOrderService/AddOrderResponse")]
        System.Threading.Tasks.Task<int> AddOrderAsync(PMSClient.MainService.DcOrder order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/UpdateOrder", ReplyAction="http://tempuri.org/IOrderService/UpdateOrderResponse")]
        int UpdateOrder(PMSClient.MainService.DcOrder order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/UpdateOrder", ReplyAction="http://tempuri.org/IOrderService/UpdateOrderResponse")]
        System.Threading.Tasks.Task<int> UpdateOrderAsync(PMSClient.MainService.DcOrder order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteOrder", ReplyAction="http://tempuri.org/IOrderService/DeleteOrderResponse")]
        int DeleteOrder(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteOrder", ReplyAction="http://tempuri.org/IOrderService/DeleteOrderResponse")]
        System.Threading.Tasks.Task<int> DeleteOrderAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrderServiceChannel : PMSClient.MainService.IOrderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrderServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IOrderService>, PMSClient.MainService.IOrderService {
        
        public OrderServiceClient() {
        }
        
        public OrderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcOrder[] GetAllOrderInPage(int skip, int take) {
            return base.Channel.GetAllOrderInPage(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetAllOrderInPageAsync(int skip, int take) {
            return base.Channel.GetAllOrderInPageAsync(skip, take);
        }
        
        public PMSClient.MainService.DcOrder[] GetOrderBySearchInPage(int skip, int take, string customer, string compositionstd) {
            return base.Channel.GetOrderBySearchInPage(skip, take, customer, compositionstd);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetOrderBySearchInPageAsync(int skip, int take, string customer, string compositionstd) {
            return base.Channel.GetOrderBySearchInPageAsync(skip, take, customer, compositionstd);
        }
        
        public int GetOrderCountBySearch(string customer, string compositionstd) {
            return base.Channel.GetOrderCountBySearch(customer, compositionstd);
        }
        
        public System.Threading.Tasks.Task<int> GetOrderCountBySearchAsync(string customer, string compositionstd) {
            return base.Channel.GetOrderCountBySearchAsync(customer, compositionstd);
        }
        
        public int AddOrder(PMSClient.MainService.DcOrder order) {
            return base.Channel.AddOrder(order);
        }
        
        public System.Threading.Tasks.Task<int> AddOrderAsync(PMSClient.MainService.DcOrder order) {
            return base.Channel.AddOrderAsync(order);
        }
        
        public int UpdateOrder(PMSClient.MainService.DcOrder order) {
            return base.Channel.UpdateOrder(order);
        }
        
        public System.Threading.Tasks.Task<int> UpdateOrderAsync(PMSClient.MainService.DcOrder order) {
            return base.Channel.UpdateOrderAsync(order);
        }
        
        public int DeleteOrder(System.Guid id) {
            return base.Channel.DeleteOrder(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteOrderAsync(System.Guid id) {
            return base.Channel.DeleteOrderAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IPlanVHPService")]
    public interface IPlanVHPService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/GetVHPPlansByOrderID", ReplyAction="http://tempuri.org/IPlanVHPService/GetVHPPlansByOrderIDResponse")]
        PMSClient.MainService.DcPlanVHP[] GetVHPPlansByOrderID(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/GetVHPPlansByOrderID", ReplyAction="http://tempuri.org/IPlanVHPService/GetVHPPlansByOrderIDResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcPlanVHP[]> GetVHPPlansByOrderIDAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/AddVHPPlan", ReplyAction="http://tempuri.org/IPlanVHPService/AddVHPPlanResponse")]
        int AddVHPPlan(PMSClient.MainService.DcPlanVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/AddVHPPlan", ReplyAction="http://tempuri.org/IPlanVHPService/AddVHPPlanResponse")]
        System.Threading.Tasks.Task<int> AddVHPPlanAsync(PMSClient.MainService.DcPlanVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/UpdateVHPPlan", ReplyAction="http://tempuri.org/IPlanVHPService/UpdateVHPPlanResponse")]
        int UpdateVHPPlan(PMSClient.MainService.DcPlanVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/UpdateVHPPlan", ReplyAction="http://tempuri.org/IPlanVHPService/UpdateVHPPlanResponse")]
        System.Threading.Tasks.Task<int> UpdateVHPPlanAsync(PMSClient.MainService.DcPlanVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/DeleteVHPPlan", ReplyAction="http://tempuri.org/IPlanVHPService/DeleteVHPPlanResponse")]
        int DeleteVHPPlan(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/DeleteVHPPlan", ReplyAction="http://tempuri.org/IPlanVHPService/DeleteVHPPlanResponse")]
        System.Threading.Tasks.Task<int> DeleteVHPPlanAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlanVHPServiceChannel : PMSClient.MainService.IPlanVHPService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlanVHPServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IPlanVHPService>, PMSClient.MainService.IPlanVHPService {
        
        public PlanVHPServiceClient() {
        }
        
        public PlanVHPServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlanVHPServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlanVHPServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlanVHPServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcPlanVHP[] GetVHPPlansByOrderID(System.Guid id) {
            return base.Channel.GetVHPPlansByOrderID(id);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcPlanVHP[]> GetVHPPlansByOrderIDAsync(System.Guid id) {
            return base.Channel.GetVHPPlansByOrderIDAsync(id);
        }
        
        public int AddVHPPlan(PMSClient.MainService.DcPlanVHP model) {
            return base.Channel.AddVHPPlan(model);
        }
        
        public System.Threading.Tasks.Task<int> AddVHPPlanAsync(PMSClient.MainService.DcPlanVHP model) {
            return base.Channel.AddVHPPlanAsync(model);
        }
        
        public int UpdateVHPPlan(PMSClient.MainService.DcPlanVHP model) {
            return base.Channel.UpdateVHPPlan(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateVHPPlanAsync(PMSClient.MainService.DcPlanVHP model) {
            return base.Channel.UpdateVHPPlanAsync(model);
        }
        
        public int DeleteVHPPlan(System.Guid id) {
            return base.Channel.DeleteVHPPlan(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteVHPPlanAsync(System.Guid id) {
            return base.Channel.DeleteVHPPlanAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IMaterialNeedService")]
    public interface IMaterialNeedService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/GetMaterialNeedBySearchInPage", ReplyAction="http://tempuri.org/IMaterialNeedService/GetMaterialNeedBySearchInPageResponse")]
        PMSClient.MainService.DcMaterialNeed[] GetMaterialNeedBySearchInPage(int skip, int take, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/GetMaterialNeedBySearchInPage", ReplyAction="http://tempuri.org/IMaterialNeedService/GetMaterialNeedBySearchInPageResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialNeed[]> GetMaterialNeedBySearchInPageAsync(int skip, int take, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/GetMaterialNeedCountBySearch", ReplyAction="http://tempuri.org/IMaterialNeedService/GetMaterialNeedCountBySearchResponse")]
        int GetMaterialNeedCountBySearch(string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/GetMaterialNeedCountBySearch", ReplyAction="http://tempuri.org/IMaterialNeedService/GetMaterialNeedCountBySearchResponse")]
        System.Threading.Tasks.Task<int> GetMaterialNeedCountBySearchAsync(string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/AddMaterialNeed", ReplyAction="http://tempuri.org/IMaterialNeedService/AddMaterialNeedResponse")]
        int AddMaterialNeed(PMSClient.MainService.DcMaterialNeed model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/AddMaterialNeed", ReplyAction="http://tempuri.org/IMaterialNeedService/AddMaterialNeedResponse")]
        System.Threading.Tasks.Task<int> AddMaterialNeedAsync(PMSClient.MainService.DcMaterialNeed model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/UpdateMaterialNeed", ReplyAction="http://tempuri.org/IMaterialNeedService/UpdateMaterialNeedResponse")]
        int UpdateMaterialNeed(PMSClient.MainService.DcMaterialNeed model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/UpdateMaterialNeed", ReplyAction="http://tempuri.org/IMaterialNeedService/UpdateMaterialNeedResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialNeedAsync(PMSClient.MainService.DcMaterialNeed model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/DeleteMaterialNeed", ReplyAction="http://tempuri.org/IMaterialNeedService/DeleteMaterialNeedResponse")]
        int DeleteMaterialNeed(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/DeleteMaterialNeed", ReplyAction="http://tempuri.org/IMaterialNeedService/DeleteMaterialNeedResponse")]
        System.Threading.Tasks.Task<int> DeleteMaterialNeedAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMaterialNeedServiceChannel : PMSClient.MainService.IMaterialNeedService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MaterialNeedServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IMaterialNeedService>, PMSClient.MainService.IMaterialNeedService {
        
        public MaterialNeedServiceClient() {
        }
        
        public MaterialNeedServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MaterialNeedServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialNeedServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialNeedServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcMaterialNeed[] GetMaterialNeedBySearchInPage(int skip, int take, string composition) {
            return base.Channel.GetMaterialNeedBySearchInPage(skip, take, composition);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialNeed[]> GetMaterialNeedBySearchInPageAsync(int skip, int take, string composition) {
            return base.Channel.GetMaterialNeedBySearchInPageAsync(skip, take, composition);
        }
        
        public int GetMaterialNeedCountBySearch(string composition) {
            return base.Channel.GetMaterialNeedCountBySearch(composition);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialNeedCountBySearchAsync(string composition) {
            return base.Channel.GetMaterialNeedCountBySearchAsync(composition);
        }
        
        public int AddMaterialNeed(PMSClient.MainService.DcMaterialNeed model) {
            return base.Channel.AddMaterialNeed(model);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialNeedAsync(PMSClient.MainService.DcMaterialNeed model) {
            return base.Channel.AddMaterialNeedAsync(model);
        }
        
        public int UpdateMaterialNeed(PMSClient.MainService.DcMaterialNeed model) {
            return base.Channel.UpdateMaterialNeed(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialNeedAsync(PMSClient.MainService.DcMaterialNeed model) {
            return base.Channel.UpdateMaterialNeedAsync(model);
        }
        
        public int DeleteMaterialNeed(System.Guid id) {
            return base.Channel.DeleteMaterialNeed(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMaterialNeedAsync(System.Guid id) {
            return base.Channel.DeleteMaterialNeedAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IMaterialOrderService")]
    public interface IMaterialOrderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderBySearchInPage", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderBySearchInPageResponse")]
        PMSClient.MainService.DcMaterialOrder[] GetMaterialOrderBySearchInPage(int skip, int take, string orderPo, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderBySearchInPage", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderBySearchInPageResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrder[]> GetMaterialOrderBySearchInPageAsync(int skip, int take, string orderPo, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountBySearch", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountBySearchResponse")]
        int GetMaterialOrderCountBySearch(string orderPo, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountBySearch", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountBySearchResponse")]
        System.Threading.Tasks.Task<int> GetMaterialOrderCountBySearchAsync(string orderPo, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderForSanjie", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderForSanjieResponse")]
        PMSClient.MainService.DcMaterialOrder[] GetMaterialOrderForSanjie(int skip, int take, string orderPo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderForSanjie", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderForSanjieResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrder[]> GetMaterialOrderForSanjieAsync(int skip, int take, string orderPo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountForSanjie", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountForSanjieResponse")]
        int GetMaterialOrderCountForSanjie(string orderPo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountForSanjie", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountForSanjieResponse")]
        System.Threading.Tasks.Task<int> GetMaterialOrderCountForSanjieAsync(string orderPo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/AddMaterialOrder", ReplyAction="http://tempuri.org/IMaterialOrderService/AddMaterialOrderResponse")]
        int AddMaterialOrder(PMSClient.MainService.DcMaterialOrder model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/AddMaterialOrder", ReplyAction="http://tempuri.org/IMaterialOrderService/AddMaterialOrderResponse")]
        System.Threading.Tasks.Task<int> AddMaterialOrderAsync(PMSClient.MainService.DcMaterialOrder model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrder", ReplyAction="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderResponse")]
        int UpdateMaterialOrder(PMSClient.MainService.DcMaterialOrder model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrder", ReplyAction="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialOrderAsync(PMSClient.MainService.DcMaterialOrder model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrder", ReplyAction="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrderResponse")]
        int DeleteMaterialOrder(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrder", ReplyAction="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrderResponse")]
        System.Threading.Tasks.Task<int> DeleteMaterialOrderAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItembyMaterialID", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItembyMaterialIDResponse" +
            "")]
        PMSClient.MainService.DcMaterialOrderItem[] GetMaterialOrderItembyMaterialID(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItembyMaterialID", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItembyMaterialIDResponse" +
            "")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrderItem[]> GetMaterialOrderItembyMaterialIDAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemCountByMaterialID", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemCountByMaterialIDRes" +
            "ponse")]
        int GetMaterialOrderItemCountByMaterialID(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemCountByMaterialID", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemCountByMaterialIDRes" +
            "ponse")]
        System.Threading.Tasks.Task<int> GetMaterialOrderItemCountByMaterialIDAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/AddMaterialOrderItem", ReplyAction="http://tempuri.org/IMaterialOrderService/AddMaterialOrderItemResponse")]
        int AddMaterialOrderItem(PMSClient.MainService.DcMaterialOrderItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/AddMaterialOrderItem", ReplyAction="http://tempuri.org/IMaterialOrderService/AddMaterialOrderItemResponse")]
        System.Threading.Tasks.Task<int> AddMaterialOrderItemAsync(PMSClient.MainService.DcMaterialOrderItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderItem", ReplyAction="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderItemResponse")]
        int UpdateMaterialOrderItem(PMSClient.MainService.DcMaterialOrderItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderItem", ReplyAction="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderItemResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialOrderItemAsync(PMSClient.MainService.DcMaterialOrderItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrderItem", ReplyAction="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrderItemResponse")]
        int DeleteMaterialOrderItem(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrderItem", ReplyAction="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrderItemResponse")]
        System.Threading.Tasks.Task<int> DeleteMaterialOrderItemAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItems", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemsResponse")]
        PMSClient.MainService.DcMaterialOrderItem[] GetMaterialOrderItems(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItems", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrderItem[]> GetMaterialOrderItemsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemsCount", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemsCountResponse")]
        int GetMaterialOrderItemsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemsCount", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemsCountResponse")]
        System.Threading.Tasks.Task<int> GetMaterialOrderItemsCountAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMaterialOrderServiceChannel : PMSClient.MainService.IMaterialOrderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MaterialOrderServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IMaterialOrderService>, PMSClient.MainService.IMaterialOrderService {
        
        public MaterialOrderServiceClient() {
        }
        
        public MaterialOrderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MaterialOrderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialOrderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialOrderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcMaterialOrder[] GetMaterialOrderBySearchInPage(int skip, int take, string orderPo, string supplier) {
            return base.Channel.GetMaterialOrderBySearchInPage(skip, take, orderPo, supplier);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrder[]> GetMaterialOrderBySearchInPageAsync(int skip, int take, string orderPo, string supplier) {
            return base.Channel.GetMaterialOrderBySearchInPageAsync(skip, take, orderPo, supplier);
        }
        
        public int GetMaterialOrderCountBySearch(string orderPo, string supplier) {
            return base.Channel.GetMaterialOrderCountBySearch(orderPo, supplier);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialOrderCountBySearchAsync(string orderPo, string supplier) {
            return base.Channel.GetMaterialOrderCountBySearchAsync(orderPo, supplier);
        }
        
        public PMSClient.MainService.DcMaterialOrder[] GetMaterialOrderForSanjie(int skip, int take, string orderPo) {
            return base.Channel.GetMaterialOrderForSanjie(skip, take, orderPo);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrder[]> GetMaterialOrderForSanjieAsync(int skip, int take, string orderPo) {
            return base.Channel.GetMaterialOrderForSanjieAsync(skip, take, orderPo);
        }
        
        public int GetMaterialOrderCountForSanjie(string orderPo) {
            return base.Channel.GetMaterialOrderCountForSanjie(orderPo);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialOrderCountForSanjieAsync(string orderPo) {
            return base.Channel.GetMaterialOrderCountForSanjieAsync(orderPo);
        }
        
        public int AddMaterialOrder(PMSClient.MainService.DcMaterialOrder model) {
            return base.Channel.AddMaterialOrder(model);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialOrderAsync(PMSClient.MainService.DcMaterialOrder model) {
            return base.Channel.AddMaterialOrderAsync(model);
        }
        
        public int UpdateMaterialOrder(PMSClient.MainService.DcMaterialOrder model) {
            return base.Channel.UpdateMaterialOrder(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialOrderAsync(PMSClient.MainService.DcMaterialOrder model) {
            return base.Channel.UpdateMaterialOrderAsync(model);
        }
        
        public int DeleteMaterialOrder(System.Guid id) {
            return base.Channel.DeleteMaterialOrder(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMaterialOrderAsync(System.Guid id) {
            return base.Channel.DeleteMaterialOrderAsync(id);
        }
        
        public PMSClient.MainService.DcMaterialOrderItem[] GetMaterialOrderItembyMaterialID(System.Guid id) {
            return base.Channel.GetMaterialOrderItembyMaterialID(id);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrderItem[]> GetMaterialOrderItembyMaterialIDAsync(System.Guid id) {
            return base.Channel.GetMaterialOrderItembyMaterialIDAsync(id);
        }
        
        public int GetMaterialOrderItemCountByMaterialID(System.Guid id) {
            return base.Channel.GetMaterialOrderItemCountByMaterialID(id);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialOrderItemCountByMaterialIDAsync(System.Guid id) {
            return base.Channel.GetMaterialOrderItemCountByMaterialIDAsync(id);
        }
        
        public int AddMaterialOrderItem(PMSClient.MainService.DcMaterialOrderItem model) {
            return base.Channel.AddMaterialOrderItem(model);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialOrderItemAsync(PMSClient.MainService.DcMaterialOrderItem model) {
            return base.Channel.AddMaterialOrderItemAsync(model);
        }
        
        public int UpdateMaterialOrderItem(PMSClient.MainService.DcMaterialOrderItem model) {
            return base.Channel.UpdateMaterialOrderItem(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialOrderItemAsync(PMSClient.MainService.DcMaterialOrderItem model) {
            return base.Channel.UpdateMaterialOrderItemAsync(model);
        }
        
        public int DeleteMaterialOrderItem(System.Guid id) {
            return base.Channel.DeleteMaterialOrderItem(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMaterialOrderItemAsync(System.Guid id) {
            return base.Channel.DeleteMaterialOrderItemAsync(id);
        }
        
        public PMSClient.MainService.DcMaterialOrderItem[] GetMaterialOrderItems(int skip, int take) {
            return base.Channel.GetMaterialOrderItems(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrderItem[]> GetMaterialOrderItemsAsync(int skip, int take) {
            return base.Channel.GetMaterialOrderItemsAsync(skip, take);
        }
        
        public int GetMaterialOrderItemsCount() {
            return base.Channel.GetMaterialOrderItemsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialOrderItemsCountAsync() {
            return base.Channel.GetMaterialOrderItemsCountAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IMaterialInventoryService")]
    public interface IMaterialInventoryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryIns", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInsResponse")]
        PMSClient.MainService.DcMaterialInventoryIn[] GetMaterialInventoryIns(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryIns", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialInventoryIn[]> GetMaterialInventoryInsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCount", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCountResponse")]
        int GetMaterialInventoryInCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCount", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCountResponse")]
        System.Threading.Tasks.Task<int> GetMaterialInventoryInCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryInResponse")]
        int AddMaterialInventoryIn(PMSClient.MainService.DcMaterialInventoryIn model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryInResponse")]
        System.Threading.Tasks.Task<int> AddMaterialInventoryInAsync(PMSClient.MainService.DcMaterialInventoryIn model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryInResponse")]
        int UpdateMaterialInventoryIn(PMSClient.MainService.DcMaterialInventoryIn model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryInResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialInventoryInAsync(PMSClient.MainService.DcMaterialInventoryIn model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryInResponse")]
        int DeleteMaterialInventoryIn(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryInResponse")]
        System.Threading.Tasks.Task<int> DeleteMaterialInventoryInAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOuts", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutsResponse")]
        PMSClient.MainService.DcMaterialInventoryOut[] GetMaterialInventoryOuts(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOuts", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialInventoryOut[]> GetMaterialInventoryOutsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCount", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCountResponse" +
            "")]
        int GetMaterialInventoryOutCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCount", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCountResponse" +
            "")]
        System.Threading.Tasks.Task<int> GetMaterialInventoryOutCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryOutResponse")]
        int AddMaterialInventoryOut(PMSClient.MainService.DcMaterialInventoryOut model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryOutResponse")]
        System.Threading.Tasks.Task<int> AddMaterialInventoryOutAsync(PMSClient.MainService.DcMaterialInventoryOut model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryOutResponse")]
        int UpdateMaterialInventoryOut(PMSClient.MainService.DcMaterialInventoryOut model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryOutResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialInventoryOutAsync(PMSClient.MainService.DcMaterialInventoryOut model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryOutResponse")]
        int DeleteMaterialInventoryOut(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryOutResponse")]
        System.Threading.Tasks.Task<int> DeleteMaterialInventoryOutAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMaterialInventoryServiceChannel : PMSClient.MainService.IMaterialInventoryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MaterialInventoryServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IMaterialInventoryService>, PMSClient.MainService.IMaterialInventoryService {
        
        public MaterialInventoryServiceClient() {
        }
        
        public MaterialInventoryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MaterialInventoryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialInventoryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialInventoryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcMaterialInventoryIn[] GetMaterialInventoryIns(int skip, int take) {
            return base.Channel.GetMaterialInventoryIns(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialInventoryIn[]> GetMaterialInventoryInsAsync(int skip, int take) {
            return base.Channel.GetMaterialInventoryInsAsync(skip, take);
        }
        
        public int GetMaterialInventoryInCount() {
            return base.Channel.GetMaterialInventoryInCount();
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialInventoryInCountAsync() {
            return base.Channel.GetMaterialInventoryInCountAsync();
        }
        
        public int AddMaterialInventoryIn(PMSClient.MainService.DcMaterialInventoryIn model) {
            return base.Channel.AddMaterialInventoryIn(model);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialInventoryInAsync(PMSClient.MainService.DcMaterialInventoryIn model) {
            return base.Channel.AddMaterialInventoryInAsync(model);
        }
        
        public int UpdateMaterialInventoryIn(PMSClient.MainService.DcMaterialInventoryIn model) {
            return base.Channel.UpdateMaterialInventoryIn(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialInventoryInAsync(PMSClient.MainService.DcMaterialInventoryIn model) {
            return base.Channel.UpdateMaterialInventoryInAsync(model);
        }
        
        public int DeleteMaterialInventoryIn(System.Guid id) {
            return base.Channel.DeleteMaterialInventoryIn(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMaterialInventoryInAsync(System.Guid id) {
            return base.Channel.DeleteMaterialInventoryInAsync(id);
        }
        
        public PMSClient.MainService.DcMaterialInventoryOut[] GetMaterialInventoryOuts(int skip, int take) {
            return base.Channel.GetMaterialInventoryOuts(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialInventoryOut[]> GetMaterialInventoryOutsAsync(int skip, int take) {
            return base.Channel.GetMaterialInventoryOutsAsync(skip, take);
        }
        
        public int GetMaterialInventoryOutCount() {
            return base.Channel.GetMaterialInventoryOutCount();
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialInventoryOutCountAsync() {
            return base.Channel.GetMaterialInventoryOutCountAsync();
        }
        
        public int AddMaterialInventoryOut(PMSClient.MainService.DcMaterialInventoryOut model) {
            return base.Channel.AddMaterialInventoryOut(model);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialInventoryOutAsync(PMSClient.MainService.DcMaterialInventoryOut model) {
            return base.Channel.AddMaterialInventoryOutAsync(model);
        }
        
        public int UpdateMaterialInventoryOut(PMSClient.MainService.DcMaterialInventoryOut model) {
            return base.Channel.UpdateMaterialInventoryOut(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialInventoryOutAsync(PMSClient.MainService.DcMaterialInventoryOut model) {
            return base.Channel.UpdateMaterialInventoryOutAsync(model);
        }
        
        public int DeleteMaterialInventoryOut(System.Guid id) {
            return base.Channel.DeleteMaterialInventoryOut(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMaterialInventoryOutAsync(System.Guid id) {
            return base.Channel.DeleteMaterialInventoryOutAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IMissonService")]
    public interface IMissonService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissons", ReplyAction="http://tempuri.org/IMissonService/GetMissonsResponse")]
        PMSClient.MainService.DcOrder[] GetMissons(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissons", ReplyAction="http://tempuri.org/IMissonService/GetMissonsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetMissonsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonsCount", ReplyAction="http://tempuri.org/IMissonService/GetMissonsCountResponse")]
        int GetMissonsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonsCount", ReplyAction="http://tempuri.org/IMissonService/GetMissonsCountResponse")]
        System.Threading.Tasks.Task<int> GetMissonsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonsBySearch", ReplyAction="http://tempuri.org/IMissonService/GetMissonsBySearchResponse")]
        PMSClient.MainService.DcOrder[] GetMissonsBySearch(int skip, int take, string compostion, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonsBySearch", ReplyAction="http://tempuri.org/IMissonService/GetMissonsBySearchResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetMissonsBySearchAsync(int skip, int take, string compostion, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonsCountBySearch", ReplyAction="http://tempuri.org/IMissonService/GetMissonsCountBySearchResponse")]
        int GetMissonsCountBySearch(string compostion, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonsCountBySearch", ReplyAction="http://tempuri.org/IMissonService/GetMissonsCountBySearchResponse")]
        System.Threading.Tasks.Task<int> GetMissonsCountBySearchAsync(string compostion, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMisson", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonResponse")]
        PMSClient.MainService.DcPlanWithMisson[] GetPlanWithMisson(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMisson", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanWithMissonAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCount", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCountResponse")]
        int GetPlanWithMissonCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCount", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCountResponse")]
        System.Threading.Tasks.Task<int> GetPlanWithMissonCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonChecked", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedResponse")]
        PMSClient.MainService.DcPlanWithMisson[] GetPlanWithMissonChecked(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonChecked", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanWithMissonCheckedAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCount", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCountResponse")]
        int GetPlanWithMissonCheckedCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCount", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCountResponse")]
        System.Threading.Tasks.Task<int> GetPlanWithMissonCheckedCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedByDateRange", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedByDateRangeResponse")]
        PMSClient.MainService.DcPlanWithMisson[] GetPlanWithMissonCheckedByDateRange(int skip, int take, System.DateTime dateStart, System.DateTime dateEnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedByDateRange", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedByDateRangeResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanWithMissonCheckedByDateRangeAsync(int skip, int take, System.DateTime dateStart, System.DateTime dateEnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCountByDateRange", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCountByDateRangeRespons" +
            "e")]
        int GetPlanWithMissonCheckedCountByDateRange(System.DateTime dateStart, System.DateTime dateEnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCountByDateRange", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCountByDateRangeRespons" +
            "e")]
        System.Threading.Tasks.Task<int> GetPlanWithMissonCheckedCountByDateRangeAsync(System.DateTime dateStart, System.DateTime dateEnd);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMissonServiceChannel : PMSClient.MainService.IMissonService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MissonServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IMissonService>, PMSClient.MainService.IMissonService {
        
        public MissonServiceClient() {
        }
        
        public MissonServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MissonServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MissonServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MissonServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcOrder[] GetMissons(int skip, int take) {
            return base.Channel.GetMissons(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetMissonsAsync(int skip, int take) {
            return base.Channel.GetMissonsAsync(skip, take);
        }
        
        public int GetMissonsCount() {
            return base.Channel.GetMissonsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetMissonsCountAsync() {
            return base.Channel.GetMissonsCountAsync();
        }
        
        public PMSClient.MainService.DcOrder[] GetMissonsBySearch(int skip, int take, string compostion, string pminumber) {
            return base.Channel.GetMissonsBySearch(skip, take, compostion, pminumber);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetMissonsBySearchAsync(int skip, int take, string compostion, string pminumber) {
            return base.Channel.GetMissonsBySearchAsync(skip, take, compostion, pminumber);
        }
        
        public int GetMissonsCountBySearch(string compostion, string pminumber) {
            return base.Channel.GetMissonsCountBySearch(compostion, pminumber);
        }
        
        public System.Threading.Tasks.Task<int> GetMissonsCountBySearchAsync(string compostion, string pminumber) {
            return base.Channel.GetMissonsCountBySearchAsync(compostion, pminumber);
        }
        
        public PMSClient.MainService.DcPlanWithMisson[] GetPlanWithMisson(int skip, int take) {
            return base.Channel.GetPlanWithMisson(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanWithMissonAsync(int skip, int take) {
            return base.Channel.GetPlanWithMissonAsync(skip, take);
        }
        
        public int GetPlanWithMissonCount() {
            return base.Channel.GetPlanWithMissonCount();
        }
        
        public System.Threading.Tasks.Task<int> GetPlanWithMissonCountAsync() {
            return base.Channel.GetPlanWithMissonCountAsync();
        }
        
        public PMSClient.MainService.DcPlanWithMisson[] GetPlanWithMissonChecked(int skip, int take) {
            return base.Channel.GetPlanWithMissonChecked(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanWithMissonCheckedAsync(int skip, int take) {
            return base.Channel.GetPlanWithMissonCheckedAsync(skip, take);
        }
        
        public int GetPlanWithMissonCheckedCount() {
            return base.Channel.GetPlanWithMissonCheckedCount();
        }
        
        public System.Threading.Tasks.Task<int> GetPlanWithMissonCheckedCountAsync() {
            return base.Channel.GetPlanWithMissonCheckedCountAsync();
        }
        
        public PMSClient.MainService.DcPlanWithMisson[] GetPlanWithMissonCheckedByDateRange(int skip, int take, System.DateTime dateStart, System.DateTime dateEnd) {
            return base.Channel.GetPlanWithMissonCheckedByDateRange(skip, take, dateStart, dateEnd);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanWithMissonCheckedByDateRangeAsync(int skip, int take, System.DateTime dateStart, System.DateTime dateEnd) {
            return base.Channel.GetPlanWithMissonCheckedByDateRangeAsync(skip, take, dateStart, dateEnd);
        }
        
        public int GetPlanWithMissonCheckedCountByDateRange(System.DateTime dateStart, System.DateTime dateEnd) {
            return base.Channel.GetPlanWithMissonCheckedCountByDateRange(dateStart, dateEnd);
        }
        
        public System.Threading.Tasks.Task<int> GetPlanWithMissonCheckedCountByDateRangeAsync(System.DateTime dateStart, System.DateTime dateEnd) {
            return base.Channel.GetPlanWithMissonCheckedCountByDateRangeAsync(dateStart, dateEnd);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IDeliveryService")]
    public interface IDeliveryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDelivery", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryResponse")]
        PMSClient.MainService.DcDelivery[] GetDelivery(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDelivery", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcDelivery[]> GetDeliveryAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryCount", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryCountResponse")]
        int GetDeliveryCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryCount", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryCountResponse")]
        System.Threading.Tasks.Task<int> GetDeliveryCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryBySearch", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryBySearchResponse")]
        PMSClient.MainService.DcDelivery[] GetDeliveryBySearch(int skip, int take, string deliveryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryBySearch", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryBySearchResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcDelivery[]> GetDeliveryBySearchAsync(int skip, int take, string deliveryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryCountBySearch", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryCountBySearchResponse")]
        int GetDeliveryCountBySearch(string deliveryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryCountBySearch", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryCountBySearchResponse")]
        System.Threading.Tasks.Task<int> GetDeliveryCountBySearchAsync(string deliveryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/AddDelivery", ReplyAction="http://tempuri.org/IDeliveryService/AddDeliveryResponse")]
        int AddDelivery(PMSClient.MainService.DcDelivery model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/AddDelivery", ReplyAction="http://tempuri.org/IDeliveryService/AddDeliveryResponse")]
        System.Threading.Tasks.Task<int> AddDeliveryAsync(PMSClient.MainService.DcDelivery model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/UpdateDelivery", ReplyAction="http://tempuri.org/IDeliveryService/UpdateDeliveryResponse")]
        int UpdateDelivery(PMSClient.MainService.DcDelivery model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/UpdateDelivery", ReplyAction="http://tempuri.org/IDeliveryService/UpdateDeliveryResponse")]
        System.Threading.Tasks.Task<int> UpdateDeliveryAsync(PMSClient.MainService.DcDelivery model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/DeleteDelivery", ReplyAction="http://tempuri.org/IDeliveryService/DeleteDeliveryResponse")]
        int DeleteDelivery(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/DeleteDelivery", ReplyAction="http://tempuri.org/IDeliveryService/DeleteDeliveryResponse")]
        System.Threading.Tasks.Task<int> DeleteDeliveryAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItemByDeliveryID", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemByDeliveryIDResponse")]
        PMSClient.MainService.DcDeliveryItem[] GetDeliveryItemByDeliveryID(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItemByDeliveryID", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemByDeliveryIDResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcDeliveryItem[]> GetDeliveryItemByDeliveryIDAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItems", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemsResponse")]
        PMSClient.MainService.DcDeliveryItem[] GetDeliveryItems(int skip, int take, string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItems", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcDeliveryItem[]> GetDeliveryItemsAsync(int skip, int take, string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItemsCount", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemsCountResponse")]
        int GetDeliveryItemsCount(string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItemsCount", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemsCountResponse")]
        System.Threading.Tasks.Task<int> GetDeliveryItemsCountAsync(string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/AddDeliveryItem", ReplyAction="http://tempuri.org/IDeliveryService/AddDeliveryItemResponse")]
        int AddDeliveryItem(PMSClient.MainService.DcDeliveryItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/AddDeliveryItem", ReplyAction="http://tempuri.org/IDeliveryService/AddDeliveryItemResponse")]
        System.Threading.Tasks.Task<int> AddDeliveryItemAsync(PMSClient.MainService.DcDeliveryItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/UpdateDeliveryItem", ReplyAction="http://tempuri.org/IDeliveryService/UpdateDeliveryItemResponse")]
        int UpdateDeliveryItem(PMSClient.MainService.DcDeliveryItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/UpdateDeliveryItem", ReplyAction="http://tempuri.org/IDeliveryService/UpdateDeliveryItemResponse")]
        System.Threading.Tasks.Task<int> UpdateDeliveryItemAsync(PMSClient.MainService.DcDeliveryItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/DeleteDeliveryItem", ReplyAction="http://tempuri.org/IDeliveryService/DeleteDeliveryItemResponse")]
        int DeleteDeliveryItem(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/DeleteDeliveryItem", ReplyAction="http://tempuri.org/IDeliveryService/DeleteDeliveryItemResponse")]
        System.Threading.Tasks.Task<int> DeleteDeliveryItemAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDeliveryServiceChannel : PMSClient.MainService.IDeliveryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeliveryServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IDeliveryService>, PMSClient.MainService.IDeliveryService {
        
        public DeliveryServiceClient() {
        }
        
        public DeliveryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DeliveryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeliveryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeliveryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcDelivery[] GetDelivery(int skip, int take) {
            return base.Channel.GetDelivery(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcDelivery[]> GetDeliveryAsync(int skip, int take) {
            return base.Channel.GetDeliveryAsync(skip, take);
        }
        
        public int GetDeliveryCount() {
            return base.Channel.GetDeliveryCount();
        }
        
        public System.Threading.Tasks.Task<int> GetDeliveryCountAsync() {
            return base.Channel.GetDeliveryCountAsync();
        }
        
        public PMSClient.MainService.DcDelivery[] GetDeliveryBySearch(int skip, int take, string deliveryName) {
            return base.Channel.GetDeliveryBySearch(skip, take, deliveryName);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcDelivery[]> GetDeliveryBySearchAsync(int skip, int take, string deliveryName) {
            return base.Channel.GetDeliveryBySearchAsync(skip, take, deliveryName);
        }
        
        public int GetDeliveryCountBySearch(string deliveryName) {
            return base.Channel.GetDeliveryCountBySearch(deliveryName);
        }
        
        public System.Threading.Tasks.Task<int> GetDeliveryCountBySearchAsync(string deliveryName) {
            return base.Channel.GetDeliveryCountBySearchAsync(deliveryName);
        }
        
        public int AddDelivery(PMSClient.MainService.DcDelivery model) {
            return base.Channel.AddDelivery(model);
        }
        
        public System.Threading.Tasks.Task<int> AddDeliveryAsync(PMSClient.MainService.DcDelivery model) {
            return base.Channel.AddDeliveryAsync(model);
        }
        
        public int UpdateDelivery(PMSClient.MainService.DcDelivery model) {
            return base.Channel.UpdateDelivery(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateDeliveryAsync(PMSClient.MainService.DcDelivery model) {
            return base.Channel.UpdateDeliveryAsync(model);
        }
        
        public int DeleteDelivery(System.Guid id) {
            return base.Channel.DeleteDelivery(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteDeliveryAsync(System.Guid id) {
            return base.Channel.DeleteDeliveryAsync(id);
        }
        
        public PMSClient.MainService.DcDeliveryItem[] GetDeliveryItemByDeliveryID(System.Guid id) {
            return base.Channel.GetDeliveryItemByDeliveryID(id);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcDeliveryItem[]> GetDeliveryItemByDeliveryIDAsync(System.Guid id) {
            return base.Channel.GetDeliveryItemByDeliveryIDAsync(id);
        }
        
        public PMSClient.MainService.DcDeliveryItem[] GetDeliveryItems(int skip, int take, string productid, string composition) {
            return base.Channel.GetDeliveryItems(skip, take, productid, composition);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcDeliveryItem[]> GetDeliveryItemsAsync(int skip, int take, string productid, string composition) {
            return base.Channel.GetDeliveryItemsAsync(skip, take, productid, composition);
        }
        
        public int GetDeliveryItemsCount(string productid, string composition) {
            return base.Channel.GetDeliveryItemsCount(productid, composition);
        }
        
        public System.Threading.Tasks.Task<int> GetDeliveryItemsCountAsync(string productid, string composition) {
            return base.Channel.GetDeliveryItemsCountAsync(productid, composition);
        }
        
        public int AddDeliveryItem(PMSClient.MainService.DcDeliveryItem model) {
            return base.Channel.AddDeliveryItem(model);
        }
        
        public System.Threading.Tasks.Task<int> AddDeliveryItemAsync(PMSClient.MainService.DcDeliveryItem model) {
            return base.Channel.AddDeliveryItemAsync(model);
        }
        
        public int UpdateDeliveryItem(PMSClient.MainService.DcDeliveryItem model) {
            return base.Channel.UpdateDeliveryItem(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateDeliveryItemAsync(PMSClient.MainService.DcDeliveryItem model) {
            return base.Channel.UpdateDeliveryItemAsync(model);
        }
        
        public int DeleteDeliveryItem(System.Guid id) {
            return base.Channel.DeleteDeliveryItem(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteDeliveryItemAsync(System.Guid id) {
            return base.Channel.DeleteDeliveryItemAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IRecordTestService")]
    public interface IRecordTestService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestBySearchInPage", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestBySearchInPageResponse")]
        PMSClient.MainService.DcRecordTest[] GetRecordTestBySearchInPage(int skip, int take, string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestBySearchInPage", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestBySearchInPageResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordTest[]> GetRecordTestBySearchInPageAsync(int skip, int take, string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestCountBySearchInPage", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestCountBySearchInPageResponse")]
        int GetRecordTestCountBySearchInPage(string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestCountBySearchInPage", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestCountBySearchInPageResponse")]
        System.Threading.Tasks.Task<int> GetRecordTestCountBySearchInPageAsync(string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestChecked", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestCheckedResponse")]
        PMSClient.MainService.DcRecordTest[] GetRecordTestChecked(int skip, int take, string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestChecked", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestCheckedResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordTest[]> GetRecordTestCheckedAsync(int skip, int take, string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestCountChecked", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestCountCheckedResponse")]
        int GetRecordTestCountChecked(string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestCountChecked", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestCountCheckedResponse")]
        System.Threading.Tasks.Task<int> GetRecordTestCountCheckedAsync(string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/AddRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/AddRecordTestResponse")]
        int AddRecordTest(PMSClient.MainService.DcRecordTest model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/AddRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/AddRecordTestResponse")]
        System.Threading.Tasks.Task<int> AddRecordTestAsync(PMSClient.MainService.DcRecordTest model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/UpdateRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/UpdateRecordTestResponse")]
        int UpdateRecordTest(PMSClient.MainService.DcRecordTest model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/UpdateRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/UpdateRecordTestResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordTestAsync(PMSClient.MainService.DcRecordTest model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/DeleteRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/DeleteRecordTestResponse")]
        int DeleteRecordTest(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/DeleteRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/DeleteRecordTestResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordTestAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordTestServiceChannel : PMSClient.MainService.IRecordTestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordTestServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IRecordTestService>, PMSClient.MainService.IRecordTestService {
        
        public RecordTestServiceClient() {
        }
        
        public RecordTestServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordTestServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordTestServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordTestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcRecordTest[] GetRecordTestBySearchInPage(int skip, int take, string productId, string compositionStd) {
            return base.Channel.GetRecordTestBySearchInPage(skip, take, productId, compositionStd);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordTest[]> GetRecordTestBySearchInPageAsync(int skip, int take, string productId, string compositionStd) {
            return base.Channel.GetRecordTestBySearchInPageAsync(skip, take, productId, compositionStd);
        }
        
        public int GetRecordTestCountBySearchInPage(string productId, string compositionStd) {
            return base.Channel.GetRecordTestCountBySearchInPage(productId, compositionStd);
        }
        
        public System.Threading.Tasks.Task<int> GetRecordTestCountBySearchInPageAsync(string productId, string compositionStd) {
            return base.Channel.GetRecordTestCountBySearchInPageAsync(productId, compositionStd);
        }
        
        public PMSClient.MainService.DcRecordTest[] GetRecordTestChecked(int skip, int take, string productId, string compositionStd) {
            return base.Channel.GetRecordTestChecked(skip, take, productId, compositionStd);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordTest[]> GetRecordTestCheckedAsync(int skip, int take, string productId, string compositionStd) {
            return base.Channel.GetRecordTestCheckedAsync(skip, take, productId, compositionStd);
        }
        
        public int GetRecordTestCountChecked(string productId, string compositionStd) {
            return base.Channel.GetRecordTestCountChecked(productId, compositionStd);
        }
        
        public System.Threading.Tasks.Task<int> GetRecordTestCountCheckedAsync(string productId, string compositionStd) {
            return base.Channel.GetRecordTestCountCheckedAsync(productId, compositionStd);
        }
        
        public int AddRecordTest(PMSClient.MainService.DcRecordTest model) {
            return base.Channel.AddRecordTest(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordTestAsync(PMSClient.MainService.DcRecordTest model) {
            return base.Channel.AddRecordTestAsync(model);
        }
        
        public int UpdateRecordTest(PMSClient.MainService.DcRecordTest model) {
            return base.Channel.UpdateRecordTest(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordTestAsync(PMSClient.MainService.DcRecordTest model) {
            return base.Channel.UpdateRecordTestAsync(model);
        }
        
        public int DeleteRecordTest(System.Guid id) {
            return base.Channel.DeleteRecordTest(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordTestAsync(System.Guid id) {
            return base.Channel.DeleteRecordTestAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IRecordVHPService")]
    public interface IRecordVHPService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/GetRecordVHP", ReplyAction="http://tempuri.org/IRecordVHPService/GetRecordVHPResponse")]
        PMSClient.MainService.DcRecordVHP[] GetRecordVHP(System.Guid planVHPId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/GetRecordVHP", ReplyAction="http://tempuri.org/IRecordVHPService/GetRecordVHPResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordVHP[]> GetRecordVHPAsync(System.Guid planVHPId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/GetRecordVHPCount", ReplyAction="http://tempuri.org/IRecordVHPService/GetRecordVHPCountResponse")]
        int GetRecordVHPCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/GetRecordVHPCount", ReplyAction="http://tempuri.org/IRecordVHPService/GetRecordVHPCountResponse")]
        System.Threading.Tasks.Task<int> GetRecordVHPCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/AddRecordVHP", ReplyAction="http://tempuri.org/IRecordVHPService/AddRecordVHPResponse")]
        int AddRecordVHP(PMSClient.MainService.DcRecordVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/AddRecordVHP", ReplyAction="http://tempuri.org/IRecordVHPService/AddRecordVHPResponse")]
        System.Threading.Tasks.Task<int> AddRecordVHPAsync(PMSClient.MainService.DcRecordVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/UpdateReocrdVHP", ReplyAction="http://tempuri.org/IRecordVHPService/UpdateReocrdVHPResponse")]
        int UpdateReocrdVHP(PMSClient.MainService.DcRecordVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/UpdateReocrdVHP", ReplyAction="http://tempuri.org/IRecordVHPService/UpdateReocrdVHPResponse")]
        System.Threading.Tasks.Task<int> UpdateReocrdVHPAsync(PMSClient.MainService.DcRecordVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/DeleteRecordVHP", ReplyAction="http://tempuri.org/IRecordVHPService/DeleteRecordVHPResponse")]
        int DeleteRecordVHP(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/DeleteRecordVHP", ReplyAction="http://tempuri.org/IRecordVHPService/DeleteRecordVHPResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordVHPAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordVHPServiceChannel : PMSClient.MainService.IRecordVHPService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordVHPServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IRecordVHPService>, PMSClient.MainService.IRecordVHPService {
        
        public RecordVHPServiceClient() {
        }
        
        public RecordVHPServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordVHPServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordVHPServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordVHPServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcRecordVHP[] GetRecordVHP(System.Guid planVHPId) {
            return base.Channel.GetRecordVHP(planVHPId);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordVHP[]> GetRecordVHPAsync(System.Guid planVHPId) {
            return base.Channel.GetRecordVHPAsync(planVHPId);
        }
        
        public int GetRecordVHPCount() {
            return base.Channel.GetRecordVHPCount();
        }
        
        public System.Threading.Tasks.Task<int> GetRecordVHPCountAsync() {
            return base.Channel.GetRecordVHPCountAsync();
        }
        
        public int AddRecordVHP(PMSClient.MainService.DcRecordVHP model) {
            return base.Channel.AddRecordVHP(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordVHPAsync(PMSClient.MainService.DcRecordVHP model) {
            return base.Channel.AddRecordVHPAsync(model);
        }
        
        public int UpdateReocrdVHP(PMSClient.MainService.DcRecordVHP model) {
            return base.Channel.UpdateReocrdVHP(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateReocrdVHPAsync(PMSClient.MainService.DcRecordVHP model) {
            return base.Channel.UpdateReocrdVHPAsync(model);
        }
        
        public int DeleteRecordVHP(System.Guid id) {
            return base.Channel.DeleteRecordVHP(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordVHPAsync(System.Guid id) {
            return base.Channel.DeleteRecordVHPAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IRecordMillingService")]
    public interface IRecordMillingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillings", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingsResponse")]
        PMSClient.MainService.DcRecordMilling[] GetRecordMillings(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillings", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordMilling[]> GetRecordMillingsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingCount", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingCountResponse")]
        int GetRecordMillingCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingCount", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingCountResponse")]
        System.Threading.Tasks.Task<int> GetRecordMillingCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingsByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingsByVHPPlanLotResponse")]
        PMSClient.MainService.DcRecordMilling[] GetRecordMillingsByVHPPlanLot(int skip, int take, string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingsByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingsByVHPPlanLotResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordMilling[]> GetRecordMillingsByVHPPlanLotAsync(int skip, int take, string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingCountByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingCountByVHPPlanLotRespons" +
            "e")]
        int GetRecordMillingCountByVHPPlanLot(string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingCountByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingCountByVHPPlanLotRespons" +
            "e")]
        System.Threading.Tasks.Task<int> GetRecordMillingCountByVHPPlanLotAsync(string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/AddRecordMilling", ReplyAction="http://tempuri.org/IRecordMillingService/AddRecordMillingResponse")]
        int AddRecordMilling(PMSClient.MainService.DcRecordMilling model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/AddRecordMilling", ReplyAction="http://tempuri.org/IRecordMillingService/AddRecordMillingResponse")]
        System.Threading.Tasks.Task<int> AddRecordMillingAsync(PMSClient.MainService.DcRecordMilling model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/UpdateRecordMilling", ReplyAction="http://tempuri.org/IRecordMillingService/UpdateRecordMillingResponse")]
        int UpdateRecordMilling(PMSClient.MainService.DcRecordMilling model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/UpdateRecordMilling", ReplyAction="http://tempuri.org/IRecordMillingService/UpdateRecordMillingResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordMillingAsync(PMSClient.MainService.DcRecordMilling model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/DeleteRecordMilling", ReplyAction="http://tempuri.org/IRecordMillingService/DeleteRecordMillingResponse")]
        int DeleteRecordMilling(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/DeleteRecordMilling", ReplyAction="http://tempuri.org/IRecordMillingService/DeleteRecordMillingResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordMillingAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordMillingServiceChannel : PMSClient.MainService.IRecordMillingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordMillingServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IRecordMillingService>, PMSClient.MainService.IRecordMillingService {
        
        public RecordMillingServiceClient() {
        }
        
        public RecordMillingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordMillingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordMillingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordMillingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcRecordMilling[] GetRecordMillings(int skip, int take) {
            return base.Channel.GetRecordMillings(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordMilling[]> GetRecordMillingsAsync(int skip, int take) {
            return base.Channel.GetRecordMillingsAsync(skip, take);
        }
        
        public int GetRecordMillingCount() {
            return base.Channel.GetRecordMillingCount();
        }
        
        public System.Threading.Tasks.Task<int> GetRecordMillingCountAsync() {
            return base.Channel.GetRecordMillingCountAsync();
        }
        
        public PMSClient.MainService.DcRecordMilling[] GetRecordMillingsByVHPPlanLot(int skip, int take, string vhpplanlot) {
            return base.Channel.GetRecordMillingsByVHPPlanLot(skip, take, vhpplanlot);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordMilling[]> GetRecordMillingsByVHPPlanLotAsync(int skip, int take, string vhpplanlot) {
            return base.Channel.GetRecordMillingsByVHPPlanLotAsync(skip, take, vhpplanlot);
        }
        
        public int GetRecordMillingCountByVHPPlanLot(string vhpplanlot) {
            return base.Channel.GetRecordMillingCountByVHPPlanLot(vhpplanlot);
        }
        
        public System.Threading.Tasks.Task<int> GetRecordMillingCountByVHPPlanLotAsync(string vhpplanlot) {
            return base.Channel.GetRecordMillingCountByVHPPlanLotAsync(vhpplanlot);
        }
        
        public int AddRecordMilling(PMSClient.MainService.DcRecordMilling model) {
            return base.Channel.AddRecordMilling(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordMillingAsync(PMSClient.MainService.DcRecordMilling model) {
            return base.Channel.AddRecordMillingAsync(model);
        }
        
        public int UpdateRecordMilling(PMSClient.MainService.DcRecordMilling model) {
            return base.Channel.UpdateRecordMilling(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordMillingAsync(PMSClient.MainService.DcRecordMilling model) {
            return base.Channel.UpdateRecordMillingAsync(model);
        }
        
        public int DeleteRecordMilling(System.Guid id) {
            return base.Channel.DeleteRecordMilling(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordMillingAsync(System.Guid id) {
            return base.Channel.DeleteRecordMillingAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IRecordMachineService")]
    public interface IRecordMachineService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachines", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachinesResponse")]
        PMSClient.MainService.DcRecordMachine[] GetRecordMachines(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachines", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachinesResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordMachine[]> GetRecordMachinesAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachineCount", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachineCountResponse")]
        int GetRecordMachineCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachineCount", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachineCountResponse")]
        System.Threading.Tasks.Task<int> GetRecordMachineCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachinesByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachinesByVHPPlanLotResponse")]
        PMSClient.MainService.DcRecordMachine[] GetRecordMachinesByVHPPlanLot(int skip, int take, string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachinesByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachinesByVHPPlanLotResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordMachine[]> GetRecordMachinesByVHPPlanLotAsync(int skip, int take, string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachineCountByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachineCountByVHPPlanLotRespons" +
            "e")]
        int GetRecordMachineCountByVHPPlanLot(string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachineCountByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachineCountByVHPPlanLotRespons" +
            "e")]
        System.Threading.Tasks.Task<int> GetRecordMachineCountByVHPPlanLotAsync(string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/AddRecordMachine", ReplyAction="http://tempuri.org/IRecordMachineService/AddRecordMachineResponse")]
        int AddRecordMachine(PMSClient.MainService.DcRecordMachine model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/AddRecordMachine", ReplyAction="http://tempuri.org/IRecordMachineService/AddRecordMachineResponse")]
        System.Threading.Tasks.Task<int> AddRecordMachineAsync(PMSClient.MainService.DcRecordMachine model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/UpdateRecordMachine", ReplyAction="http://tempuri.org/IRecordMachineService/UpdateRecordMachineResponse")]
        int UpdateRecordMachine(PMSClient.MainService.DcRecordMachine model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/UpdateRecordMachine", ReplyAction="http://tempuri.org/IRecordMachineService/UpdateRecordMachineResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordMachineAsync(PMSClient.MainService.DcRecordMachine model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/DeleteRecordMachine", ReplyAction="http://tempuri.org/IRecordMachineService/DeleteRecordMachineResponse")]
        int DeleteRecordMachine(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/DeleteRecordMachine", ReplyAction="http://tempuri.org/IRecordMachineService/DeleteRecordMachineResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordMachineAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordMachineServiceChannel : PMSClient.MainService.IRecordMachineService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordMachineServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IRecordMachineService>, PMSClient.MainService.IRecordMachineService {
        
        public RecordMachineServiceClient() {
        }
        
        public RecordMachineServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordMachineServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordMachineServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordMachineServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcRecordMachine[] GetRecordMachines(int skip, int take) {
            return base.Channel.GetRecordMachines(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordMachine[]> GetRecordMachinesAsync(int skip, int take) {
            return base.Channel.GetRecordMachinesAsync(skip, take);
        }
        
        public int GetRecordMachineCount() {
            return base.Channel.GetRecordMachineCount();
        }
        
        public System.Threading.Tasks.Task<int> GetRecordMachineCountAsync() {
            return base.Channel.GetRecordMachineCountAsync();
        }
        
        public PMSClient.MainService.DcRecordMachine[] GetRecordMachinesByVHPPlanLot(int skip, int take, string vhpplanlot) {
            return base.Channel.GetRecordMachinesByVHPPlanLot(skip, take, vhpplanlot);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordMachine[]> GetRecordMachinesByVHPPlanLotAsync(int skip, int take, string vhpplanlot) {
            return base.Channel.GetRecordMachinesByVHPPlanLotAsync(skip, take, vhpplanlot);
        }
        
        public int GetRecordMachineCountByVHPPlanLot(string vhpplanlot) {
            return base.Channel.GetRecordMachineCountByVHPPlanLot(vhpplanlot);
        }
        
        public System.Threading.Tasks.Task<int> GetRecordMachineCountByVHPPlanLotAsync(string vhpplanlot) {
            return base.Channel.GetRecordMachineCountByVHPPlanLotAsync(vhpplanlot);
        }
        
        public int AddRecordMachine(PMSClient.MainService.DcRecordMachine model) {
            return base.Channel.AddRecordMachine(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordMachineAsync(PMSClient.MainService.DcRecordMachine model) {
            return base.Channel.AddRecordMachineAsync(model);
        }
        
        public int UpdateRecordMachine(PMSClient.MainService.DcRecordMachine model) {
            return base.Channel.UpdateRecordMachine(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordMachineAsync(PMSClient.MainService.DcRecordMachine model) {
            return base.Channel.UpdateRecordMachineAsync(model);
        }
        
        public int DeleteRecordMachine(System.Guid id) {
            return base.Channel.DeleteRecordMachine(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordMachineAsync(System.Guid id) {
            return base.Channel.DeleteRecordMachineAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IRecordDeMoldService")]
    public interface IRecordDeMoldService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMolds", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsResponse")]
        PMSClient.MainService.DcRecordDeMold[] GetRecordDeMolds(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMolds", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordDeMold[]> GetRecordDeMoldsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCount", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCountResponse")]
        int GetRecordDeMoldsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCount", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCountResponse")]
        System.Threading.Tasks.Task<int> GetRecordDeMoldsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsByVHPPlanLotResponse")]
        PMSClient.MainService.DcRecordDeMold[] GetRecordDeMoldsByVHPPlanLot(int skip, int take, string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsByVHPPlanLotResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordDeMold[]> GetRecordDeMoldsByVHPPlanLotAsync(int skip, int take, string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCountByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCountByVHPPlanLotResponse" +
            "")]
        int GetRecordDeMoldsCountByVHPPlanLot(string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCountByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCountByVHPPlanLotResponse" +
            "")]
        System.Threading.Tasks.Task<int> GetRecordDeMoldsCountByVHPPlanLotAsync(string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/AddRecordDeMold", ReplyAction="http://tempuri.org/IRecordDeMoldService/AddRecordDeMoldResponse")]
        int AddRecordDeMold(PMSClient.MainService.DcRecordDeMold model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/AddRecordDeMold", ReplyAction="http://tempuri.org/IRecordDeMoldService/AddRecordDeMoldResponse")]
        System.Threading.Tasks.Task<int> AddRecordDeMoldAsync(PMSClient.MainService.DcRecordDeMold model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/UpdateRecordDeMold", ReplyAction="http://tempuri.org/IRecordDeMoldService/UpdateRecordDeMoldResponse")]
        int UpdateRecordDeMold(PMSClient.MainService.DcRecordDeMold model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/UpdateRecordDeMold", ReplyAction="http://tempuri.org/IRecordDeMoldService/UpdateRecordDeMoldResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordDeMoldAsync(PMSClient.MainService.DcRecordDeMold model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/DeleteRecordDeMold", ReplyAction="http://tempuri.org/IRecordDeMoldService/DeleteRecordDeMoldResponse")]
        int DeleteRecordDeMold(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/DeleteRecordDeMold", ReplyAction="http://tempuri.org/IRecordDeMoldService/DeleteRecordDeMoldResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordDeMoldAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordDeMoldServiceChannel : PMSClient.MainService.IRecordDeMoldService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordDeMoldServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IRecordDeMoldService>, PMSClient.MainService.IRecordDeMoldService {
        
        public RecordDeMoldServiceClient() {
        }
        
        public RecordDeMoldServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordDeMoldServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordDeMoldServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordDeMoldServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcRecordDeMold[] GetRecordDeMolds(int skip, int take) {
            return base.Channel.GetRecordDeMolds(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordDeMold[]> GetRecordDeMoldsAsync(int skip, int take) {
            return base.Channel.GetRecordDeMoldsAsync(skip, take);
        }
        
        public int GetRecordDeMoldsCount() {
            return base.Channel.GetRecordDeMoldsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetRecordDeMoldsCountAsync() {
            return base.Channel.GetRecordDeMoldsCountAsync();
        }
        
        public PMSClient.MainService.DcRecordDeMold[] GetRecordDeMoldsByVHPPlanLot(int skip, int take, string vhpplanlot) {
            return base.Channel.GetRecordDeMoldsByVHPPlanLot(skip, take, vhpplanlot);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordDeMold[]> GetRecordDeMoldsByVHPPlanLotAsync(int skip, int take, string vhpplanlot) {
            return base.Channel.GetRecordDeMoldsByVHPPlanLotAsync(skip, take, vhpplanlot);
        }
        
        public int GetRecordDeMoldsCountByVHPPlanLot(string vhpplanlot) {
            return base.Channel.GetRecordDeMoldsCountByVHPPlanLot(vhpplanlot);
        }
        
        public System.Threading.Tasks.Task<int> GetRecordDeMoldsCountByVHPPlanLotAsync(string vhpplanlot) {
            return base.Channel.GetRecordDeMoldsCountByVHPPlanLotAsync(vhpplanlot);
        }
        
        public int AddRecordDeMold(PMSClient.MainService.DcRecordDeMold model) {
            return base.Channel.AddRecordDeMold(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordDeMoldAsync(PMSClient.MainService.DcRecordDeMold model) {
            return base.Channel.AddRecordDeMoldAsync(model);
        }
        
        public int UpdateRecordDeMold(PMSClient.MainService.DcRecordDeMold model) {
            return base.Channel.UpdateRecordDeMold(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordDeMoldAsync(PMSClient.MainService.DcRecordDeMold model) {
            return base.Channel.UpdateRecordDeMoldAsync(model);
        }
        
        public int DeleteRecordDeMold(System.Guid id) {
            return base.Channel.DeleteRecordDeMold(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordDeMoldAsync(System.Guid id) {
            return base.Channel.DeleteRecordDeMoldAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IRecordBondingService")]
    public interface IRecordBondingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondings", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingsResponse")]
        PMSClient.MainService.DcRecordBonding[] GetRecordBondings(int skip, int take, string productid, string platelot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondings", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordBonding[]> GetRecordBondingsAsync(int skip, int take, string productid, string platelot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondingCount", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingCountResponse")]
        int GetRecordBondingCount(string productid, string platelot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondingCount", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingCountResponse")]
        System.Threading.Tasks.Task<int> GetRecordBondingCountAsync(string productid, string platelot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/AddRecordBongding", ReplyAction="http://tempuri.org/IRecordBondingService/AddRecordBongdingResponse")]
        int AddRecordBongding(PMSClient.MainService.DcRecordBonding model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/AddRecordBongding", ReplyAction="http://tempuri.org/IRecordBondingService/AddRecordBongdingResponse")]
        System.Threading.Tasks.Task<int> AddRecordBongdingAsync(PMSClient.MainService.DcRecordBonding model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/UpdateRecordBongding", ReplyAction="http://tempuri.org/IRecordBondingService/UpdateRecordBongdingResponse")]
        int UpdateRecordBongding(PMSClient.MainService.DcRecordBonding model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/UpdateRecordBongding", ReplyAction="http://tempuri.org/IRecordBondingService/UpdateRecordBongdingResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordBongdingAsync(PMSClient.MainService.DcRecordBonding model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/DeleteRecordBongding", ReplyAction="http://tempuri.org/IRecordBondingService/DeleteRecordBongdingResponse")]
        int DeleteRecordBongding(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/DeleteRecordBongding", ReplyAction="http://tempuri.org/IRecordBondingService/DeleteRecordBongdingResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordBongdingAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordBondingServiceChannel : PMSClient.MainService.IRecordBondingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordBondingServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IRecordBondingService>, PMSClient.MainService.IRecordBondingService {
        
        public RecordBondingServiceClient() {
        }
        
        public RecordBondingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordBondingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordBondingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordBondingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcRecordBonding[] GetRecordBondings(int skip, int take, string productid, string platelot) {
            return base.Channel.GetRecordBondings(skip, take, productid, platelot);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordBonding[]> GetRecordBondingsAsync(int skip, int take, string productid, string platelot) {
            return base.Channel.GetRecordBondingsAsync(skip, take, productid, platelot);
        }
        
        public int GetRecordBondingCount(string productid, string platelot) {
            return base.Channel.GetRecordBondingCount(productid, platelot);
        }
        
        public System.Threading.Tasks.Task<int> GetRecordBondingCountAsync(string productid, string platelot) {
            return base.Channel.GetRecordBondingCountAsync(productid, platelot);
        }
        
        public int AddRecordBongding(PMSClient.MainService.DcRecordBonding model) {
            return base.Channel.AddRecordBongding(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordBongdingAsync(PMSClient.MainService.DcRecordBonding model) {
            return base.Channel.AddRecordBongdingAsync(model);
        }
        
        public int UpdateRecordBongding(PMSClient.MainService.DcRecordBonding model) {
            return base.Channel.UpdateRecordBongding(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordBongdingAsync(PMSClient.MainService.DcRecordBonding model) {
            return base.Channel.UpdateRecordBongdingAsync(model);
        }
        
        public int DeleteRecordBongding(System.Guid id) {
            return base.Channel.DeleteRecordBongding(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordBongdingAsync(System.Guid id) {
            return base.Channel.DeleteRecordBongdingAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IProductService")]
    public interface IProductService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProducts", ReplyAction="http://tempuri.org/IProductService/GetProductsResponse")]
        PMSClient.MainService.DcProduct[] GetProducts(int skip, int take, string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProducts", ReplyAction="http://tempuri.org/IProductService/GetProductsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcProduct[]> GetProductsAsync(int skip, int take, string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductCount", ReplyAction="http://tempuri.org/IProductService/GetProductCountResponse")]
        int GetProductCount(string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductCount", ReplyAction="http://tempuri.org/IProductService/GetProductCountResponse")]
        System.Threading.Tasks.Task<int> GetProductCountAsync(string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/AddProduct", ReplyAction="http://tempuri.org/IProductService/AddProductResponse")]
        int AddProduct(PMSClient.MainService.DcProduct model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/AddProduct", ReplyAction="http://tempuri.org/IProductService/AddProductResponse")]
        System.Threading.Tasks.Task<int> AddProductAsync(PMSClient.MainService.DcProduct model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateProduct", ReplyAction="http://tempuri.org/IProductService/UpdateProductResponse")]
        int UpdateProduct(PMSClient.MainService.DcProduct model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateProduct", ReplyAction="http://tempuri.org/IProductService/UpdateProductResponse")]
        System.Threading.Tasks.Task<int> UpdateProductAsync(PMSClient.MainService.DcProduct model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteProduct", ReplyAction="http://tempuri.org/IProductService/DeleteProductResponse")]
        int DeleteProduct(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteProduct", ReplyAction="http://tempuri.org/IProductService/DeleteProductResponse")]
        System.Threading.Tasks.Task<int> DeleteProductAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProductServiceChannel : PMSClient.MainService.IProductService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IProductService>, PMSClient.MainService.IProductService {
        
        public ProductServiceClient() {
        }
        
        public ProductServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcProduct[] GetProducts(int skip, int take, string productid, string composition) {
            return base.Channel.GetProducts(skip, take, productid, composition);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcProduct[]> GetProductsAsync(int skip, int take, string productid, string composition) {
            return base.Channel.GetProductsAsync(skip, take, productid, composition);
        }
        
        public int GetProductCount(string productid, string composition) {
            return base.Channel.GetProductCount(productid, composition);
        }
        
        public System.Threading.Tasks.Task<int> GetProductCountAsync(string productid, string composition) {
            return base.Channel.GetProductCountAsync(productid, composition);
        }
        
        public int AddProduct(PMSClient.MainService.DcProduct model) {
            return base.Channel.AddProduct(model);
        }
        
        public System.Threading.Tasks.Task<int> AddProductAsync(PMSClient.MainService.DcProduct model) {
            return base.Channel.AddProductAsync(model);
        }
        
        public int UpdateProduct(PMSClient.MainService.DcProduct model) {
            return base.Channel.UpdateProduct(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateProductAsync(PMSClient.MainService.DcProduct model) {
            return base.Channel.UpdateProductAsync(model);
        }
        
        public int DeleteProduct(System.Guid id) {
            return base.Channel.DeleteProduct(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteProductAsync(System.Guid id) {
            return base.Channel.DeleteProductAsync(id);
        }
    }
}
