//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace PMSClient.MainService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcOrder", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcOrder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionAbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionOriginalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionStandardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DeadLineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DrawingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FinishTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MaterialIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MinimumAcceptDefectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string POField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PolicyTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ProductionIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuantityUnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ReviewTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReviewerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SampleForAnlysisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SampleNeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShipToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpecialRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateRemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WithBackingPlateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionAbbr {
            get {
                return this.CompositionAbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionAbbrField, value) != true)) {
                    this.CompositionAbbrField = value;
                    this.RaisePropertyChanged("CompositionAbbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionOriginal {
            get {
                return this.CompositionOriginalField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionOriginalField, value) != true)) {
                    this.CompositionOriginalField = value;
                    this.RaisePropertyChanged("CompositionOriginal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionStandard {
            get {
                return this.CompositionStandardField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionStandardField, value) != true)) {
                    this.CompositionStandardField = value;
                    this.RaisePropertyChanged("CompositionStandard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerName {
            get {
                return this.CustomerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerNameField, value) != true)) {
                    this.CustomerNameField = value;
                    this.RaisePropertyChanged("CustomerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DeadLine {
            get {
                return this.DeadLineField;
            }
            set {
                if ((this.DeadLineField.Equals(value) != true)) {
                    this.DeadLineField = value;
                    this.RaisePropertyChanged("DeadLine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dimension {
            get {
                return this.DimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionField, value) != true)) {
                    this.DimensionField = value;
                    this.RaisePropertyChanged("Dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DimensionDetails {
            get {
                return this.DimensionDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionDetailsField, value) != true)) {
                    this.DimensionDetailsField = value;
                    this.RaisePropertyChanged("DimensionDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Drawing {
            get {
                return this.DrawingField;
            }
            set {
                if ((object.ReferenceEquals(this.DrawingField, value) != true)) {
                    this.DrawingField = value;
                    this.RaisePropertyChanged("Drawing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FinishTime {
            get {
                return this.FinishTimeField;
            }
            set {
                if ((this.FinishTimeField.Equals(value) != true)) {
                    this.FinishTimeField = value;
                    this.RaisePropertyChanged("FinishTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaterialIndex {
            get {
                return this.MaterialIndexField;
            }
            set {
                if ((this.MaterialIndexField.Equals(value) != true)) {
                    this.MaterialIndexField = value;
                    this.RaisePropertyChanged("MaterialIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MinimumAcceptDefect {
            get {
                return this.MinimumAcceptDefectField;
            }
            set {
                if ((object.ReferenceEquals(this.MinimumAcceptDefectField, value) != true)) {
                    this.MinimumAcceptDefectField = value;
                    this.RaisePropertyChanged("MinimumAcceptDefect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PO {
            get {
                return this.POField;
            }
            set {
                if ((object.ReferenceEquals(this.POField, value) != true)) {
                    this.POField = value;
                    this.RaisePropertyChanged("PO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PolicyType {
            get {
                return this.PolicyTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PolicyTypeField, value) != true)) {
                    this.PolicyTypeField = value;
                    this.RaisePropertyChanged("PolicyType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityField, value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductType {
            get {
                return this.ProductTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductTypeField, value) != true)) {
                    this.ProductTypeField = value;
                    this.RaisePropertyChanged("ProductType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ProductionIndex {
            get {
                return this.ProductionIndexField;
            }
            set {
                if ((this.ProductionIndexField.Equals(value) != true)) {
                    this.ProductionIndexField = value;
                    this.RaisePropertyChanged("ProductionIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purity {
            get {
                return this.PurityField;
            }
            set {
                if ((object.ReferenceEquals(this.PurityField, value) != true)) {
                    this.PurityField = value;
                    this.RaisePropertyChanged("Purity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuantityUnit {
            get {
                return this.QuantityUnitField;
            }
            set {
                if ((object.ReferenceEquals(this.QuantityUnitField, value) != true)) {
                    this.QuantityUnitField = value;
                    this.RaisePropertyChanged("QuantityUnit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReviewTime {
            get {
                return this.ReviewTimeField;
            }
            set {
                if ((this.ReviewTimeField.Equals(value) != true)) {
                    this.ReviewTimeField = value;
                    this.RaisePropertyChanged("ReviewTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reviewer {
            get {
                return this.ReviewerField;
            }
            set {
                if ((object.ReferenceEquals(this.ReviewerField, value) != true)) {
                    this.ReviewerField = value;
                    this.RaisePropertyChanged("Reviewer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SampleForAnlysis {
            get {
                return this.SampleForAnlysisField;
            }
            set {
                if ((object.ReferenceEquals(this.SampleForAnlysisField, value) != true)) {
                    this.SampleForAnlysisField = value;
                    this.RaisePropertyChanged("SampleForAnlysis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SampleNeed {
            get {
                return this.SampleNeedField;
            }
            set {
                if ((object.ReferenceEquals(this.SampleNeedField, value) != true)) {
                    this.SampleNeedField = value;
                    this.RaisePropertyChanged("SampleNeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShipTo {
            get {
                return this.ShipToField;
            }
            set {
                if ((object.ReferenceEquals(this.ShipToField, value) != true)) {
                    this.ShipToField = value;
                    this.RaisePropertyChanged("ShipTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpecialRequirement {
            get {
                return this.SpecialRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialRequirementField, value) != true)) {
                    this.SpecialRequirementField = value;
                    this.RaisePropertyChanged("SpecialRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateRemark {
            get {
                return this.StateRemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.StateRemarkField, value) != true)) {
                    this.StateRemarkField = value;
                    this.RaisePropertyChanged("StateRemark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WithBackingPlate {
            get {
                return this.WithBackingPlateField;
            }
            set {
                if ((object.ReferenceEquals(this.WithBackingPlateField, value) != true)) {
                    this.WithBackingPlateField = value;
                    this.RaisePropertyChanged("WithBackingPlate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcOrderHistory", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcOrderHistory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionAbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionOriginalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionStandardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DeadLineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DrawingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FinishTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid HistoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MaterialIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MinimumAcceptDefectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime OperateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string POField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PolicyTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ProductionIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuantityUnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ReviewTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReviewerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SampleForAnlysisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SampleNeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShipToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpecialRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateRemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WithBackingPlateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionAbbr {
            get {
                return this.CompositionAbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionAbbrField, value) != true)) {
                    this.CompositionAbbrField = value;
                    this.RaisePropertyChanged("CompositionAbbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionOriginal {
            get {
                return this.CompositionOriginalField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionOriginalField, value) != true)) {
                    this.CompositionOriginalField = value;
                    this.RaisePropertyChanged("CompositionOriginal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionStandard {
            get {
                return this.CompositionStandardField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionStandardField, value) != true)) {
                    this.CompositionStandardField = value;
                    this.RaisePropertyChanged("CompositionStandard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerName {
            get {
                return this.CustomerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerNameField, value) != true)) {
                    this.CustomerNameField = value;
                    this.RaisePropertyChanged("CustomerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DeadLine {
            get {
                return this.DeadLineField;
            }
            set {
                if ((this.DeadLineField.Equals(value) != true)) {
                    this.DeadLineField = value;
                    this.RaisePropertyChanged("DeadLine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dimension {
            get {
                return this.DimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionField, value) != true)) {
                    this.DimensionField = value;
                    this.RaisePropertyChanged("Dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DimensionDetails {
            get {
                return this.DimensionDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionDetailsField, value) != true)) {
                    this.DimensionDetailsField = value;
                    this.RaisePropertyChanged("DimensionDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Drawing {
            get {
                return this.DrawingField;
            }
            set {
                if ((object.ReferenceEquals(this.DrawingField, value) != true)) {
                    this.DrawingField = value;
                    this.RaisePropertyChanged("Drawing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FinishTime {
            get {
                return this.FinishTimeField;
            }
            set {
                if ((this.FinishTimeField.Equals(value) != true)) {
                    this.FinishTimeField = value;
                    this.RaisePropertyChanged("FinishTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid HistoryID {
            get {
                return this.HistoryIDField;
            }
            set {
                if ((this.HistoryIDField.Equals(value) != true)) {
                    this.HistoryIDField = value;
                    this.RaisePropertyChanged("HistoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaterialIndex {
            get {
                return this.MaterialIndexField;
            }
            set {
                if ((this.MaterialIndexField.Equals(value) != true)) {
                    this.MaterialIndexField = value;
                    this.RaisePropertyChanged("MaterialIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MinimumAcceptDefect {
            get {
                return this.MinimumAcceptDefectField;
            }
            set {
                if ((object.ReferenceEquals(this.MinimumAcceptDefectField, value) != true)) {
                    this.MinimumAcceptDefectField = value;
                    this.RaisePropertyChanged("MinimumAcceptDefect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime OperateTime {
            get {
                return this.OperateTimeField;
            }
            set {
                if ((this.OperateTimeField.Equals(value) != true)) {
                    this.OperateTimeField = value;
                    this.RaisePropertyChanged("OperateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorField, value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PO {
            get {
                return this.POField;
            }
            set {
                if ((object.ReferenceEquals(this.POField, value) != true)) {
                    this.POField = value;
                    this.RaisePropertyChanged("PO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PolicyType {
            get {
                return this.PolicyTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PolicyTypeField, value) != true)) {
                    this.PolicyTypeField = value;
                    this.RaisePropertyChanged("PolicyType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityField, value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductType {
            get {
                return this.ProductTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductTypeField, value) != true)) {
                    this.ProductTypeField = value;
                    this.RaisePropertyChanged("ProductType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ProductionIndex {
            get {
                return this.ProductionIndexField;
            }
            set {
                if ((this.ProductionIndexField.Equals(value) != true)) {
                    this.ProductionIndexField = value;
                    this.RaisePropertyChanged("ProductionIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purity {
            get {
                return this.PurityField;
            }
            set {
                if ((object.ReferenceEquals(this.PurityField, value) != true)) {
                    this.PurityField = value;
                    this.RaisePropertyChanged("Purity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuantityUnit {
            get {
                return this.QuantityUnitField;
            }
            set {
                if ((object.ReferenceEquals(this.QuantityUnitField, value) != true)) {
                    this.QuantityUnitField = value;
                    this.RaisePropertyChanged("QuantityUnit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReviewTime {
            get {
                return this.ReviewTimeField;
            }
            set {
                if ((this.ReviewTimeField.Equals(value) != true)) {
                    this.ReviewTimeField = value;
                    this.RaisePropertyChanged("ReviewTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reviewer {
            get {
                return this.ReviewerField;
            }
            set {
                if ((object.ReferenceEquals(this.ReviewerField, value) != true)) {
                    this.ReviewerField = value;
                    this.RaisePropertyChanged("Reviewer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SampleForAnlysis {
            get {
                return this.SampleForAnlysisField;
            }
            set {
                if ((object.ReferenceEquals(this.SampleForAnlysisField, value) != true)) {
                    this.SampleForAnlysisField = value;
                    this.RaisePropertyChanged("SampleForAnlysis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SampleNeed {
            get {
                return this.SampleNeedField;
            }
            set {
                if ((object.ReferenceEquals(this.SampleNeedField, value) != true)) {
                    this.SampleNeedField = value;
                    this.RaisePropertyChanged("SampleNeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShipTo {
            get {
                return this.ShipToField;
            }
            set {
                if ((object.ReferenceEquals(this.ShipToField, value) != true)) {
                    this.ShipToField = value;
                    this.RaisePropertyChanged("ShipTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpecialRequirement {
            get {
                return this.SpecialRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialRequirementField, value) != true)) {
                    this.SpecialRequirementField = value;
                    this.RaisePropertyChanged("SpecialRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateRemark {
            get {
                return this.StateRemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.StateRemarkField, value) != true)) {
                    this.StateRemarkField = value;
                    this.RaisePropertyChanged("StateRemark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WithBackingPlate {
            get {
                return this.WithBackingPlateField;
            }
            set {
                if ((object.ReferenceEquals(this.WithBackingPlateField, value) != true)) {
                    this.WithBackingPlateField = value;
                    this.RaisePropertyChanged("WithBackingPlate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcPlanVHP", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcPlanVHP : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AllWeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CalculationDensityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConclusionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FillingRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GradeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GrainSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double KeepTempTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MillingRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MoldDiameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MoldTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid OrderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PlanDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlanLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlanTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PrePressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PreTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RoomHumidityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RoomTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SearchCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SingleWeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpecialRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ThicknessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UpdateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UpdatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPDeviceCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VaccumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AllWeight {
            get {
                return this.AllWeightField;
            }
            set {
                if ((this.AllWeightField.Equals(value) != true)) {
                    this.AllWeightField = value;
                    this.RaisePropertyChanged("AllWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CalculationDensity {
            get {
                return this.CalculationDensityField;
            }
            set {
                if ((this.CalculationDensityField.Equals(value) != true)) {
                    this.CalculationDensityField = value;
                    this.RaisePropertyChanged("CalculationDensity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Conclusion {
            get {
                return this.ConclusionField;
            }
            set {
                if ((object.ReferenceEquals(this.ConclusionField, value) != true)) {
                    this.ConclusionField = value;
                    this.RaisePropertyChanged("Conclusion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FillingRequirement {
            get {
                return this.FillingRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.FillingRequirementField, value) != true)) {
                    this.FillingRequirementField = value;
                    this.RaisePropertyChanged("FillingRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Grade {
            get {
                return this.GradeField;
            }
            set {
                if ((this.GradeField.Equals(value) != true)) {
                    this.GradeField = value;
                    this.RaisePropertyChanged("Grade");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GrainSize {
            get {
                return this.GrainSizeField;
            }
            set {
                if ((object.ReferenceEquals(this.GrainSizeField, value) != true)) {
                    this.GrainSizeField = value;
                    this.RaisePropertyChanged("GrainSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLocked {
            get {
                return this.IsLockedField;
            }
            set {
                if ((this.IsLockedField.Equals(value) != true)) {
                    this.IsLockedField = value;
                    this.RaisePropertyChanged("IsLocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double KeepTempTime {
            get {
                return this.KeepTempTimeField;
            }
            set {
                if ((this.KeepTempTimeField.Equals(value) != true)) {
                    this.KeepTempTimeField = value;
                    this.RaisePropertyChanged("KeepTempTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineRequirement {
            get {
                return this.MachineRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineRequirementField, value) != true)) {
                    this.MachineRequirementField = value;
                    this.RaisePropertyChanged("MachineRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MillingRequirement {
            get {
                return this.MillingRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.MillingRequirementField, value) != true)) {
                    this.MillingRequirementField = value;
                    this.RaisePropertyChanged("MillingRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MoldDiameter {
            get {
                return this.MoldDiameterField;
            }
            set {
                if ((this.MoldDiameterField.Equals(value) != true)) {
                    this.MoldDiameterField = value;
                    this.RaisePropertyChanged("MoldDiameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MoldType {
            get {
                return this.MoldTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MoldTypeField, value) != true)) {
                    this.MoldTypeField = value;
                    this.RaisePropertyChanged("MoldType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid OrderID {
            get {
                return this.OrderIDField;
            }
            set {
                if ((this.OrderIDField.Equals(value) != true)) {
                    this.OrderIDField = value;
                    this.RaisePropertyChanged("OrderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PlanDate {
            get {
                return this.PlanDateField;
            }
            set {
                if ((this.PlanDateField.Equals(value) != true)) {
                    this.PlanDateField = value;
                    this.RaisePropertyChanged("PlanDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlanLot {
            get {
                return this.PlanLotField;
            }
            set {
                if ((this.PlanLotField.Equals(value) != true)) {
                    this.PlanLotField = value;
                    this.RaisePropertyChanged("PlanLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlanType {
            get {
                return this.PlanTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PlanTypeField, value) != true)) {
                    this.PlanTypeField = value;
                    this.RaisePropertyChanged("PlanType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PrePressure {
            get {
                return this.PrePressureField;
            }
            set {
                if ((this.PrePressureField.Equals(value) != true)) {
                    this.PrePressureField = value;
                    this.RaisePropertyChanged("PrePressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PreTemperature {
            get {
                return this.PreTemperatureField;
            }
            set {
                if ((this.PreTemperatureField.Equals(value) != true)) {
                    this.PreTemperatureField = value;
                    this.RaisePropertyChanged("PreTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Pressure {
            get {
                return this.PressureField;
            }
            set {
                if ((this.PressureField.Equals(value) != true)) {
                    this.PressureField = value;
                    this.RaisePropertyChanged("Pressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessCode {
            get {
                return this.ProcessCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessCodeField, value) != true)) {
                    this.ProcessCodeField = value;
                    this.RaisePropertyChanged("ProcessCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RoomHumidity {
            get {
                return this.RoomHumidityField;
            }
            set {
                if ((this.RoomHumidityField.Equals(value) != true)) {
                    this.RoomHumidityField = value;
                    this.RaisePropertyChanged("RoomHumidity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RoomTemperature {
            get {
                return this.RoomTemperatureField;
            }
            set {
                if ((this.RoomTemperatureField.Equals(value) != true)) {
                    this.RoomTemperatureField = value;
                    this.RaisePropertyChanged("RoomTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SearchCode {
            get {
                return this.SearchCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchCodeField, value) != true)) {
                    this.SearchCodeField = value;
                    this.RaisePropertyChanged("SearchCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SingleWeight {
            get {
                return this.SingleWeightField;
            }
            set {
                if ((this.SingleWeightField.Equals(value) != true)) {
                    this.SingleWeightField = value;
                    this.RaisePropertyChanged("SingleWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpecialRequirement {
            get {
                return this.SpecialRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialRequirementField, value) != true)) {
                    this.SpecialRequirementField = value;
                    this.RaisePropertyChanged("SpecialRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness {
            get {
                return this.ThicknessField;
            }
            set {
                if ((this.ThicknessField.Equals(value) != true)) {
                    this.ThicknessField = value;
                    this.RaisePropertyChanged("Thickness");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UpdateTime {
            get {
                return this.UpdateTimeField;
            }
            set {
                if ((this.UpdateTimeField.Equals(value) != true)) {
                    this.UpdateTimeField = value;
                    this.RaisePropertyChanged("UpdateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Updator {
            get {
                return this.UpdatorField;
            }
            set {
                if ((object.ReferenceEquals(this.UpdatorField, value) != true)) {
                    this.UpdatorField = value;
                    this.RaisePropertyChanged("Updator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPDeviceCode {
            get {
                return this.VHPDeviceCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPDeviceCodeField, value) != true)) {
                    this.VHPDeviceCodeField = value;
                    this.RaisePropertyChanged("VHPDeviceCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPRequirement {
            get {
                return this.VHPRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPRequirementField, value) != true)) {
                    this.VHPRequirementField = value;
                    this.RaisePropertyChanged("VHPRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Vaccum {
            get {
                return this.VaccumField;
            }
            set {
                if ((this.VaccumField.Equals(value) != true)) {
                    this.VaccumField = value;
                    this.RaisePropertyChanged("Vaccum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcMaterialNeed", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcMaterialNeed : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HowManyTargetsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpecialNeedsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HowManyTargets {
            get {
                return this.HowManyTargetsField;
            }
            set {
                if ((object.ReferenceEquals(this.HowManyTargetsField, value) != true)) {
                    this.HowManyTargetsField = value;
                    this.RaisePropertyChanged("HowManyTargets");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purity {
            get {
                return this.PurityField;
            }
            set {
                if ((object.ReferenceEquals(this.PurityField, value) != true)) {
                    this.PurityField = value;
                    this.RaisePropertyChanged("Purity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpecialNeeds {
            get {
                return this.SpecialNeedsField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialNeedsField, value) != true)) {
                    this.SpecialNeedsField = value;
                    this.RaisePropertyChanged("SpecialNeeds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcMaterialOrder", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcMaterialOrder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FinishTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderPOField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ShipFeeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierAbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierReceiverField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FinishTime {
            get {
                return this.FinishTimeField;
            }
            set {
                if ((this.FinishTimeField.Equals(value) != true)) {
                    this.FinishTimeField = value;
                    this.RaisePropertyChanged("FinishTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderPO {
            get {
                return this.OrderPOField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderPOField, value) != true)) {
                    this.OrderPOField = value;
                    this.RaisePropertyChanged("OrderPO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityField, value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ShipFee {
            get {
                return this.ShipFeeField;
            }
            set {
                if ((this.ShipFeeField.Equals(value) != true)) {
                    this.ShipFeeField = value;
                    this.RaisePropertyChanged("ShipFee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Supplier {
            get {
                return this.SupplierField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierField, value) != true)) {
                    this.SupplierField = value;
                    this.RaisePropertyChanged("Supplier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierAbbr {
            get {
                return this.SupplierAbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierAbbrField, value) != true)) {
                    this.SupplierAbbrField = value;
                    this.RaisePropertyChanged("SupplierAbbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierAddress {
            get {
                return this.SupplierAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierAddressField, value) != true)) {
                    this.SupplierAddressField = value;
                    this.RaisePropertyChanged("SupplierAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierEmail {
            get {
                return this.SupplierEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierEmailField, value) != true)) {
                    this.SupplierEmailField = value;
                    this.RaisePropertyChanged("SupplierEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierReceiver {
            get {
                return this.SupplierReceiverField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierReceiverField, value) != true)) {
                    this.SupplierReceiverField = value;
                    this.RaisePropertyChanged("SupplierReceiver");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcMaterialOrderItem", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcMaterialOrderItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DeliveryDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HowManyTargetsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid MaterialOrderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MaterialPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderItemNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProvideRawMaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SJIngredientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UnitPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DeliveryDate {
            get {
                return this.DeliveryDateField;
            }
            set {
                if ((this.DeliveryDateField.Equals(value) != true)) {
                    this.DeliveryDateField = value;
                    this.RaisePropertyChanged("DeliveryDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HowManyTargets {
            get {
                return this.HowManyTargetsField;
            }
            set {
                if ((object.ReferenceEquals(this.HowManyTargetsField, value) != true)) {
                    this.HowManyTargetsField = value;
                    this.RaisePropertyChanged("HowManyTargets");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid MaterialOrderID {
            get {
                return this.MaterialOrderIDField;
            }
            set {
                if ((this.MaterialOrderIDField.Equals(value) != true)) {
                    this.MaterialOrderIDField = value;
                    this.RaisePropertyChanged("MaterialOrderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaterialPrice {
            get {
                return this.MaterialPriceField;
            }
            set {
                if ((this.MaterialPriceField.Equals(value) != true)) {
                    this.MaterialPriceField = value;
                    this.RaisePropertyChanged("MaterialPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderItemNumber {
            get {
                return this.OrderItemNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderItemNumberField, value) != true)) {
                    this.OrderItemNumberField = value;
                    this.RaisePropertyChanged("OrderItemNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityField, value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProvideRawMaterial {
            get {
                return this.ProvideRawMaterialField;
            }
            set {
                if ((object.ReferenceEquals(this.ProvideRawMaterialField, value) != true)) {
                    this.ProvideRawMaterialField = value;
                    this.RaisePropertyChanged("ProvideRawMaterial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purity {
            get {
                return this.PurityField;
            }
            set {
                if ((object.ReferenceEquals(this.PurityField, value) != true)) {
                    this.PurityField = value;
                    this.RaisePropertyChanged("Purity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SJIngredient {
            get {
                return this.SJIngredientField;
            }
            set {
                if ((object.ReferenceEquals(this.SJIngredientField, value) != true)) {
                    this.SJIngredientField = value;
                    this.RaisePropertyChanged("SJIngredient");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double UnitPrice {
            get {
                return this.UnitPriceField;
            }
            set {
                if ((this.UnitPriceField.Equals(value) != true)) {
                    this.UnitPriceField = value;
                    this.RaisePropertyChanged("UnitPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcMaterialOrderItemExtra", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcMaterialOrderItemExtra : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PMSClient.MainService.DcMaterialOrder MaterialOrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PMSClient.MainService.DcMaterialOrderItem MaterialOrderItemField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PMSClient.MainService.DcMaterialOrder MaterialOrder {
            get {
                return this.MaterialOrderField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialOrderField, value) != true)) {
                    this.MaterialOrderField = value;
                    this.RaisePropertyChanged("MaterialOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PMSClient.MainService.DcMaterialOrderItem MaterialOrderItem {
            get {
                return this.MaterialOrderItemField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialOrderItemField, value) != true)) {
                    this.MaterialOrderItemField = value;
                    this.RaisePropertyChanged("MaterialOrderItem");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcPlanHistory", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcPlanHistory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AllWeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CalculationDensityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConclusionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FillingRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GradeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GrainSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid HistoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double KeepTempTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MillingRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MoldDiameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MoldTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime OperateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid OrderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PlanDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlanLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlanTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PrePressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PreTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RoomHumidityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RoomTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SearchCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SingleWeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpecialRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ThicknessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UpdateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UpdatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPDeviceCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VaccumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AllWeight {
            get {
                return this.AllWeightField;
            }
            set {
                if ((this.AllWeightField.Equals(value) != true)) {
                    this.AllWeightField = value;
                    this.RaisePropertyChanged("AllWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CalculationDensity {
            get {
                return this.CalculationDensityField;
            }
            set {
                if ((this.CalculationDensityField.Equals(value) != true)) {
                    this.CalculationDensityField = value;
                    this.RaisePropertyChanged("CalculationDensity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Conclusion {
            get {
                return this.ConclusionField;
            }
            set {
                if ((object.ReferenceEquals(this.ConclusionField, value) != true)) {
                    this.ConclusionField = value;
                    this.RaisePropertyChanged("Conclusion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FillingRequirement {
            get {
                return this.FillingRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.FillingRequirementField, value) != true)) {
                    this.FillingRequirementField = value;
                    this.RaisePropertyChanged("FillingRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Grade {
            get {
                return this.GradeField;
            }
            set {
                if ((this.GradeField.Equals(value) != true)) {
                    this.GradeField = value;
                    this.RaisePropertyChanged("Grade");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GrainSize {
            get {
                return this.GrainSizeField;
            }
            set {
                if ((object.ReferenceEquals(this.GrainSizeField, value) != true)) {
                    this.GrainSizeField = value;
                    this.RaisePropertyChanged("GrainSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid HistoryID {
            get {
                return this.HistoryIDField;
            }
            set {
                if ((this.HistoryIDField.Equals(value) != true)) {
                    this.HistoryIDField = value;
                    this.RaisePropertyChanged("HistoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLocked {
            get {
                return this.IsLockedField;
            }
            set {
                if ((this.IsLockedField.Equals(value) != true)) {
                    this.IsLockedField = value;
                    this.RaisePropertyChanged("IsLocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double KeepTempTime {
            get {
                return this.KeepTempTimeField;
            }
            set {
                if ((this.KeepTempTimeField.Equals(value) != true)) {
                    this.KeepTempTimeField = value;
                    this.RaisePropertyChanged("KeepTempTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineRequirement {
            get {
                return this.MachineRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineRequirementField, value) != true)) {
                    this.MachineRequirementField = value;
                    this.RaisePropertyChanged("MachineRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MillingRequirement {
            get {
                return this.MillingRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.MillingRequirementField, value) != true)) {
                    this.MillingRequirementField = value;
                    this.RaisePropertyChanged("MillingRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MoldDiameter {
            get {
                return this.MoldDiameterField;
            }
            set {
                if ((this.MoldDiameterField.Equals(value) != true)) {
                    this.MoldDiameterField = value;
                    this.RaisePropertyChanged("MoldDiameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MoldType {
            get {
                return this.MoldTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MoldTypeField, value) != true)) {
                    this.MoldTypeField = value;
                    this.RaisePropertyChanged("MoldType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime OperateTime {
            get {
                return this.OperateTimeField;
            }
            set {
                if ((this.OperateTimeField.Equals(value) != true)) {
                    this.OperateTimeField = value;
                    this.RaisePropertyChanged("OperateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorField, value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid OrderID {
            get {
                return this.OrderIDField;
            }
            set {
                if ((this.OrderIDField.Equals(value) != true)) {
                    this.OrderIDField = value;
                    this.RaisePropertyChanged("OrderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PlanDate {
            get {
                return this.PlanDateField;
            }
            set {
                if ((this.PlanDateField.Equals(value) != true)) {
                    this.PlanDateField = value;
                    this.RaisePropertyChanged("PlanDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlanLot {
            get {
                return this.PlanLotField;
            }
            set {
                if ((this.PlanLotField.Equals(value) != true)) {
                    this.PlanLotField = value;
                    this.RaisePropertyChanged("PlanLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlanType {
            get {
                return this.PlanTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PlanTypeField, value) != true)) {
                    this.PlanTypeField = value;
                    this.RaisePropertyChanged("PlanType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PrePressure {
            get {
                return this.PrePressureField;
            }
            set {
                if ((this.PrePressureField.Equals(value) != true)) {
                    this.PrePressureField = value;
                    this.RaisePropertyChanged("PrePressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PreTemperature {
            get {
                return this.PreTemperatureField;
            }
            set {
                if ((this.PreTemperatureField.Equals(value) != true)) {
                    this.PreTemperatureField = value;
                    this.RaisePropertyChanged("PreTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Pressure {
            get {
                return this.PressureField;
            }
            set {
                if ((this.PressureField.Equals(value) != true)) {
                    this.PressureField = value;
                    this.RaisePropertyChanged("Pressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessCode {
            get {
                return this.ProcessCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessCodeField, value) != true)) {
                    this.ProcessCodeField = value;
                    this.RaisePropertyChanged("ProcessCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RoomHumidity {
            get {
                return this.RoomHumidityField;
            }
            set {
                if ((this.RoomHumidityField.Equals(value) != true)) {
                    this.RoomHumidityField = value;
                    this.RaisePropertyChanged("RoomHumidity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RoomTemperature {
            get {
                return this.RoomTemperatureField;
            }
            set {
                if ((this.RoomTemperatureField.Equals(value) != true)) {
                    this.RoomTemperatureField = value;
                    this.RaisePropertyChanged("RoomTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SearchCode {
            get {
                return this.SearchCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchCodeField, value) != true)) {
                    this.SearchCodeField = value;
                    this.RaisePropertyChanged("SearchCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SingleWeight {
            get {
                return this.SingleWeightField;
            }
            set {
                if ((this.SingleWeightField.Equals(value) != true)) {
                    this.SingleWeightField = value;
                    this.RaisePropertyChanged("SingleWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpecialRequirement {
            get {
                return this.SpecialRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialRequirementField, value) != true)) {
                    this.SpecialRequirementField = value;
                    this.RaisePropertyChanged("SpecialRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness {
            get {
                return this.ThicknessField;
            }
            set {
                if ((this.ThicknessField.Equals(value) != true)) {
                    this.ThicknessField = value;
                    this.RaisePropertyChanged("Thickness");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UpdateTime {
            get {
                return this.UpdateTimeField;
            }
            set {
                if ((this.UpdateTimeField.Equals(value) != true)) {
                    this.UpdateTimeField = value;
                    this.RaisePropertyChanged("UpdateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Updator {
            get {
                return this.UpdatorField;
            }
            set {
                if ((object.ReferenceEquals(this.UpdatorField, value) != true)) {
                    this.UpdatorField = value;
                    this.RaisePropertyChanged("Updator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPDeviceCode {
            get {
                return this.VHPDeviceCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPDeviceCodeField, value) != true)) {
                    this.VHPDeviceCodeField = value;
                    this.RaisePropertyChanged("VHPDeviceCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPRequirement {
            get {
                return this.VHPRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPRequirementField, value) != true)) {
                    this.VHPRequirementField = value;
                    this.RaisePropertyChanged("VHPRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Vaccum {
            get {
                return this.VaccumField;
            }
            set {
                if ((this.VaccumField.Equals(value) != true)) {
                    this.VaccumField = value;
                    this.RaisePropertyChanged("Vaccum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcMaterialInventoryIn", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcMaterialInventoryIn : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuickRemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialLot {
            get {
                return this.MaterialLotField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialLotField, value) != true)) {
                    this.MaterialLotField = value;
                    this.RaisePropertyChanged("MaterialLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialSource {
            get {
                return this.MaterialSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialSourceField, value) != true)) {
                    this.MaterialSourceField = value;
                    this.RaisePropertyChanged("MaterialSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purity {
            get {
                return this.PurityField;
            }
            set {
                if ((object.ReferenceEquals(this.PurityField, value) != true)) {
                    this.PurityField = value;
                    this.RaisePropertyChanged("Purity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuickRemark {
            get {
                return this.QuickRemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.QuickRemarkField, value) != true)) {
                    this.QuickRemarkField = value;
                    this.RaisePropertyChanged("QuickRemark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Supplier {
            get {
                return this.SupplierField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierField, value) != true)) {
                    this.SupplierField = value;
                    this.RaisePropertyChanged("Supplier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PMSReadyOutMaterialModel", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts.Model")]
    [System.SerializableAttribute()]
    public partial class PMSReadyOutMaterialModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PMSClient.MainService.DcMaterialInventoryIn MaterialInModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PMSClient.MainService.DcMaterialInventoryOut MaterialOutModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PMSClient.MainService.DcRecordMilling RecordMillingModelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PMSClient.MainService.DcMaterialInventoryIn MaterialInModel {
            get {
                return this.MaterialInModelField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialInModelField, value) != true)) {
                    this.MaterialInModelField = value;
                    this.RaisePropertyChanged("MaterialInModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PMSClient.MainService.DcMaterialInventoryOut MaterialOutModel {
            get {
                return this.MaterialOutModelField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialOutModelField, value) != true)) {
                    this.MaterialOutModelField = value;
                    this.RaisePropertyChanged("MaterialOutModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PMSClient.MainService.DcRecordMilling RecordMillingModel {
            get {
                return this.RecordMillingModelField;
            }
            set {
                if ((object.ReferenceEquals(this.RecordMillingModelField, value) != true)) {
                    this.RecordMillingModelField = value;
                    this.RaisePropertyChanged("RecordMillingModel");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcMaterialInventoryOut", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcMaterialInventoryOut : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ActualWeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiverField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ActualWeight {
            get {
                return this.ActualWeightField;
            }
            set {
                if ((this.ActualWeightField.Equals(value) != true)) {
                    this.ActualWeightField = value;
                    this.RaisePropertyChanged("ActualWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialLot {
            get {
                return this.MaterialLotField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialLotField, value) != true)) {
                    this.MaterialLotField = value;
                    this.RaisePropertyChanged("MaterialLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purity {
            get {
                return this.PurityField;
            }
            set {
                if ((object.ReferenceEquals(this.PurityField, value) != true)) {
                    this.PurityField = value;
                    this.RaisePropertyChanged("Purity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Receiver {
            get {
                return this.ReceiverField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiverField, value) != true)) {
                    this.ReceiverField = value;
                    this.RaisePropertyChanged("Receiver");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordMilling", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordMilling : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GasProtectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GrainSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MeltingPointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MillingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MillingToolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OxygenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlanBatchNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RatioField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RecycleIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RoomHumidityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RoomTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPPlanLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WaterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightOutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightRemainField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GasProtection {
            get {
                return this.GasProtectionField;
            }
            set {
                if ((object.ReferenceEquals(this.GasProtectionField, value) != true)) {
                    this.GasProtectionField = value;
                    this.RaisePropertyChanged("GasProtection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GrainSize {
            get {
                return this.GrainSizeField;
            }
            set {
                if ((object.ReferenceEquals(this.GrainSizeField, value) != true)) {
                    this.GrainSizeField = value;
                    this.RaisePropertyChanged("GrainSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialSource {
            get {
                return this.MaterialSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialSourceField, value) != true)) {
                    this.MaterialSourceField = value;
                    this.RaisePropertyChanged("MaterialSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialType {
            get {
                return this.MaterialTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialTypeField, value) != true)) {
                    this.MaterialTypeField = value;
                    this.RaisePropertyChanged("MaterialType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MeltingPoint {
            get {
                return this.MeltingPointField;
            }
            set {
                if ((object.ReferenceEquals(this.MeltingPointField, value) != true)) {
                    this.MeltingPointField = value;
                    this.RaisePropertyChanged("MeltingPoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MillingTime {
            get {
                return this.MillingTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.MillingTimeField, value) != true)) {
                    this.MillingTimeField = value;
                    this.RaisePropertyChanged("MillingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MillingTool {
            get {
                return this.MillingToolField;
            }
            set {
                if ((object.ReferenceEquals(this.MillingToolField, value) != true)) {
                    this.MillingToolField = value;
                    this.RaisePropertyChanged("MillingTool");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Oxygen {
            get {
                return this.OxygenField;
            }
            set {
                if ((object.ReferenceEquals(this.OxygenField, value) != true)) {
                    this.OxygenField = value;
                    this.RaisePropertyChanged("Oxygen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlanBatchNumber {
            get {
                return this.PlanBatchNumberField;
            }
            set {
                if ((this.PlanBatchNumberField.Equals(value) != true)) {
                    this.PlanBatchNumberField = value;
                    this.RaisePropertyChanged("PlanBatchNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Ratio {
            get {
                return this.RatioField;
            }
            set {
                if ((this.RatioField.Equals(value) != true)) {
                    this.RatioField = value;
                    this.RaisePropertyChanged("Ratio");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RecycleID {
            get {
                return this.RecycleIDField;
            }
            set {
                if ((object.ReferenceEquals(this.RecycleIDField, value) != true)) {
                    this.RecycleIDField = value;
                    this.RaisePropertyChanged("RecycleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RoomHumidity {
            get {
                return this.RoomHumidityField;
            }
            set {
                if ((this.RoomHumidityField.Equals(value) != true)) {
                    this.RoomHumidityField = value;
                    this.RaisePropertyChanged("RoomHumidity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RoomTemperature {
            get {
                return this.RoomTemperatureField;
            }
            set {
                if ((this.RoomTemperatureField.Equals(value) != true)) {
                    this.RoomTemperatureField = value;
                    this.RaisePropertyChanged("RoomTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPPlanLot {
            get {
                return this.VHPPlanLotField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPPlanLotField, value) != true)) {
                    this.VHPPlanLotField = value;
                    this.RaisePropertyChanged("VHPPlanLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Water {
            get {
                return this.WaterField;
            }
            set {
                if ((object.ReferenceEquals(this.WaterField, value) != true)) {
                    this.WaterField = value;
                    this.RaisePropertyChanged("Water");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WeightIn {
            get {
                return this.WeightInField;
            }
            set {
                if ((this.WeightInField.Equals(value) != true)) {
                    this.WeightInField = value;
                    this.RaisePropertyChanged("WeightIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WeightOut {
            get {
                return this.WeightOutField;
            }
            set {
                if ((this.WeightOutField.Equals(value) != true)) {
                    this.WeightOutField = value;
                    this.RaisePropertyChanged("WeightOut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WeightRemain {
            get {
                return this.WeightRemainField;
            }
            set {
                if ((this.WeightRemainField.Equals(value) != true)) {
                    this.WeightRemainField = value;
                    this.RaisePropertyChanged("WeightRemain");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcPlanWithMisson", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcPlanWithMisson : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PMSClient.MainService.DcOrder MissonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PMSClient.MainService.DcPlanVHP PlanField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PMSClient.MainService.DcOrder Misson {
            get {
                return this.MissonField;
            }
            set {
                if ((object.ReferenceEquals(this.MissonField, value) != true)) {
                    this.MissonField = value;
                    this.RaisePropertyChanged("Misson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PMSClient.MainService.DcPlanVHP Plan {
            get {
                return this.PlanField;
            }
            set {
                if ((object.ReferenceEquals(this.PlanField, value) != true)) {
                    this.PlanField = value;
                    this.RaisePropertyChanged("Plan");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcDelivery", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcDelivery : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeliveryExpressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeliveryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeliveryNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FinishTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InvoiceNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackageInformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackageTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ShipTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeliveryExpress {
            get {
                return this.DeliveryExpressField;
            }
            set {
                if ((object.ReferenceEquals(this.DeliveryExpressField, value) != true)) {
                    this.DeliveryExpressField = value;
                    this.RaisePropertyChanged("DeliveryExpress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeliveryName {
            get {
                return this.DeliveryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeliveryNameField, value) != true)) {
                    this.DeliveryNameField = value;
                    this.RaisePropertyChanged("DeliveryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeliveryNumber {
            get {
                return this.DeliveryNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.DeliveryNumberField, value) != true)) {
                    this.DeliveryNumberField = value;
                    this.RaisePropertyChanged("DeliveryNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FinishTime {
            get {
                return this.FinishTimeField;
            }
            set {
                if ((this.FinishTimeField.Equals(value) != true)) {
                    this.FinishTimeField = value;
                    this.RaisePropertyChanged("FinishTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InvoiceNumber {
            get {
                return this.InvoiceNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.InvoiceNumberField, value) != true)) {
                    this.InvoiceNumberField = value;
                    this.RaisePropertyChanged("InvoiceNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PackageInformation {
            get {
                return this.PackageInformationField;
            }
            set {
                if ((object.ReferenceEquals(this.PackageInformationField, value) != true)) {
                    this.PackageInformationField = value;
                    this.RaisePropertyChanged("PackageInformation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PackageType {
            get {
                return this.PackageTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PackageTypeField, value) != true)) {
                    this.PackageTypeField = value;
                    this.RaisePropertyChanged("PackageType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ShipTime {
            get {
                return this.ShipTimeField;
            }
            set {
                if ((this.ShipTimeField.Equals(value) != true)) {
                    this.ShipTimeField = value;
                    this.RaisePropertyChanged("ShipTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcDeliveryItem", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcDeliveryItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DeliveryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionActualField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string POField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PackNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Abbr {
            get {
                return this.AbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.AbbrField, value) != true)) {
                    this.AbbrField = value;
                    this.RaisePropertyChanged("Abbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Customer {
            get {
                return this.CustomerField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerField, value) != true)) {
                    this.CustomerField = value;
                    this.RaisePropertyChanged("Customer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Defects {
            get {
                return this.DefectsField;
            }
            set {
                if ((object.ReferenceEquals(this.DefectsField, value) != true)) {
                    this.DefectsField = value;
                    this.RaisePropertyChanged("Defects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DeliveryID {
            get {
                return this.DeliveryIDField;
            }
            set {
                if ((this.DeliveryIDField.Equals(value) != true)) {
                    this.DeliveryIDField = value;
                    this.RaisePropertyChanged("DeliveryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailRecord {
            get {
                return this.DetailRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailRecordField, value) != true)) {
                    this.DetailRecordField = value;
                    this.RaisePropertyChanged("DetailRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dimension {
            get {
                return this.DimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionField, value) != true)) {
                    this.DimensionField = value;
                    this.RaisePropertyChanged("Dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DimensionActual {
            get {
                return this.DimensionActualField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionActualField, value) != true)) {
                    this.DimensionActualField = value;
                    this.RaisePropertyChanged("DimensionActual");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderNumber {
            get {
                return this.OrderNumberField;
            }
            set {
                if ((this.OrderNumberField.Equals(value) != true)) {
                    this.OrderNumberField = value;
                    this.RaisePropertyChanged("OrderNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PO {
            get {
                return this.POField;
            }
            set {
                if ((object.ReferenceEquals(this.POField, value) != true)) {
                    this.POField = value;
                    this.RaisePropertyChanged("PO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PackNumber {
            get {
                return this.PackNumberField;
            }
            set {
                if ((this.PackNumberField.Equals(value) != true)) {
                    this.PackNumberField = value;
                    this.RaisePropertyChanged("PackNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Position {
            get {
                return this.PositionField;
            }
            set {
                if ((object.ReferenceEquals(this.PositionField, value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIDField, value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductType {
            get {
                return this.ProductTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductTypeField, value) != true)) {
                    this.ProductTypeField = value;
                    this.RaisePropertyChanged("ProductType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((object.ReferenceEquals(this.WeightField, value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcDeliveryItemExtra", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcDeliveryItemExtra : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PMSClient.MainService.DcDelivery DeliveryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PMSClient.MainService.DcDeliveryItem DeliveryItemField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PMSClient.MainService.DcDelivery Delivery {
            get {
                return this.DeliveryField;
            }
            set {
                if ((object.ReferenceEquals(this.DeliveryField, value) != true)) {
                    this.DeliveryField = value;
                    this.RaisePropertyChanged("Delivery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PMSClient.MainService.DcDeliveryItem DeliveryItem {
            get {
                return this.DeliveryItemField;
            }
            set {
                if ((object.ReferenceEquals(this.DeliveryItemField, value) != true)) {
                    this.DeliveryItemField = value;
                    this.RaisePropertyChanged("DeliveryItem");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcPlate", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcPlate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppearanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HardnessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastWeldMaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateMaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrintNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UseCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Appearance {
            get {
                return this.AppearanceField;
            }
            set {
                if ((object.ReferenceEquals(this.AppearanceField, value) != true)) {
                    this.AppearanceField = value;
                    this.RaisePropertyChanged("Appearance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Defects {
            get {
                return this.DefectsField;
            }
            set {
                if ((object.ReferenceEquals(this.DefectsField, value) != true)) {
                    this.DefectsField = value;
                    this.RaisePropertyChanged("Defects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dimension {
            get {
                return this.DimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionField, value) != true)) {
                    this.DimensionField = value;
                    this.RaisePropertyChanged("Dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hardness {
            get {
                return this.HardnessField;
            }
            set {
                if ((object.ReferenceEquals(this.HardnessField, value) != true)) {
                    this.HardnessField = value;
                    this.RaisePropertyChanged("Hardness");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastWeldMaterial {
            get {
                return this.LastWeldMaterialField;
            }
            set {
                if ((object.ReferenceEquals(this.LastWeldMaterialField, value) != true)) {
                    this.LastWeldMaterialField = value;
                    this.RaisePropertyChanged("LastWeldMaterial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateLot {
            get {
                return this.PlateLotField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateLotField, value) != true)) {
                    this.PlateLotField = value;
                    this.RaisePropertyChanged("PlateLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateMaterial {
            get {
                return this.PlateMaterialField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateMaterialField, value) != true)) {
                    this.PlateMaterialField = value;
                    this.RaisePropertyChanged("PlateMaterial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrintNumber {
            get {
                return this.PrintNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PrintNumberField, value) != true)) {
                    this.PrintNumberField = value;
                    this.RaisePropertyChanged("PrintNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Supplier {
            get {
                return this.SupplierField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierField, value) != true)) {
                    this.SupplierField = value;
                    this.RaisePropertyChanged("Supplier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UseCount {
            get {
                return this.UseCountField;
            }
            set {
                if ((object.ReferenceEquals(this.UseCountField, value) != true)) {
                    this.UseCountField = value;
                    this.RaisePropertyChanged("UseCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((object.ReferenceEquals(this.WeightField, value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcProduct", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcProduct : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionActualField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string POField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Abbr {
            get {
                return this.AbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.AbbrField, value) != true)) {
                    this.AbbrField = value;
                    this.RaisePropertyChanged("Abbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Customer {
            get {
                return this.CustomerField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerField, value) != true)) {
                    this.CustomerField = value;
                    this.RaisePropertyChanged("Customer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Defects {
            get {
                return this.DefectsField;
            }
            set {
                if ((object.ReferenceEquals(this.DefectsField, value) != true)) {
                    this.DefectsField = value;
                    this.RaisePropertyChanged("Defects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dimension {
            get {
                return this.DimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionField, value) != true)) {
                    this.DimensionField = value;
                    this.RaisePropertyChanged("Dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DimensionActual {
            get {
                return this.DimensionActualField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionActualField, value) != true)) {
                    this.DimensionActualField = value;
                    this.RaisePropertyChanged("DimensionActual");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PO {
            get {
                return this.POField;
            }
            set {
                if ((object.ReferenceEquals(this.POField, value) != true)) {
                    this.POField = value;
                    this.RaisePropertyChanged("PO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Position {
            get {
                return this.PositionField;
            }
            set {
                if ((object.ReferenceEquals(this.PositionField, value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIDField, value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductType {
            get {
                return this.ProductTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductTypeField, value) != true)) {
                    this.ProductTypeField = value;
                    this.RaisePropertyChanged("ProductType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((object.ReferenceEquals(this.WeightField, value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordTest", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordTest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BackingPlateLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionAbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionXRFField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DensityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionActualField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FollowUpsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime OrderDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string POField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResistanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoughnessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SampleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WarpingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BackingPlateLot {
            get {
                return this.BackingPlateLotField;
            }
            set {
                if ((object.ReferenceEquals(this.BackingPlateLotField, value) != true)) {
                    this.BackingPlateLotField = value;
                    this.RaisePropertyChanged("BackingPlateLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionAbbr {
            get {
                return this.CompositionAbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionAbbrField, value) != true)) {
                    this.CompositionAbbrField = value;
                    this.RaisePropertyChanged("CompositionAbbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionXRF {
            get {
                return this.CompositionXRFField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionXRFField, value) != true)) {
                    this.CompositionXRFField = value;
                    this.RaisePropertyChanged("CompositionXRF");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Customer {
            get {
                return this.CustomerField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerField, value) != true)) {
                    this.CustomerField = value;
                    this.RaisePropertyChanged("Customer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Defects {
            get {
                return this.DefectsField;
            }
            set {
                if ((object.ReferenceEquals(this.DefectsField, value) != true)) {
                    this.DefectsField = value;
                    this.RaisePropertyChanged("Defects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Density {
            get {
                return this.DensityField;
            }
            set {
                if ((object.ReferenceEquals(this.DensityField, value) != true)) {
                    this.DensityField = value;
                    this.RaisePropertyChanged("Density");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dimension {
            get {
                return this.DimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionField, value) != true)) {
                    this.DimensionField = value;
                    this.RaisePropertyChanged("Dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DimensionActual {
            get {
                return this.DimensionActualField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionActualField, value) != true)) {
                    this.DimensionActualField = value;
                    this.RaisePropertyChanged("DimensionActual");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FollowUps {
            get {
                return this.FollowUpsField;
            }
            set {
                if ((object.ReferenceEquals(this.FollowUpsField, value) != true)) {
                    this.FollowUpsField = value;
                    this.RaisePropertyChanged("FollowUps");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime OrderDate {
            get {
                return this.OrderDateField;
            }
            set {
                if ((this.OrderDateField.Equals(value) != true)) {
                    this.OrderDateField = value;
                    this.RaisePropertyChanged("OrderDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PO {
            get {
                return this.POField;
            }
            set {
                if ((object.ReferenceEquals(this.POField, value) != true)) {
                    this.POField = value;
                    this.RaisePropertyChanged("PO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIDField, value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QC {
            get {
                return this.QCField;
            }
            set {
                if ((object.ReferenceEquals(this.QCField, value) != true)) {
                    this.QCField = value;
                    this.RaisePropertyChanged("QC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Resistance {
            get {
                return this.ResistanceField;
            }
            set {
                if ((object.ReferenceEquals(this.ResistanceField, value) != true)) {
                    this.ResistanceField = value;
                    this.RaisePropertyChanged("Resistance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Roughness {
            get {
                return this.RoughnessField;
            }
            set {
                if ((object.ReferenceEquals(this.RoughnessField, value) != true)) {
                    this.RoughnessField = value;
                    this.RaisePropertyChanged("Roughness");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sample {
            get {
                return this.SampleField;
            }
            set {
                if ((object.ReferenceEquals(this.SampleField, value) != true)) {
                    this.SampleField = value;
                    this.RaisePropertyChanged("Sample");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestType {
            get {
                return this.TestTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TestTypeField, value) != true)) {
                    this.TestTypeField = value;
                    this.RaisePropertyChanged("TestType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Warping {
            get {
                return this.WarpingField;
            }
            set {
                if ((object.ReferenceEquals(this.WarpingField, value) != true)) {
                    this.WarpingField = value;
                    this.RaisePropertyChanged("Warping");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((object.ReferenceEquals(this.WeightField, value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordVHP", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordVHP : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CurrentTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtraInformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double OmegaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PV1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PV2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PV3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid PlanVHPIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SVField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Shift1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Shift2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VaccumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WaterTemperatureInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WaterTemperatureOutField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CurrentTime {
            get {
                return this.CurrentTimeField;
            }
            set {
                if ((this.CurrentTimeField.Equals(value) != true)) {
                    this.CurrentTimeField = value;
                    this.RaisePropertyChanged("CurrentTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExtraInformation {
            get {
                return this.ExtraInformationField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtraInformationField, value) != true)) {
                    this.ExtraInformationField = value;
                    this.RaisePropertyChanged("ExtraInformation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Omega {
            get {
                return this.OmegaField;
            }
            set {
                if ((this.OmegaField.Equals(value) != true)) {
                    this.OmegaField = value;
                    this.RaisePropertyChanged("Omega");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PV1 {
            get {
                return this.PV1Field;
            }
            set {
                if ((this.PV1Field.Equals(value) != true)) {
                    this.PV1Field = value;
                    this.RaisePropertyChanged("PV1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PV2 {
            get {
                return this.PV2Field;
            }
            set {
                if ((this.PV2Field.Equals(value) != true)) {
                    this.PV2Field = value;
                    this.RaisePropertyChanged("PV2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PV3 {
            get {
                return this.PV3Field;
            }
            set {
                if ((this.PV3Field.Equals(value) != true)) {
                    this.PV3Field = value;
                    this.RaisePropertyChanged("PV3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PlanVHPID {
            get {
                return this.PlanVHPIDField;
            }
            set {
                if ((this.PlanVHPIDField.Equals(value) != true)) {
                    this.PlanVHPIDField = value;
                    this.RaisePropertyChanged("PlanVHPID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SV {
            get {
                return this.SVField;
            }
            set {
                if ((this.SVField.Equals(value) != true)) {
                    this.SVField = value;
                    this.RaisePropertyChanged("SV");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Shift1 {
            get {
                return this.Shift1Field;
            }
            set {
                if ((this.Shift1Field.Equals(value) != true)) {
                    this.Shift1Field = value;
                    this.RaisePropertyChanged("Shift1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Shift2 {
            get {
                return this.Shift2Field;
            }
            set {
                if ((this.Shift2Field.Equals(value) != true)) {
                    this.Shift2Field = value;
                    this.RaisePropertyChanged("Shift2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Ton {
            get {
                return this.TonField;
            }
            set {
                if ((this.TonField.Equals(value) != true)) {
                    this.TonField = value;
                    this.RaisePropertyChanged("Ton");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Vaccum {
            get {
                return this.VaccumField;
            }
            set {
                if ((this.VaccumField.Equals(value) != true)) {
                    this.VaccumField = value;
                    this.RaisePropertyChanged("Vaccum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WaterTemperatureIn {
            get {
                return this.WaterTemperatureInField;
            }
            set {
                if ((this.WaterTemperatureInField.Equals(value) != true)) {
                    this.WaterTemperatureInField = value;
                    this.RaisePropertyChanged("WaterTemperatureIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WaterTemperatureOut {
            get {
                return this.WaterTemperatureOutField;
            }
            set {
                if ((this.WaterTemperatureOutField.Equals(value) != true)) {
                    this.WaterTemperatureOutField = value;
                    this.RaisePropertyChanged("WaterTemperatureOut");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordMachine", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordMachine : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BlankDimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Diameter1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Diameter2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtraRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness4Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPPlanLotField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BlankDimension {
            get {
                return this.BlankDimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.BlankDimensionField, value) != true)) {
                    this.BlankDimensionField = value;
                    this.RaisePropertyChanged("BlankDimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Defects {
            get {
                return this.DefectsField;
            }
            set {
                if ((object.ReferenceEquals(this.DefectsField, value) != true)) {
                    this.DefectsField = value;
                    this.RaisePropertyChanged("Defects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diameter1 {
            get {
                return this.Diameter1Field;
            }
            set {
                if ((this.Diameter1Field.Equals(value) != true)) {
                    this.Diameter1Field = value;
                    this.RaisePropertyChanged("Diameter1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diameter2 {
            get {
                return this.Diameter2Field;
            }
            set {
                if ((this.Diameter2Field.Equals(value) != true)) {
                    this.Diameter2Field = value;
                    this.RaisePropertyChanged("Diameter2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dimension {
            get {
                return this.DimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionField, value) != true)) {
                    this.DimensionField = value;
                    this.RaisePropertyChanged("Dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExtraRequirement {
            get {
                return this.ExtraRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtraRequirementField, value) != true)) {
                    this.ExtraRequirementField = value;
                    this.RaisePropertyChanged("ExtraRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness1 {
            get {
                return this.Thickness1Field;
            }
            set {
                if ((this.Thickness1Field.Equals(value) != true)) {
                    this.Thickness1Field = value;
                    this.RaisePropertyChanged("Thickness1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness2 {
            get {
                return this.Thickness2Field;
            }
            set {
                if ((this.Thickness2Field.Equals(value) != true)) {
                    this.Thickness2Field = value;
                    this.RaisePropertyChanged("Thickness2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness3 {
            get {
                return this.Thickness3Field;
            }
            set {
                if ((this.Thickness3Field.Equals(value) != true)) {
                    this.Thickness3Field = value;
                    this.RaisePropertyChanged("Thickness3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness4 {
            get {
                return this.Thickness4Field;
            }
            set {
                if ((this.Thickness4Field.Equals(value) != true)) {
                    this.Thickness4Field = value;
                    this.RaisePropertyChanged("Thickness4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPPlanLot {
            get {
                return this.VHPPlanLotField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPPlanLotField, value) != true)) {
                    this.VHPPlanLotField = value;
                    this.RaisePropertyChanged("VHPPlanLot");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordDeMold", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordDeMold : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CalculateDimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CalculationDensityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeMoldTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DensityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Diameter1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Diameter2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlanTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RatioDensityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Temperature1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Temperature2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness4Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPPlanLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CalculateDimension {
            get {
                return this.CalculateDimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.CalculateDimensionField, value) != true)) {
                    this.CalculateDimensionField = value;
                    this.RaisePropertyChanged("CalculateDimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CalculationDensity {
            get {
                return this.CalculationDensityField;
            }
            set {
                if ((this.CalculationDensityField.Equals(value) != true)) {
                    this.CalculationDensityField = value;
                    this.RaisePropertyChanged("CalculationDensity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeMoldType {
            get {
                return this.DeMoldTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DeMoldTypeField, value) != true)) {
                    this.DeMoldTypeField = value;
                    this.RaisePropertyChanged("DeMoldType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Density {
            get {
                return this.DensityField;
            }
            set {
                if ((this.DensityField.Equals(value) != true)) {
                    this.DensityField = value;
                    this.RaisePropertyChanged("Density");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diameter1 {
            get {
                return this.Diameter1Field;
            }
            set {
                if ((this.Diameter1Field.Equals(value) != true)) {
                    this.Diameter1Field = value;
                    this.RaisePropertyChanged("Diameter1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diameter2 {
            get {
                return this.Diameter2Field;
            }
            set {
                if ((this.Diameter2Field.Equals(value) != true)) {
                    this.Diameter2Field = value;
                    this.RaisePropertyChanged("Diameter2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dimension {
            get {
                return this.DimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionField, value) != true)) {
                    this.DimensionField = value;
                    this.RaisePropertyChanged("Dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlanType {
            get {
                return this.PlanTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PlanTypeField, value) != true)) {
                    this.PlanTypeField = value;
                    this.RaisePropertyChanged("PlanType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RatioDensity {
            get {
                return this.RatioDensityField;
            }
            set {
                if ((this.RatioDensityField.Equals(value) != true)) {
                    this.RatioDensityField = value;
                    this.RaisePropertyChanged("RatioDensity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Temperature1 {
            get {
                return this.Temperature1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Temperature1Field, value) != true)) {
                    this.Temperature1Field = value;
                    this.RaisePropertyChanged("Temperature1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Temperature2 {
            get {
                return this.Temperature2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Temperature2Field, value) != true)) {
                    this.Temperature2Field = value;
                    this.RaisePropertyChanged("Temperature2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness1 {
            get {
                return this.Thickness1Field;
            }
            set {
                if ((this.Thickness1Field.Equals(value) != true)) {
                    this.Thickness1Field = value;
                    this.RaisePropertyChanged("Thickness1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness2 {
            get {
                return this.Thickness2Field;
            }
            set {
                if ((this.Thickness2Field.Equals(value) != true)) {
                    this.Thickness2Field = value;
                    this.RaisePropertyChanged("Thickness2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness3 {
            get {
                return this.Thickness3Field;
            }
            set {
                if ((this.Thickness3Field.Equals(value) != true)) {
                    this.Thickness3Field = value;
                    this.RaisePropertyChanged("Thickness3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness4 {
            get {
                return this.Thickness4Field;
            }
            set {
                if ((this.Thickness4Field.Equals(value) != true)) {
                    this.Thickness4Field = value;
                    this.RaisePropertyChanged("Thickness4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPPlanLot {
            get {
                return this.VHPPlanLotField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPPlanLotField, value) != true)) {
                    this.VHPPlanLotField = value;
                    this.RaisePropertyChanged("VHPPlanLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordBonding", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordBonding : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApperanceCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ApperanceCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApperancePersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BindingCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BindingCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BindingPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CleanCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CleanCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CleanPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CoverPlateNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DimensionCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionWarpageCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstructionCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PackCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlanBatchNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateAppearanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateBelongField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PlateCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateDimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateHardnessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateLastWeldMaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateMaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateOtherRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlatePersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PlatePreProcessCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlatePreProcessPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlatePreProcessRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateSuplierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateUseCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SprayCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SprayCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SprayPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetAbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetAppearanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TargetCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetCompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetCustomerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetDefectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetDetailRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetDiameterCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetDimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetDimensionActualField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetPMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetPOField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TargetPreProcessCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetPreProcessPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetPreProcessRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetThicknessCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetWarpageCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetWeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime WarpageCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WarpageFixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WarpagePersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime WeldCheckTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeldCuStringDiameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeldHoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeldMaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeldPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeldingRateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApperanceCheck {
            get {
                return this.ApperanceCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.ApperanceCheckField, value) != true)) {
                    this.ApperanceCheckField = value;
                    this.RaisePropertyChanged("ApperanceCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ApperanceCheckTime {
            get {
                return this.ApperanceCheckTimeField;
            }
            set {
                if ((this.ApperanceCheckTimeField.Equals(value) != true)) {
                    this.ApperanceCheckTimeField = value;
                    this.RaisePropertyChanged("ApperanceCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApperancePerson {
            get {
                return this.ApperancePersonField;
            }
            set {
                if ((object.ReferenceEquals(this.ApperancePersonField, value) != true)) {
                    this.ApperancePersonField = value;
                    this.RaisePropertyChanged("ApperancePerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BindingCheck {
            get {
                return this.BindingCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.BindingCheckField, value) != true)) {
                    this.BindingCheckField = value;
                    this.RaisePropertyChanged("BindingCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BindingCheckTime {
            get {
                return this.BindingCheckTimeField;
            }
            set {
                if ((this.BindingCheckTimeField.Equals(value) != true)) {
                    this.BindingCheckTimeField = value;
                    this.RaisePropertyChanged("BindingCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BindingPerson {
            get {
                return this.BindingPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.BindingPersonField, value) != true)) {
                    this.BindingPersonField = value;
                    this.RaisePropertyChanged("BindingPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CleanCheck {
            get {
                return this.CleanCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.CleanCheckField, value) != true)) {
                    this.CleanCheckField = value;
                    this.RaisePropertyChanged("CleanCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CleanCheckTime {
            get {
                return this.CleanCheckTimeField;
            }
            set {
                if ((this.CleanCheckTimeField.Equals(value) != true)) {
                    this.CleanCheckTimeField = value;
                    this.RaisePropertyChanged("CleanCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CleanPerson {
            get {
                return this.CleanPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.CleanPersonField, value) != true)) {
                    this.CleanPersonField = value;
                    this.RaisePropertyChanged("CleanPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CoverPlateNumber {
            get {
                return this.CoverPlateNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.CoverPlateNumberField, value) != true)) {
                    this.CoverPlateNumberField = value;
                    this.RaisePropertyChanged("CoverPlateNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DimensionCheck {
            get {
                return this.DimensionCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionCheckField, value) != true)) {
                    this.DimensionCheckField = value;
                    this.RaisePropertyChanged("DimensionCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DimensionCheckTime {
            get {
                return this.DimensionCheckTimeField;
            }
            set {
                if ((this.DimensionCheckTimeField.Equals(value) != true)) {
                    this.DimensionCheckTimeField = value;
                    this.RaisePropertyChanged("DimensionCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DimensionPerson {
            get {
                return this.DimensionPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionPersonField, value) != true)) {
                    this.DimensionPersonField = value;
                    this.RaisePropertyChanged("DimensionPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DimensionWarpageCheck {
            get {
                return this.DimensionWarpageCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionWarpageCheckField, value) != true)) {
                    this.DimensionWarpageCheckField = value;
                    this.RaisePropertyChanged("DimensionWarpageCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstructionCode {
            get {
                return this.InstructionCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.InstructionCodeField, value) != true)) {
                    this.InstructionCodeField = value;
                    this.RaisePropertyChanged("InstructionCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PackCheck {
            get {
                return this.PackCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.PackCheckField, value) != true)) {
                    this.PackCheckField = value;
                    this.RaisePropertyChanged("PackCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PackCheckTime {
            get {
                return this.PackCheckTimeField;
            }
            set {
                if ((this.PackCheckTimeField.Equals(value) != true)) {
                    this.PackCheckTimeField = value;
                    this.RaisePropertyChanged("PackCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PackPerson {
            get {
                return this.PackPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PackPersonField, value) != true)) {
                    this.PackPersonField = value;
                    this.RaisePropertyChanged("PackPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlanBatchNumber {
            get {
                return this.PlanBatchNumberField;
            }
            set {
                if ((this.PlanBatchNumberField.Equals(value) != true)) {
                    this.PlanBatchNumberField = value;
                    this.RaisePropertyChanged("PlanBatchNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateAppearance {
            get {
                return this.PlateAppearanceField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateAppearanceField, value) != true)) {
                    this.PlateAppearanceField = value;
                    this.RaisePropertyChanged("PlateAppearance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateBelong {
            get {
                return this.PlateBelongField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateBelongField, value) != true)) {
                    this.PlateBelongField = value;
                    this.RaisePropertyChanged("PlateBelong");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PlateCheckTime {
            get {
                return this.PlateCheckTimeField;
            }
            set {
                if ((this.PlateCheckTimeField.Equals(value) != true)) {
                    this.PlateCheckTimeField = value;
                    this.RaisePropertyChanged("PlateCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateDimension {
            get {
                return this.PlateDimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateDimensionField, value) != true)) {
                    this.PlateDimensionField = value;
                    this.RaisePropertyChanged("PlateDimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateHardness {
            get {
                return this.PlateHardnessField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateHardnessField, value) != true)) {
                    this.PlateHardnessField = value;
                    this.RaisePropertyChanged("PlateHardness");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateLastWeldMaterial {
            get {
                return this.PlateLastWeldMaterialField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateLastWeldMaterialField, value) != true)) {
                    this.PlateLastWeldMaterialField = value;
                    this.RaisePropertyChanged("PlateLastWeldMaterial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateLot {
            get {
                return this.PlateLotField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateLotField, value) != true)) {
                    this.PlateLotField = value;
                    this.RaisePropertyChanged("PlateLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateMaterial {
            get {
                return this.PlateMaterialField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateMaterialField, value) != true)) {
                    this.PlateMaterialField = value;
                    this.RaisePropertyChanged("PlateMaterial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateOtherRecord {
            get {
                return this.PlateOtherRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateOtherRecordField, value) != true)) {
                    this.PlateOtherRecordField = value;
                    this.RaisePropertyChanged("PlateOtherRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlatePerson {
            get {
                return this.PlatePersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PlatePersonField, value) != true)) {
                    this.PlatePersonField = value;
                    this.RaisePropertyChanged("PlatePerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PlatePreProcessCheckTime {
            get {
                return this.PlatePreProcessCheckTimeField;
            }
            set {
                if ((this.PlatePreProcessCheckTimeField.Equals(value) != true)) {
                    this.PlatePreProcessCheckTimeField = value;
                    this.RaisePropertyChanged("PlatePreProcessCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlatePreProcessPerson {
            get {
                return this.PlatePreProcessPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PlatePreProcessPersonField, value) != true)) {
                    this.PlatePreProcessPersonField = value;
                    this.RaisePropertyChanged("PlatePreProcessPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlatePreProcessRecord {
            get {
                return this.PlatePreProcessRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.PlatePreProcessRecordField, value) != true)) {
                    this.PlatePreProcessRecordField = value;
                    this.RaisePropertyChanged("PlatePreProcessRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateSuplier {
            get {
                return this.PlateSuplierField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateSuplierField, value) != true)) {
                    this.PlateSuplierField = value;
                    this.RaisePropertyChanged("PlateSuplier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateType {
            get {
                return this.PlateTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateTypeField, value) != true)) {
                    this.PlateTypeField = value;
                    this.RaisePropertyChanged("PlateType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateUseCount {
            get {
                return this.PlateUseCountField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateUseCountField, value) != true)) {
                    this.PlateUseCountField = value;
                    this.RaisePropertyChanged("PlateUseCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SprayCheck {
            get {
                return this.SprayCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.SprayCheckField, value) != true)) {
                    this.SprayCheckField = value;
                    this.RaisePropertyChanged("SprayCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SprayCheckTime {
            get {
                return this.SprayCheckTimeField;
            }
            set {
                if ((this.SprayCheckTimeField.Equals(value) != true)) {
                    this.SprayCheckTimeField = value;
                    this.RaisePropertyChanged("SprayCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SprayPerson {
            get {
                return this.SprayPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.SprayPersonField, value) != true)) {
                    this.SprayPersonField = value;
                    this.RaisePropertyChanged("SprayPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetAbbr {
            get {
                return this.TargetAbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetAbbrField, value) != true)) {
                    this.TargetAbbrField = value;
                    this.RaisePropertyChanged("TargetAbbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetAppearance {
            get {
                return this.TargetAppearanceField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetAppearanceField, value) != true)) {
                    this.TargetAppearanceField = value;
                    this.RaisePropertyChanged("TargetAppearance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TargetCheckTime {
            get {
                return this.TargetCheckTimeField;
            }
            set {
                if ((this.TargetCheckTimeField.Equals(value) != true)) {
                    this.TargetCheckTimeField = value;
                    this.RaisePropertyChanged("TargetCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetComposition {
            get {
                return this.TargetCompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetCompositionField, value) != true)) {
                    this.TargetCompositionField = value;
                    this.RaisePropertyChanged("TargetComposition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetCustomer {
            get {
                return this.TargetCustomerField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetCustomerField, value) != true)) {
                    this.TargetCustomerField = value;
                    this.RaisePropertyChanged("TargetCustomer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDefects {
            get {
                return this.TargetDefectsField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetDefectsField, value) != true)) {
                    this.TargetDefectsField = value;
                    this.RaisePropertyChanged("TargetDefects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDetailRecord {
            get {
                return this.TargetDetailRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetDetailRecordField, value) != true)) {
                    this.TargetDetailRecordField = value;
                    this.RaisePropertyChanged("TargetDetailRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDiameterCheck {
            get {
                return this.TargetDiameterCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetDiameterCheckField, value) != true)) {
                    this.TargetDiameterCheckField = value;
                    this.RaisePropertyChanged("TargetDiameterCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDimension {
            get {
                return this.TargetDimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetDimensionField, value) != true)) {
                    this.TargetDimensionField = value;
                    this.RaisePropertyChanged("TargetDimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDimensionActual {
            get {
                return this.TargetDimensionActualField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetDimensionActualField, value) != true)) {
                    this.TargetDimensionActualField = value;
                    this.RaisePropertyChanged("TargetDimensionActual");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetPMINumber {
            get {
                return this.TargetPMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetPMINumberField, value) != true)) {
                    this.TargetPMINumberField = value;
                    this.RaisePropertyChanged("TargetPMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetPO {
            get {
                return this.TargetPOField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetPOField, value) != true)) {
                    this.TargetPOField = value;
                    this.RaisePropertyChanged("TargetPO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetPerson {
            get {
                return this.TargetPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetPersonField, value) != true)) {
                    this.TargetPersonField = value;
                    this.RaisePropertyChanged("TargetPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TargetPreProcessCheckTime {
            get {
                return this.TargetPreProcessCheckTimeField;
            }
            set {
                if ((this.TargetPreProcessCheckTimeField.Equals(value) != true)) {
                    this.TargetPreProcessCheckTimeField = value;
                    this.RaisePropertyChanged("TargetPreProcessCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetPreProcessPerson {
            get {
                return this.TargetPreProcessPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetPreProcessPersonField, value) != true)) {
                    this.TargetPreProcessPersonField = value;
                    this.RaisePropertyChanged("TargetPreProcessPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetPreProcessRecord {
            get {
                return this.TargetPreProcessRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetPreProcessRecordField, value) != true)) {
                    this.TargetPreProcessRecordField = value;
                    this.RaisePropertyChanged("TargetPreProcessRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetProductID {
            get {
                return this.TargetProductIDField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetProductIDField, value) != true)) {
                    this.TargetProductIDField = value;
                    this.RaisePropertyChanged("TargetProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetThicknessCheck {
            get {
                return this.TargetThicknessCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetThicknessCheckField, value) != true)) {
                    this.TargetThicknessCheckField = value;
                    this.RaisePropertyChanged("TargetThicknessCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetWarpageCheck {
            get {
                return this.TargetWarpageCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetWarpageCheckField, value) != true)) {
                    this.TargetWarpageCheckField = value;
                    this.RaisePropertyChanged("TargetWarpageCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetWeight {
            get {
                return this.TargetWeightField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetWeightField, value) != true)) {
                    this.TargetWeightField = value;
                    this.RaisePropertyChanged("TargetWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime WarpageCheckTime {
            get {
                return this.WarpageCheckTimeField;
            }
            set {
                if ((this.WarpageCheckTimeField.Equals(value) != true)) {
                    this.WarpageCheckTimeField = value;
                    this.RaisePropertyChanged("WarpageCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WarpageFix {
            get {
                return this.WarpageFixField;
            }
            set {
                if ((object.ReferenceEquals(this.WarpageFixField, value) != true)) {
                    this.WarpageFixField = value;
                    this.RaisePropertyChanged("WarpageFix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WarpagePerson {
            get {
                return this.WarpagePersonField;
            }
            set {
                if ((object.ReferenceEquals(this.WarpagePersonField, value) != true)) {
                    this.WarpagePersonField = value;
                    this.RaisePropertyChanged("WarpagePerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime WeldCheckTime {
            get {
                return this.WeldCheckTimeField;
            }
            set {
                if ((this.WeldCheckTimeField.Equals(value) != true)) {
                    this.WeldCheckTimeField = value;
                    this.RaisePropertyChanged("WeldCheckTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WeldCuStringDiameter {
            get {
                return this.WeldCuStringDiameterField;
            }
            set {
                if ((object.ReferenceEquals(this.WeldCuStringDiameterField, value) != true)) {
                    this.WeldCuStringDiameterField = value;
                    this.RaisePropertyChanged("WeldCuStringDiameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WeldHold {
            get {
                return this.WeldHoldField;
            }
            set {
                if ((object.ReferenceEquals(this.WeldHoldField, value) != true)) {
                    this.WeldHoldField = value;
                    this.RaisePropertyChanged("WeldHold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WeldMaterial {
            get {
                return this.WeldMaterialField;
            }
            set {
                if ((object.ReferenceEquals(this.WeldMaterialField, value) != true)) {
                    this.WeldMaterialField = value;
                    this.RaisePropertyChanged("WeldMaterial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WeldPerson {
            get {
                return this.WeldPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.WeldPersonField, value) != true)) {
                    this.WeldPersonField = value;
                    this.RaisePropertyChanged("WeldPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WeldingRate {
            get {
                return this.WeldingRateField;
            }
            set {
                if ((this.WeldingRateField.Equals(value) != true)) {
                    this.WeldingRateField = value;
                    this.RaisePropertyChanged("WeldingRate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcOutSource", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcOutSource : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FinishTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaidStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuantityUnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Cost {
            get {
                return this.CostField;
            }
            set {
                if ((this.CostField.Equals(value) != true)) {
                    this.CostField = value;
                    this.RaisePropertyChanged("Cost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dimension {
            get {
                return this.DimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionField, value) != true)) {
                    this.DimensionField = value;
                    this.RaisePropertyChanged("Dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FinishTime {
            get {
                return this.FinishTimeField;
            }
            set {
                if ((this.FinishTimeField.Equals(value) != true)) {
                    this.FinishTimeField = value;
                    this.RaisePropertyChanged("FinishTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderLot {
            get {
                return this.OrderLotField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderLotField, value) != true)) {
                    this.OrderLotField = value;
                    this.RaisePropertyChanged("OrderLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderName {
            get {
                return this.OrderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderNameField, value) != true)) {
                    this.OrderNameField = value;
                    this.RaisePropertyChanged("OrderName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderType {
            get {
                return this.OrderTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderTypeField, value) != true)) {
                    this.OrderTypeField = value;
                    this.RaisePropertyChanged("OrderType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaidState {
            get {
                return this.PaidStateField;
            }
            set {
                if ((object.ReferenceEquals(this.PaidStateField, value) != true)) {
                    this.PaidStateField = value;
                    this.RaisePropertyChanged("PaidState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuantityUnit {
            get {
                return this.QuantityUnitField;
            }
            set {
                if ((object.ReferenceEquals(this.QuantityUnitField, value) != true)) {
                    this.QuantityUnitField = value;
                    this.RaisePropertyChanged("QuantityUnit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Supplier {
            get {
                return this.SupplierField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierField, value) != true)) {
                    this.SupplierField = value;
                    this.RaisePropertyChanged("Supplier");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IOrderService")]
    public interface IOrderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetAllOrderInPage", ReplyAction="http://tempuri.org/IOrderService/GetAllOrderInPageResponse")]
        PMSClient.MainService.DcOrder[] GetAllOrderInPage(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetAllOrderInPage", ReplyAction="http://tempuri.org/IOrderService/GetAllOrderInPageResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetAllOrderInPageAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderBySearchInPage", ReplyAction="http://tempuri.org/IOrderService/GetOrderBySearchInPageResponse")]
        PMSClient.MainService.DcOrder[] GetOrderBySearchInPage(int skip, int take, string customer, string compositionstd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderBySearchInPage", ReplyAction="http://tempuri.org/IOrderService/GetOrderBySearchInPageResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetOrderBySearchInPageAsync(int skip, int take, string customer, string compositionstd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderCountBySearch", ReplyAction="http://tempuri.org/IOrderService/GetOrderCountBySearchResponse")]
        int GetOrderCountBySearch(string customer, string compositionstd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderCountBySearch", ReplyAction="http://tempuri.org/IOrderService/GetOrderCountBySearchResponse")]
        System.Threading.Tasks.Task<int> GetOrderCountBySearchAsync(string customer, string compositionstd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderUnCompleted", ReplyAction="http://tempuri.org/IOrderService/GetOrderUnCompletedResponse")]
        PMSClient.MainService.DcOrder[] GetOrderUnCompleted(int skip, int take, string customer, string compositionstd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderUnCompleted", ReplyAction="http://tempuri.org/IOrderService/GetOrderUnCompletedResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetOrderUnCompletedAsync(int skip, int take, string customer, string compositionstd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderCountUnCompleted", ReplyAction="http://tempuri.org/IOrderService/GetOrderCountUnCompletedResponse")]
        int GetOrderCountUnCompleted(string customer, string compositionstd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderCountUnCompleted", ReplyAction="http://tempuri.org/IOrderService/GetOrderCountUnCompletedResponse")]
        System.Threading.Tasks.Task<int> GetOrderCountUnCompletedAsync(string customer, string compositionstd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrders", ReplyAction="http://tempuri.org/IOrderService/GetOrdersResponse")]
        PMSClient.MainService.DcOrder[] GetOrders(int skip, int take, string customer, string compositionstd, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrders", ReplyAction="http://tempuri.org/IOrderService/GetOrdersResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetOrdersAsync(int skip, int take, string customer, string compositionstd, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderCount", ReplyAction="http://tempuri.org/IOrderService/GetOrderCountResponse")]
        int GetOrderCount(string customer, string compositionstd, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderCount", ReplyAction="http://tempuri.org/IOrderService/GetOrderCountResponse")]
        System.Threading.Tasks.Task<int> GetOrderCountAsync(string customer, string compositionstd, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderUnCompleted2", ReplyAction="http://tempuri.org/IOrderService/GetOrderUnCompleted2Response")]
        PMSClient.MainService.DcOrder[] GetOrderUnCompleted2(int skip, int take, string customer, string compositionstd, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderUnCompleted2", ReplyAction="http://tempuri.org/IOrderService/GetOrderUnCompleted2Response")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetOrderUnCompleted2Async(int skip, int take, string customer, string compositionstd, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderCountUnCompleted2", ReplyAction="http://tempuri.org/IOrderService/GetOrderCountUnCompleted2Response")]
        int GetOrderCountUnCompleted2(string customer, string compositionstd, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderCountUnCompleted2", ReplyAction="http://tempuri.org/IOrderService/GetOrderCountUnCompleted2Response")]
        System.Threading.Tasks.Task<int> GetOrderCountUnCompleted2Async(string customer, string compositionstd, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderByYear", ReplyAction="http://tempuri.org/IOrderService/GetOrderByYearResponse")]
        PMSClient.MainService.DcOrder[] GetOrderByYear(int skip, int take, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderByYear", ReplyAction="http://tempuri.org/IOrderService/GetOrderByYearResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetOrderByYearAsync(int skip, int take, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderCountByYear", ReplyAction="http://tempuri.org/IOrderService/GetOrderCountByYearResponse")]
        int GetOrderCountByYear(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderCountByYear", ReplyAction="http://tempuri.org/IOrderService/GetOrderCountByYearResponse")]
        System.Threading.Tasks.Task<int> GetOrderCountByYearAsync(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddOrder", ReplyAction="http://tempuri.org/IOrderService/AddOrderResponse")]
        int AddOrder(PMSClient.MainService.DcOrder order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddOrder", ReplyAction="http://tempuri.org/IOrderService/AddOrderResponse")]
        System.Threading.Tasks.Task<int> AddOrderAsync(PMSClient.MainService.DcOrder order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddOrderByUID", ReplyAction="http://tempuri.org/IOrderService/AddOrderByUIDResponse")]
        int AddOrderByUID(PMSClient.MainService.DcOrder order, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddOrderByUID", ReplyAction="http://tempuri.org/IOrderService/AddOrderByUIDResponse")]
        System.Threading.Tasks.Task<int> AddOrderByUIDAsync(PMSClient.MainService.DcOrder order, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/UpdateOrder", ReplyAction="http://tempuri.org/IOrderService/UpdateOrderResponse")]
        int UpdateOrder(PMSClient.MainService.DcOrder order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/UpdateOrder", ReplyAction="http://tempuri.org/IOrderService/UpdateOrderResponse")]
        System.Threading.Tasks.Task<int> UpdateOrderAsync(PMSClient.MainService.DcOrder order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/UpdateOrderByUID", ReplyAction="http://tempuri.org/IOrderService/UpdateOrderByUIDResponse")]
        int UpdateOrderByUID(PMSClient.MainService.DcOrder order, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/UpdateOrderByUID", ReplyAction="http://tempuri.org/IOrderService/UpdateOrderByUIDResponse")]
        System.Threading.Tasks.Task<int> UpdateOrderByUIDAsync(PMSClient.MainService.DcOrder order, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteOrder", ReplyAction="http://tempuri.org/IOrderService/DeleteOrderResponse")]
        int DeleteOrder(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteOrder", ReplyAction="http://tempuri.org/IOrderService/DeleteOrderResponse")]
        System.Threading.Tasks.Task<int> DeleteOrderAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/CheckPMINumberExisit", ReplyAction="http://tempuri.org/IOrderService/CheckPMINumberExisitResponse")]
        bool CheckPMINumberExisit(string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/CheckPMINumberExisit", ReplyAction="http://tempuri.org/IOrderService/CheckPMINumberExisitResponse")]
        System.Threading.Tasks.Task<bool> CheckPMINumberExisitAsync(string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderHistoryTop10", ReplyAction="http://tempuri.org/IOrderService/GetOrderHistoryTop10Response")]
        PMSClient.MainService.DcOrderHistory[] GetOrderHistoryTop10(string pmiNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderHistoryTop10", ReplyAction="http://tempuri.org/IOrderService/GetOrderHistoryTop10Response")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcOrderHistory[]> GetOrderHistoryTop10Async(string pmiNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderStatus", ReplyAction="http://tempuri.org/IOrderService/GetOrderStatusResponse")]
        string GetOrderStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderStatus", ReplyAction="http://tempuri.org/IOrderService/GetOrderStatusResponse")]
        System.Threading.Tasks.Task<string> GetOrderStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderUnFinishedCount", ReplyAction="http://tempuri.org/IOrderService/GetOrderUnFinishedCountResponse")]
        int GetOrderUnFinishedCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderUnFinishedCount", ReplyAction="http://tempuri.org/IOrderService/GetOrderUnFinishedCountResponse")]
        System.Threading.Tasks.Task<int> GetOrderUnFinishedCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetUnFinishedTargetCount", ReplyAction="http://tempuri.org/IOrderService/GetUnFinishedTargetCountResponse")]
        double GetUnFinishedTargetCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetUnFinishedTargetCount", ReplyAction="http://tempuri.org/IOrderService/GetUnFinishedTargetCountResponse")]
        System.Threading.Tasks.Task<double> GetUnFinishedTargetCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderByPMINumber", ReplyAction="http://tempuri.org/IOrderService/GetOrderByPMINumberResponse")]
        PMSClient.MainService.DcOrder GetOrderByPMINumber(string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderByPMINumber", ReplyAction="http://tempuri.org/IOrderService/GetOrderByPMINumberResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcOrder> GetOrderByPMINumberAsync(string pminumber);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrderServiceChannel : PMSClient.MainService.IOrderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrderServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IOrderService>, PMSClient.MainService.IOrderService {
        
        public OrderServiceClient() {
        }
        
        public OrderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcOrder[] GetAllOrderInPage(int skip, int take) {
            return base.Channel.GetAllOrderInPage(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetAllOrderInPageAsync(int skip, int take) {
            return base.Channel.GetAllOrderInPageAsync(skip, take);
        }
        
        public PMSClient.MainService.DcOrder[] GetOrderBySearchInPage(int skip, int take, string customer, string compositionstd) {
            return base.Channel.GetOrderBySearchInPage(skip, take, customer, compositionstd);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetOrderBySearchInPageAsync(int skip, int take, string customer, string compositionstd) {
            return base.Channel.GetOrderBySearchInPageAsync(skip, take, customer, compositionstd);
        }
        
        public int GetOrderCountBySearch(string customer, string compositionstd) {
            return base.Channel.GetOrderCountBySearch(customer, compositionstd);
        }
        
        public System.Threading.Tasks.Task<int> GetOrderCountBySearchAsync(string customer, string compositionstd) {
            return base.Channel.GetOrderCountBySearchAsync(customer, compositionstd);
        }
        
        public PMSClient.MainService.DcOrder[] GetOrderUnCompleted(int skip, int take, string customer, string compositionstd) {
            return base.Channel.GetOrderUnCompleted(skip, take, customer, compositionstd);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetOrderUnCompletedAsync(int skip, int take, string customer, string compositionstd) {
            return base.Channel.GetOrderUnCompletedAsync(skip, take, customer, compositionstd);
        }
        
        public int GetOrderCountUnCompleted(string customer, string compositionstd) {
            return base.Channel.GetOrderCountUnCompleted(customer, compositionstd);
        }
        
        public System.Threading.Tasks.Task<int> GetOrderCountUnCompletedAsync(string customer, string compositionstd) {
            return base.Channel.GetOrderCountUnCompletedAsync(customer, compositionstd);
        }
        
        public PMSClient.MainService.DcOrder[] GetOrders(int skip, int take, string customer, string compositionstd, string pminumber) {
            return base.Channel.GetOrders(skip, take, customer, compositionstd, pminumber);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetOrdersAsync(int skip, int take, string customer, string compositionstd, string pminumber) {
            return base.Channel.GetOrdersAsync(skip, take, customer, compositionstd, pminumber);
        }
        
        public int GetOrderCount(string customer, string compositionstd, string pminumber) {
            return base.Channel.GetOrderCount(customer, compositionstd, pminumber);
        }
        
        public System.Threading.Tasks.Task<int> GetOrderCountAsync(string customer, string compositionstd, string pminumber) {
            return base.Channel.GetOrderCountAsync(customer, compositionstd, pminumber);
        }
        
        public PMSClient.MainService.DcOrder[] GetOrderUnCompleted2(int skip, int take, string customer, string compositionstd, string pminumber) {
            return base.Channel.GetOrderUnCompleted2(skip, take, customer, compositionstd, pminumber);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetOrderUnCompleted2Async(int skip, int take, string customer, string compositionstd, string pminumber) {
            return base.Channel.GetOrderUnCompleted2Async(skip, take, customer, compositionstd, pminumber);
        }
        
        public int GetOrderCountUnCompleted2(string customer, string compositionstd, string pminumber) {
            return base.Channel.GetOrderCountUnCompleted2(customer, compositionstd, pminumber);
        }
        
        public System.Threading.Tasks.Task<int> GetOrderCountUnCompleted2Async(string customer, string compositionstd, string pminumber) {
            return base.Channel.GetOrderCountUnCompleted2Async(customer, compositionstd, pminumber);
        }
        
        public PMSClient.MainService.DcOrder[] GetOrderByYear(int skip, int take, int year) {
            return base.Channel.GetOrderByYear(skip, take, year);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetOrderByYearAsync(int skip, int take, int year) {
            return base.Channel.GetOrderByYearAsync(skip, take, year);
        }
        
        public int GetOrderCountByYear(int year) {
            return base.Channel.GetOrderCountByYear(year);
        }
        
        public System.Threading.Tasks.Task<int> GetOrderCountByYearAsync(int year) {
            return base.Channel.GetOrderCountByYearAsync(year);
        }
        
        public int AddOrder(PMSClient.MainService.DcOrder order) {
            return base.Channel.AddOrder(order);
        }
        
        public System.Threading.Tasks.Task<int> AddOrderAsync(PMSClient.MainService.DcOrder order) {
            return base.Channel.AddOrderAsync(order);
        }
        
        public int AddOrderByUID(PMSClient.MainService.DcOrder order, string uid) {
            return base.Channel.AddOrderByUID(order, uid);
        }
        
        public System.Threading.Tasks.Task<int> AddOrderByUIDAsync(PMSClient.MainService.DcOrder order, string uid) {
            return base.Channel.AddOrderByUIDAsync(order, uid);
        }
        
        public int UpdateOrder(PMSClient.MainService.DcOrder order) {
            return base.Channel.UpdateOrder(order);
        }
        
        public System.Threading.Tasks.Task<int> UpdateOrderAsync(PMSClient.MainService.DcOrder order) {
            return base.Channel.UpdateOrderAsync(order);
        }
        
        public int UpdateOrderByUID(PMSClient.MainService.DcOrder order, string uid) {
            return base.Channel.UpdateOrderByUID(order, uid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateOrderByUIDAsync(PMSClient.MainService.DcOrder order, string uid) {
            return base.Channel.UpdateOrderByUIDAsync(order, uid);
        }
        
        public int DeleteOrder(System.Guid id) {
            return base.Channel.DeleteOrder(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteOrderAsync(System.Guid id) {
            return base.Channel.DeleteOrderAsync(id);
        }
        
        public bool CheckPMINumberExisit(string pminumber) {
            return base.Channel.CheckPMINumberExisit(pminumber);
        }
        
        public System.Threading.Tasks.Task<bool> CheckPMINumberExisitAsync(string pminumber) {
            return base.Channel.CheckPMINumberExisitAsync(pminumber);
        }
        
        public PMSClient.MainService.DcOrderHistory[] GetOrderHistoryTop10(string pmiNumber) {
            return base.Channel.GetOrderHistoryTop10(pmiNumber);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcOrderHistory[]> GetOrderHistoryTop10Async(string pmiNumber) {
            return base.Channel.GetOrderHistoryTop10Async(pmiNumber);
        }
        
        public string GetOrderStatus() {
            return base.Channel.GetOrderStatus();
        }
        
        public System.Threading.Tasks.Task<string> GetOrderStatusAsync() {
            return base.Channel.GetOrderStatusAsync();
        }
        
        public int GetOrderUnFinishedCount() {
            return base.Channel.GetOrderUnFinishedCount();
        }
        
        public System.Threading.Tasks.Task<int> GetOrderUnFinishedCountAsync() {
            return base.Channel.GetOrderUnFinishedCountAsync();
        }
        
        public double GetUnFinishedTargetCount() {
            return base.Channel.GetUnFinishedTargetCount();
        }
        
        public System.Threading.Tasks.Task<double> GetUnFinishedTargetCountAsync() {
            return base.Channel.GetUnFinishedTargetCountAsync();
        }
        
        public PMSClient.MainService.DcOrder GetOrderByPMINumber(string pminumber) {
            return base.Channel.GetOrderByPMINumber(pminumber);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcOrder> GetOrderByPMINumberAsync(string pminumber) {
            return base.Channel.GetOrderByPMINumberAsync(pminumber);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IPlanVHPService")]
    public interface IPlanVHPService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/GetVHPPlansByOrderID", ReplyAction="http://tempuri.org/IPlanVHPService/GetVHPPlansByOrderIDResponse")]
        PMSClient.MainService.DcPlanVHP[] GetVHPPlansByOrderID(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/GetVHPPlansByOrderID", ReplyAction="http://tempuri.org/IPlanVHPService/GetVHPPlansByOrderIDResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcPlanVHP[]> GetVHPPlansByOrderIDAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/AddVHPPlan", ReplyAction="http://tempuri.org/IPlanVHPService/AddVHPPlanResponse")]
        int AddVHPPlan(PMSClient.MainService.DcPlanVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/AddVHPPlan", ReplyAction="http://tempuri.org/IPlanVHPService/AddVHPPlanResponse")]
        System.Threading.Tasks.Task<int> AddVHPPlanAsync(PMSClient.MainService.DcPlanVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/AddVHPPlanByUID", ReplyAction="http://tempuri.org/IPlanVHPService/AddVHPPlanByUIDResponse")]
        int AddVHPPlanByUID(PMSClient.MainService.DcPlanVHP model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/AddVHPPlanByUID", ReplyAction="http://tempuri.org/IPlanVHPService/AddVHPPlanByUIDResponse")]
        System.Threading.Tasks.Task<int> AddVHPPlanByUIDAsync(PMSClient.MainService.DcPlanVHP model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/UpdateVHPPlan", ReplyAction="http://tempuri.org/IPlanVHPService/UpdateVHPPlanResponse")]
        int UpdateVHPPlan(PMSClient.MainService.DcPlanVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/UpdateVHPPlan", ReplyAction="http://tempuri.org/IPlanVHPService/UpdateVHPPlanResponse")]
        System.Threading.Tasks.Task<int> UpdateVHPPlanAsync(PMSClient.MainService.DcPlanVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/UpdateVHPPlanByUID", ReplyAction="http://tempuri.org/IPlanVHPService/UpdateVHPPlanByUIDResponse")]
        int UpdateVHPPlanByUID(PMSClient.MainService.DcPlanVHP model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/UpdateVHPPlanByUID", ReplyAction="http://tempuri.org/IPlanVHPService/UpdateVHPPlanByUIDResponse")]
        System.Threading.Tasks.Task<int> UpdateVHPPlanByUIDAsync(PMSClient.MainService.DcPlanVHP model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/DeleteVHPPlan", ReplyAction="http://tempuri.org/IPlanVHPService/DeleteVHPPlanResponse")]
        int DeleteVHPPlan(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/DeleteVHPPlan", ReplyAction="http://tempuri.org/IPlanVHPService/DeleteVHPPlanResponse")]
        System.Threading.Tasks.Task<int> DeleteVHPPlanAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/GetPlanCount", ReplyAction="http://tempuri.org/IPlanVHPService/GetPlanCountResponse")]
        int GetPlanCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/GetPlanCount", ReplyAction="http://tempuri.org/IPlanVHPService/GetPlanCountResponse")]
        System.Threading.Tasks.Task<int> GetPlanCountAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlanVHPServiceChannel : PMSClient.MainService.IPlanVHPService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlanVHPServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IPlanVHPService>, PMSClient.MainService.IPlanVHPService {
        
        public PlanVHPServiceClient() {
        }
        
        public PlanVHPServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlanVHPServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlanVHPServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlanVHPServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcPlanVHP[] GetVHPPlansByOrderID(System.Guid id) {
            return base.Channel.GetVHPPlansByOrderID(id);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcPlanVHP[]> GetVHPPlansByOrderIDAsync(System.Guid id) {
            return base.Channel.GetVHPPlansByOrderIDAsync(id);
        }
        
        public int AddVHPPlan(PMSClient.MainService.DcPlanVHP model) {
            return base.Channel.AddVHPPlan(model);
        }
        
        public System.Threading.Tasks.Task<int> AddVHPPlanAsync(PMSClient.MainService.DcPlanVHP model) {
            return base.Channel.AddVHPPlanAsync(model);
        }
        
        public int AddVHPPlanByUID(PMSClient.MainService.DcPlanVHP model, string uid) {
            return base.Channel.AddVHPPlanByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> AddVHPPlanByUIDAsync(PMSClient.MainService.DcPlanVHP model, string uid) {
            return base.Channel.AddVHPPlanByUIDAsync(model, uid);
        }
        
        public int UpdateVHPPlan(PMSClient.MainService.DcPlanVHP model) {
            return base.Channel.UpdateVHPPlan(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateVHPPlanAsync(PMSClient.MainService.DcPlanVHP model) {
            return base.Channel.UpdateVHPPlanAsync(model);
        }
        
        public int UpdateVHPPlanByUID(PMSClient.MainService.DcPlanVHP model, string uid) {
            return base.Channel.UpdateVHPPlanByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateVHPPlanByUIDAsync(PMSClient.MainService.DcPlanVHP model, string uid) {
            return base.Channel.UpdateVHPPlanByUIDAsync(model, uid);
        }
        
        public int DeleteVHPPlan(System.Guid id) {
            return base.Channel.DeleteVHPPlan(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteVHPPlanAsync(System.Guid id) {
            return base.Channel.DeleteVHPPlanAsync(id);
        }
        
        public int GetPlanCount() {
            return base.Channel.GetPlanCount();
        }
        
        public System.Threading.Tasks.Task<int> GetPlanCountAsync() {
            return base.Channel.GetPlanCountAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IMaterialNeedService")]
    public interface IMaterialNeedService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/GetMaterialNeedBySearchInPage", ReplyAction="http://tempuri.org/IMaterialNeedService/GetMaterialNeedBySearchInPageResponse")]
        PMSClient.MainService.DcMaterialNeed[] GetMaterialNeedBySearchInPage(int skip, int take, string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/GetMaterialNeedBySearchInPage", ReplyAction="http://tempuri.org/IMaterialNeedService/GetMaterialNeedBySearchInPageResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialNeed[]> GetMaterialNeedBySearchInPageAsync(int skip, int take, string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/GetMaterialNeedCountBySearch", ReplyAction="http://tempuri.org/IMaterialNeedService/GetMaterialNeedCountBySearchResponse")]
        int GetMaterialNeedCountBySearch(string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/GetMaterialNeedCountBySearch", ReplyAction="http://tempuri.org/IMaterialNeedService/GetMaterialNeedCountBySearchResponse")]
        System.Threading.Tasks.Task<int> GetMaterialNeedCountBySearchAsync(string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/AddMaterialNeed", ReplyAction="http://tempuri.org/IMaterialNeedService/AddMaterialNeedResponse")]
        int AddMaterialNeed(PMSClient.MainService.DcMaterialNeed model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/AddMaterialNeed", ReplyAction="http://tempuri.org/IMaterialNeedService/AddMaterialNeedResponse")]
        System.Threading.Tasks.Task<int> AddMaterialNeedAsync(PMSClient.MainService.DcMaterialNeed model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/UpdateMaterialNeed", ReplyAction="http://tempuri.org/IMaterialNeedService/UpdateMaterialNeedResponse")]
        int UpdateMaterialNeed(PMSClient.MainService.DcMaterialNeed model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/UpdateMaterialNeed", ReplyAction="http://tempuri.org/IMaterialNeedService/UpdateMaterialNeedResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialNeedAsync(PMSClient.MainService.DcMaterialNeed model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/AddMaterialNeedByUID", ReplyAction="http://tempuri.org/IMaterialNeedService/AddMaterialNeedByUIDResponse")]
        int AddMaterialNeedByUID(PMSClient.MainService.DcMaterialNeed model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/AddMaterialNeedByUID", ReplyAction="http://tempuri.org/IMaterialNeedService/AddMaterialNeedByUIDResponse")]
        System.Threading.Tasks.Task<int> AddMaterialNeedByUIDAsync(PMSClient.MainService.DcMaterialNeed model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/UpdateMaterialNeedByUID", ReplyAction="http://tempuri.org/IMaterialNeedService/UpdateMaterialNeedByUIDResponse")]
        int UpdateMaterialNeedByUID(PMSClient.MainService.DcMaterialNeed model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/UpdateMaterialNeedByUID", ReplyAction="http://tempuri.org/IMaterialNeedService/UpdateMaterialNeedByUIDResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialNeedByUIDAsync(PMSClient.MainService.DcMaterialNeed model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/DeleteMaterialNeed", ReplyAction="http://tempuri.org/IMaterialNeedService/DeleteMaterialNeedResponse")]
        int DeleteMaterialNeed(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/DeleteMaterialNeed", ReplyAction="http://tempuri.org/IMaterialNeedService/DeleteMaterialNeedResponse")]
        System.Threading.Tasks.Task<int> DeleteMaterialNeedAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMaterialNeedServiceChannel : PMSClient.MainService.IMaterialNeedService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MaterialNeedServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IMaterialNeedService>, PMSClient.MainService.IMaterialNeedService {
        
        public MaterialNeedServiceClient() {
        }
        
        public MaterialNeedServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MaterialNeedServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialNeedServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialNeedServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcMaterialNeed[] GetMaterialNeedBySearchInPage(int skip, int take, string composition, string pminumber) {
            return base.Channel.GetMaterialNeedBySearchInPage(skip, take, composition, pminumber);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialNeed[]> GetMaterialNeedBySearchInPageAsync(int skip, int take, string composition, string pminumber) {
            return base.Channel.GetMaterialNeedBySearchInPageAsync(skip, take, composition, pminumber);
        }
        
        public int GetMaterialNeedCountBySearch(string composition, string pminumber) {
            return base.Channel.GetMaterialNeedCountBySearch(composition, pminumber);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialNeedCountBySearchAsync(string composition, string pminumber) {
            return base.Channel.GetMaterialNeedCountBySearchAsync(composition, pminumber);
        }
        
        public int AddMaterialNeed(PMSClient.MainService.DcMaterialNeed model) {
            return base.Channel.AddMaterialNeed(model);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialNeedAsync(PMSClient.MainService.DcMaterialNeed model) {
            return base.Channel.AddMaterialNeedAsync(model);
        }
        
        public int UpdateMaterialNeed(PMSClient.MainService.DcMaterialNeed model) {
            return base.Channel.UpdateMaterialNeed(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialNeedAsync(PMSClient.MainService.DcMaterialNeed model) {
            return base.Channel.UpdateMaterialNeedAsync(model);
        }
        
        public int AddMaterialNeedByUID(PMSClient.MainService.DcMaterialNeed model, string uid) {
            return base.Channel.AddMaterialNeedByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialNeedByUIDAsync(PMSClient.MainService.DcMaterialNeed model, string uid) {
            return base.Channel.AddMaterialNeedByUIDAsync(model, uid);
        }
        
        public int UpdateMaterialNeedByUID(PMSClient.MainService.DcMaterialNeed model, string uid) {
            return base.Channel.UpdateMaterialNeedByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialNeedByUIDAsync(PMSClient.MainService.DcMaterialNeed model, string uid) {
            return base.Channel.UpdateMaterialNeedByUIDAsync(model, uid);
        }
        
        public int DeleteMaterialNeed(System.Guid id) {
            return base.Channel.DeleteMaterialNeed(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMaterialNeedAsync(System.Guid id) {
            return base.Channel.DeleteMaterialNeedAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IMaterialOrderService")]
    public interface IMaterialOrderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderBySearchInPage", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderBySearchInPageResponse")]
        PMSClient.MainService.DcMaterialOrder[] GetMaterialOrderBySearchInPage(int skip, int take, string orderPo, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderBySearchInPage", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderBySearchInPageResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrder[]> GetMaterialOrderBySearchInPageAsync(int skip, int take, string orderPo, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderBySearch", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderBySearchResponse")]
        PMSClient.MainService.DcMaterialOrder[] GetMaterialOrderBySearch(int skip, int take, string orderPo, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderBySearch", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderBySearchResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrder[]> GetMaterialOrderBySearchAsync(int skip, int take, string orderPo, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountBySearch", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountBySearchResponse")]
        int GetMaterialOrderCountBySearch(string orderPo, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountBySearch", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountBySearchResponse")]
        System.Threading.Tasks.Task<int> GetMaterialOrderCountBySearchAsync(string orderPo, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderForSanjie", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderForSanjieResponse")]
        PMSClient.MainService.DcMaterialOrder[] GetMaterialOrderForSanjie(int skip, int take, string orderPo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderForSanjie", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderForSanjieResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrder[]> GetMaterialOrderForSanjieAsync(int skip, int take, string orderPo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountForSanjie", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountForSanjieResponse")]
        int GetMaterialOrderCountForSanjie(string orderPo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountForSanjie", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountForSanjieResponse")]
        System.Threading.Tasks.Task<int> GetMaterialOrderCountForSanjieAsync(string orderPo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/AddMaterialOrder", ReplyAction="http://tempuri.org/IMaterialOrderService/AddMaterialOrderResponse")]
        int AddMaterialOrder(PMSClient.MainService.DcMaterialOrder model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/AddMaterialOrder", ReplyAction="http://tempuri.org/IMaterialOrderService/AddMaterialOrderResponse")]
        System.Threading.Tasks.Task<int> AddMaterialOrderAsync(PMSClient.MainService.DcMaterialOrder model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrder", ReplyAction="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderResponse")]
        int UpdateMaterialOrder(PMSClient.MainService.DcMaterialOrder model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrder", ReplyAction="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialOrderAsync(PMSClient.MainService.DcMaterialOrder model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/AddMaterialOrderByUID", ReplyAction="http://tempuri.org/IMaterialOrderService/AddMaterialOrderByUIDResponse")]
        int AddMaterialOrderByUID(PMSClient.MainService.DcMaterialOrder model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/AddMaterialOrderByUID", ReplyAction="http://tempuri.org/IMaterialOrderService/AddMaterialOrderByUIDResponse")]
        System.Threading.Tasks.Task<int> AddMaterialOrderByUIDAsync(PMSClient.MainService.DcMaterialOrder model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderByUID", ReplyAction="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderByUIDResponse")]
        int UpdateMaterialOrderByUID(PMSClient.MainService.DcMaterialOrder model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderByUID", ReplyAction="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderByUIDResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialOrderByUIDAsync(PMSClient.MainService.DcMaterialOrder model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrder", ReplyAction="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrderResponse")]
        int DeleteMaterialOrder(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrder", ReplyAction="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrderResponse")]
        System.Threading.Tasks.Task<int> DeleteMaterialOrderAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItembyMaterialID", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItembyMaterialIDResponse" +
            "")]
        PMSClient.MainService.DcMaterialOrderItem[] GetMaterialOrderItembyMaterialID(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItembyMaterialID", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItembyMaterialIDResponse" +
            "")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrderItem[]> GetMaterialOrderItembyMaterialIDAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemCountByMaterialID", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemCountByMaterialIDRes" +
            "ponse")]
        int GetMaterialOrderItemCountByMaterialID(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemCountByMaterialID", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemCountByMaterialIDRes" +
            "ponse")]
        System.Threading.Tasks.Task<int> GetMaterialOrderItemCountByMaterialIDAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/AddMaterialOrderItem", ReplyAction="http://tempuri.org/IMaterialOrderService/AddMaterialOrderItemResponse")]
        int AddMaterialOrderItem(PMSClient.MainService.DcMaterialOrderItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/AddMaterialOrderItem", ReplyAction="http://tempuri.org/IMaterialOrderService/AddMaterialOrderItemResponse")]
        System.Threading.Tasks.Task<int> AddMaterialOrderItemAsync(PMSClient.MainService.DcMaterialOrderItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderItem", ReplyAction="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderItemResponse")]
        int UpdateMaterialOrderItem(PMSClient.MainService.DcMaterialOrderItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderItem", ReplyAction="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderItemResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialOrderItemAsync(PMSClient.MainService.DcMaterialOrderItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/AddMaterialOrderItemByUID", ReplyAction="http://tempuri.org/IMaterialOrderService/AddMaterialOrderItemByUIDResponse")]
        int AddMaterialOrderItemByUID(PMSClient.MainService.DcMaterialOrderItem model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/AddMaterialOrderItemByUID", ReplyAction="http://tempuri.org/IMaterialOrderService/AddMaterialOrderItemByUIDResponse")]
        System.Threading.Tasks.Task<int> AddMaterialOrderItemByUIDAsync(PMSClient.MainService.DcMaterialOrderItem model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderItemByUID", ReplyAction="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderItemByUIDResponse")]
        int UpdateMaterialOrderItemByUID(PMSClient.MainService.DcMaterialOrderItem model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderItemByUID", ReplyAction="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderItemByUIDResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialOrderItemByUIDAsync(PMSClient.MainService.DcMaterialOrderItem model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrderItem", ReplyAction="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrderItemResponse")]
        int DeleteMaterialOrderItem(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrderItem", ReplyAction="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrderItemResponse")]
        System.Threading.Tasks.Task<int> DeleteMaterialOrderItemAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItems", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemsResponse")]
        PMSClient.MainService.DcMaterialOrderItem[] GetMaterialOrderItems(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItems", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrderItem[]> GetMaterialOrderItemsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemsCount", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemsCountResponse")]
        int GetMaterialOrderItemsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemsCount", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemsCountResponse")]
        System.Threading.Tasks.Task<int> GetMaterialOrderItemsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtras", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtrasResponse")]
        PMSClient.MainService.DcMaterialOrderItemExtra[] GetMaterialOrderItemExtras(int skip, int take, string composition, string pminumber, string orderitemnumber, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtras", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtrasResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrderItemExtra[]> GetMaterialOrderItemExtrasAsync(int skip, int take, string composition, string pminumber, string orderitemnumber, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtrasCount", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtrasCountResponse")]
        int GetMaterialOrderItemExtrasCount(string composition, string pminumber, string orderitemnumber, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtrasCount", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtrasCountResponse")]
        System.Threading.Tasks.Task<int> GetMaterialOrderItemExtrasCountAsync(string composition, string pminumber, string orderitemnumber, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtrasUnCompleted", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtrasUnCompletedRes" +
            "ponse")]
        PMSClient.MainService.DcMaterialOrderItemExtra[] GetMaterialOrderItemExtrasUnCompleted(int skip, int take, string composition, string pminumber, string orderitemnumber, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtrasUnCompleted", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtrasUnCompletedRes" +
            "ponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrderItemExtra[]> GetMaterialOrderItemExtrasUnCompletedAsync(int skip, int take, string composition, string pminumber, string orderitemnumber, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtrasCountUnComplet" +
            "ed", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtrasCountUnComplet" +
            "edResponse")]
        int GetMaterialOrderItemExtrasCountUnCompleted(string composition, string pminumber, string orderitemnumber, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtrasCountUnComplet" +
            "ed", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtrasCountUnComplet" +
            "edResponse")]
        System.Threading.Tasks.Task<int> GetMaterialOrderItemExtrasCountUnCompletedAsync(string composition, string pminumber, string orderitemnumber, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtraByYear", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtraByYearResponse")]
        PMSClient.MainService.DcMaterialOrderItemExtra[] GetMaterialOrderItemExtraByYear(int skip, int take, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtraByYear", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtraByYearResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrderItemExtra[]> GetMaterialOrderItemExtraByYearAsync(int skip, int take, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtraCountByYear", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtraCountByYearResp" +
            "onse")]
        int GetMaterialOrderItemExtraCountByYear(string composition, string pminumber, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtraCountByYear", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemExtraCountByYearResp" +
            "onse")]
        System.Threading.Tasks.Task<int> GetMaterialOrderItemExtraCountByYearAsync(string composition, string pminumber, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/CheckOrderItemNumberExist", ReplyAction="http://tempuri.org/IMaterialOrderService/CheckOrderItemNumberExistResponse")]
        bool CheckOrderItemNumberExist(string orderItemnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/CheckOrderItemNumberExist", ReplyAction="http://tempuri.org/IMaterialOrderService/CheckOrderItemNumberExistResponse")]
        System.Threading.Tasks.Task<bool> CheckOrderItemNumberExistAsync(string orderItemnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetPlanHistoryTop10", ReplyAction="http://tempuri.org/IMaterialOrderService/GetPlanHistoryTop10Response")]
        PMSClient.MainService.DcPlanHistory[] GetPlanHistoryTop10(string searchCode, string deviceCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetPlanHistoryTop10", ReplyAction="http://tempuri.org/IMaterialOrderService/GetPlanHistoryTop10Response")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcPlanHistory[]> GetPlanHistoryTop10Async(string searchCode, string deviceCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/CheckMaterialOrderUnChecked", ReplyAction="http://tempuri.org/IMaterialOrderService/CheckMaterialOrderUnCheckedResponse")]
        bool CheckMaterialOrderUnChecked();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/CheckMaterialOrderUnChecked", ReplyAction="http://tempuri.org/IMaterialOrderService/CheckMaterialOrderUnCheckedResponse")]
        System.Threading.Tasks.Task<bool> CheckMaterialOrderUnCheckedAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMaterialOrderServiceChannel : PMSClient.MainService.IMaterialOrderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MaterialOrderServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IMaterialOrderService>, PMSClient.MainService.IMaterialOrderService {
        
        public MaterialOrderServiceClient() {
        }
        
        public MaterialOrderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MaterialOrderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialOrderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialOrderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcMaterialOrder[] GetMaterialOrderBySearchInPage(int skip, int take, string orderPo, string supplier) {
            return base.Channel.GetMaterialOrderBySearchInPage(skip, take, orderPo, supplier);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrder[]> GetMaterialOrderBySearchInPageAsync(int skip, int take, string orderPo, string supplier) {
            return base.Channel.GetMaterialOrderBySearchInPageAsync(skip, take, orderPo, supplier);
        }
        
        public PMSClient.MainService.DcMaterialOrder[] GetMaterialOrderBySearch(int skip, int take, string orderPo, string supplier) {
            return base.Channel.GetMaterialOrderBySearch(skip, take, orderPo, supplier);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrder[]> GetMaterialOrderBySearchAsync(int skip, int take, string orderPo, string supplier) {
            return base.Channel.GetMaterialOrderBySearchAsync(skip, take, orderPo, supplier);
        }
        
        public int GetMaterialOrderCountBySearch(string orderPo, string supplier) {
            return base.Channel.GetMaterialOrderCountBySearch(orderPo, supplier);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialOrderCountBySearchAsync(string orderPo, string supplier) {
            return base.Channel.GetMaterialOrderCountBySearchAsync(orderPo, supplier);
        }
        
        public PMSClient.MainService.DcMaterialOrder[] GetMaterialOrderForSanjie(int skip, int take, string orderPo) {
            return base.Channel.GetMaterialOrderForSanjie(skip, take, orderPo);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrder[]> GetMaterialOrderForSanjieAsync(int skip, int take, string orderPo) {
            return base.Channel.GetMaterialOrderForSanjieAsync(skip, take, orderPo);
        }
        
        public int GetMaterialOrderCountForSanjie(string orderPo) {
            return base.Channel.GetMaterialOrderCountForSanjie(orderPo);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialOrderCountForSanjieAsync(string orderPo) {
            return base.Channel.GetMaterialOrderCountForSanjieAsync(orderPo);
        }
        
        public int AddMaterialOrder(PMSClient.MainService.DcMaterialOrder model) {
            return base.Channel.AddMaterialOrder(model);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialOrderAsync(PMSClient.MainService.DcMaterialOrder model) {
            return base.Channel.AddMaterialOrderAsync(model);
        }
        
        public int UpdateMaterialOrder(PMSClient.MainService.DcMaterialOrder model) {
            return base.Channel.UpdateMaterialOrder(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialOrderAsync(PMSClient.MainService.DcMaterialOrder model) {
            return base.Channel.UpdateMaterialOrderAsync(model);
        }
        
        public int AddMaterialOrderByUID(PMSClient.MainService.DcMaterialOrder model, string uid) {
            return base.Channel.AddMaterialOrderByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialOrderByUIDAsync(PMSClient.MainService.DcMaterialOrder model, string uid) {
            return base.Channel.AddMaterialOrderByUIDAsync(model, uid);
        }
        
        public int UpdateMaterialOrderByUID(PMSClient.MainService.DcMaterialOrder model, string uid) {
            return base.Channel.UpdateMaterialOrderByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialOrderByUIDAsync(PMSClient.MainService.DcMaterialOrder model, string uid) {
            return base.Channel.UpdateMaterialOrderByUIDAsync(model, uid);
        }
        
        public int DeleteMaterialOrder(System.Guid id) {
            return base.Channel.DeleteMaterialOrder(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMaterialOrderAsync(System.Guid id) {
            return base.Channel.DeleteMaterialOrderAsync(id);
        }
        
        public PMSClient.MainService.DcMaterialOrderItem[] GetMaterialOrderItembyMaterialID(System.Guid id) {
            return base.Channel.GetMaterialOrderItembyMaterialID(id);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrderItem[]> GetMaterialOrderItembyMaterialIDAsync(System.Guid id) {
            return base.Channel.GetMaterialOrderItembyMaterialIDAsync(id);
        }
        
        public int GetMaterialOrderItemCountByMaterialID(System.Guid id) {
            return base.Channel.GetMaterialOrderItemCountByMaterialID(id);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialOrderItemCountByMaterialIDAsync(System.Guid id) {
            return base.Channel.GetMaterialOrderItemCountByMaterialIDAsync(id);
        }
        
        public int AddMaterialOrderItem(PMSClient.MainService.DcMaterialOrderItem model) {
            return base.Channel.AddMaterialOrderItem(model);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialOrderItemAsync(PMSClient.MainService.DcMaterialOrderItem model) {
            return base.Channel.AddMaterialOrderItemAsync(model);
        }
        
        public int UpdateMaterialOrderItem(PMSClient.MainService.DcMaterialOrderItem model) {
            return base.Channel.UpdateMaterialOrderItem(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialOrderItemAsync(PMSClient.MainService.DcMaterialOrderItem model) {
            return base.Channel.UpdateMaterialOrderItemAsync(model);
        }
        
        public int AddMaterialOrderItemByUID(PMSClient.MainService.DcMaterialOrderItem model, string uid) {
            return base.Channel.AddMaterialOrderItemByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialOrderItemByUIDAsync(PMSClient.MainService.DcMaterialOrderItem model, string uid) {
            return base.Channel.AddMaterialOrderItemByUIDAsync(model, uid);
        }
        
        public int UpdateMaterialOrderItemByUID(PMSClient.MainService.DcMaterialOrderItem model, string uid) {
            return base.Channel.UpdateMaterialOrderItemByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialOrderItemByUIDAsync(PMSClient.MainService.DcMaterialOrderItem model, string uid) {
            return base.Channel.UpdateMaterialOrderItemByUIDAsync(model, uid);
        }
        
        public int DeleteMaterialOrderItem(System.Guid id) {
            return base.Channel.DeleteMaterialOrderItem(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMaterialOrderItemAsync(System.Guid id) {
            return base.Channel.DeleteMaterialOrderItemAsync(id);
        }
        
        public PMSClient.MainService.DcMaterialOrderItem[] GetMaterialOrderItems(int skip, int take) {
            return base.Channel.GetMaterialOrderItems(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrderItem[]> GetMaterialOrderItemsAsync(int skip, int take) {
            return base.Channel.GetMaterialOrderItemsAsync(skip, take);
        }
        
        public int GetMaterialOrderItemsCount() {
            return base.Channel.GetMaterialOrderItemsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialOrderItemsCountAsync() {
            return base.Channel.GetMaterialOrderItemsCountAsync();
        }
        
        public PMSClient.MainService.DcMaterialOrderItemExtra[] GetMaterialOrderItemExtras(int skip, int take, string composition, string pminumber, string orderitemnumber, string supplier) {
            return base.Channel.GetMaterialOrderItemExtras(skip, take, composition, pminumber, orderitemnumber, supplier);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrderItemExtra[]> GetMaterialOrderItemExtrasAsync(int skip, int take, string composition, string pminumber, string orderitemnumber, string supplier) {
            return base.Channel.GetMaterialOrderItemExtrasAsync(skip, take, composition, pminumber, orderitemnumber, supplier);
        }
        
        public int GetMaterialOrderItemExtrasCount(string composition, string pminumber, string orderitemnumber, string supplier) {
            return base.Channel.GetMaterialOrderItemExtrasCount(composition, pminumber, orderitemnumber, supplier);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialOrderItemExtrasCountAsync(string composition, string pminumber, string orderitemnumber, string supplier) {
            return base.Channel.GetMaterialOrderItemExtrasCountAsync(composition, pminumber, orderitemnumber, supplier);
        }
        
        public PMSClient.MainService.DcMaterialOrderItemExtra[] GetMaterialOrderItemExtrasUnCompleted(int skip, int take, string composition, string pminumber, string orderitemnumber, string supplier) {
            return base.Channel.GetMaterialOrderItemExtrasUnCompleted(skip, take, composition, pminumber, orderitemnumber, supplier);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrderItemExtra[]> GetMaterialOrderItemExtrasUnCompletedAsync(int skip, int take, string composition, string pminumber, string orderitemnumber, string supplier) {
            return base.Channel.GetMaterialOrderItemExtrasUnCompletedAsync(skip, take, composition, pminumber, orderitemnumber, supplier);
        }
        
        public int GetMaterialOrderItemExtrasCountUnCompleted(string composition, string pminumber, string orderitemnumber, string supplier) {
            return base.Channel.GetMaterialOrderItemExtrasCountUnCompleted(composition, pminumber, orderitemnumber, supplier);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialOrderItemExtrasCountUnCompletedAsync(string composition, string pminumber, string orderitemnumber, string supplier) {
            return base.Channel.GetMaterialOrderItemExtrasCountUnCompletedAsync(composition, pminumber, orderitemnumber, supplier);
        }
        
        public PMSClient.MainService.DcMaterialOrderItemExtra[] GetMaterialOrderItemExtraByYear(int skip, int take, int year) {
            return base.Channel.GetMaterialOrderItemExtraByYear(skip, take, year);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialOrderItemExtra[]> GetMaterialOrderItemExtraByYearAsync(int skip, int take, int year) {
            return base.Channel.GetMaterialOrderItemExtraByYearAsync(skip, take, year);
        }
        
        public int GetMaterialOrderItemExtraCountByYear(string composition, string pminumber, int year) {
            return base.Channel.GetMaterialOrderItemExtraCountByYear(composition, pminumber, year);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialOrderItemExtraCountByYearAsync(string composition, string pminumber, int year) {
            return base.Channel.GetMaterialOrderItemExtraCountByYearAsync(composition, pminumber, year);
        }
        
        public bool CheckOrderItemNumberExist(string orderItemnumber) {
            return base.Channel.CheckOrderItemNumberExist(orderItemnumber);
        }
        
        public System.Threading.Tasks.Task<bool> CheckOrderItemNumberExistAsync(string orderItemnumber) {
            return base.Channel.CheckOrderItemNumberExistAsync(orderItemnumber);
        }
        
        public PMSClient.MainService.DcPlanHistory[] GetPlanHistoryTop10(string searchCode, string deviceCode) {
            return base.Channel.GetPlanHistoryTop10(searchCode, deviceCode);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcPlanHistory[]> GetPlanHistoryTop10Async(string searchCode, string deviceCode) {
            return base.Channel.GetPlanHistoryTop10Async(searchCode, deviceCode);
        }
        
        public bool CheckMaterialOrderUnChecked() {
            return base.Channel.CheckMaterialOrderUnChecked();
        }
        
        public System.Threading.Tasks.Task<bool> CheckMaterialOrderUnCheckedAsync() {
            return base.Channel.CheckMaterialOrderUnCheckedAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IMaterialInventoryService")]
    public interface IMaterialInventoryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryIns", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInsResponse")]
        PMSClient.MainService.DcMaterialInventoryIn[] GetMaterialInventoryIns(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryIns", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialInventoryIn[]> GetMaterialInventoryInsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCount", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCountResponse")]
        int GetMaterialInventoryInCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCount", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCountResponse")]
        System.Threading.Tasks.Task<int> GetMaterialInventoryInCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInsBySearch", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInsBySearchRespo" +
            "nse")]
        PMSClient.MainService.DcMaterialInventoryIn[] GetMaterialInventoryInsBySearch(int skip, int take, string supplier, string composition, string batchnumber, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInsBySearch", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInsBySearchRespo" +
            "nse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialInventoryIn[]> GetMaterialInventoryInsBySearchAsync(int skip, int take, string supplier, string composition, string batchnumber, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCountBySearch", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCountBySearchR" +
            "esponse")]
        int GetMaterialInventoryInCountBySearch(string supplier, string composition, string batchnumber, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCountBySearch", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCountBySearchR" +
            "esponse")]
        System.Threading.Tasks.Task<int> GetMaterialInventoryInCountBySearchAsync(string supplier, string composition, string batchnumber, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInUnCompleted", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInUnCompletedRes" +
            "ponse")]
        PMSClient.MainService.DcMaterialInventoryIn[] GetMaterialInventoryInUnCompleted(int skip, int take, string supplier, string composition, string batchnumber, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInUnCompleted", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInUnCompletedRes" +
            "ponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialInventoryIn[]> GetMaterialInventoryInUnCompletedAsync(int skip, int take, string supplier, string composition, string batchnumber, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCountUnComplet" +
            "ed", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCountUnComplet" +
            "edResponse")]
        int GetMaterialInventoryInCountUnCompleted(string supplier, string composition, string batchnumber, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCountUnComplet" +
            "ed", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCountUnComplet" +
            "edResponse")]
        System.Threading.Tasks.Task<int> GetMaterialInventoryInCountUnCompletedAsync(string supplier, string composition, string batchnumber, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInByYear", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInByYearResponse" +
            "")]
        PMSClient.MainService.DcMaterialInventoryIn[] GetMaterialInventoryInByYear(int skip, int take, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInByYear", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInByYearResponse" +
            "")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialInventoryIn[]> GetMaterialInventoryInByYearAsync(int skip, int take, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCountByYear", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCountByYearRes" +
            "ponse")]
        int GetMaterialInventoryInCountByYear(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCountByYear", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCountByYearRes" +
            "ponse")]
        System.Threading.Tasks.Task<int> GetMaterialInventoryInCountByYearAsync(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/CheckMaterialIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/CheckMaterialInResponse")]
        int CheckMaterialIn(string pmiNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/CheckMaterialIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/CheckMaterialInResponse")]
        System.Threading.Tasks.Task<int> CheckMaterialInAsync(string pmiNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/CheckMaterialOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/CheckMaterialOutResponse")]
        int CheckMaterialOut(string pmiNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/CheckMaterialOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/CheckMaterialOutResponse")]
        System.Threading.Tasks.Task<int> CheckMaterialOutAsync(string pmiNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetReadyOutMaterialList", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetReadyOutMaterialListResponse")]
        PMSClient.MainService.PMSReadyOutMaterialModel[] GetReadyOutMaterialList(int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetReadyOutMaterialList", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetReadyOutMaterialListResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.PMSReadyOutMaterialModel[]> GetReadyOutMaterialListAsync(int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryInResponse")]
        int AddMaterialInventoryIn(PMSClient.MainService.DcMaterialInventoryIn model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryInResponse")]
        System.Threading.Tasks.Task<int> AddMaterialInventoryInAsync(PMSClient.MainService.DcMaterialInventoryIn model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryInResponse")]
        int UpdateMaterialInventoryIn(PMSClient.MainService.DcMaterialInventoryIn model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryInResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialInventoryInAsync(PMSClient.MainService.DcMaterialInventoryIn model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryInByUID", ReplyAction="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryInByUIDResponse")]
        int AddMaterialInventoryInByUID(PMSClient.MainService.DcMaterialInventoryIn model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryInByUID", ReplyAction="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryInByUIDResponse")]
        System.Threading.Tasks.Task<int> AddMaterialInventoryInByUIDAsync(PMSClient.MainService.DcMaterialInventoryIn model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryInByUID", ReplyAction="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryInByUIDRespon" +
            "se")]
        int UpdateMaterialInventoryInByUID(PMSClient.MainService.DcMaterialInventoryIn model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryInByUID", ReplyAction="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryInByUIDRespon" +
            "se")]
        System.Threading.Tasks.Task<int> UpdateMaterialInventoryInByUIDAsync(PMSClient.MainService.DcMaterialInventoryIn model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryInResponse")]
        int DeleteMaterialInventoryIn(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryInResponse")]
        System.Threading.Tasks.Task<int> DeleteMaterialInventoryInAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOuts", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutsResponse")]
        PMSClient.MainService.DcMaterialInventoryOut[] GetMaterialInventoryOuts(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOuts", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialInventoryOut[]> GetMaterialInventoryOutsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCount", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCountResponse" +
            "")]
        int GetMaterialInventoryOutCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCount", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCountResponse" +
            "")]
        System.Threading.Tasks.Task<int> GetMaterialInventoryOutCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutsBySearch", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutsBySearchResp" +
            "onse")]
        PMSClient.MainService.DcMaterialInventoryOut[] GetMaterialInventoryOutsBySearch(int skip, int take, string receiver, string composition, string batchnumber, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutsBySearch", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutsBySearchResp" +
            "onse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialInventoryOut[]> GetMaterialInventoryOutsBySearchAsync(int skip, int take, string receiver, string composition, string batchnumber, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCountBySearch" +
            "", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCountBySearch" +
            "Response")]
        int GetMaterialInventoryOutCountBySearch(string receiver, string composition, string batchnumber, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCountBySearch" +
            "", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCountBySearch" +
            "Response")]
        System.Threading.Tasks.Task<int> GetMaterialInventoryOutCountBySearchAsync(string receiver, string composition, string batchnumber, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutsByYear", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutsByYearRespon" +
            "se")]
        PMSClient.MainService.DcMaterialInventoryOut[] GetMaterialInventoryOutsByYear(int skip, int take, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutsByYear", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutsByYearRespon" +
            "se")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialInventoryOut[]> GetMaterialInventoryOutsByYearAsync(int skip, int take, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCountByYear", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCountByYearRe" +
            "sponse")]
        int GetMaterialInventoryOutCountByYear(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCountByYear", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCountByYearRe" +
            "sponse")]
        System.Threading.Tasks.Task<int> GetMaterialInventoryOutCountByYearAsync(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryOutResponse")]
        int AddMaterialInventoryOut(PMSClient.MainService.DcMaterialInventoryOut model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryOutResponse")]
        System.Threading.Tasks.Task<int> AddMaterialInventoryOutAsync(PMSClient.MainService.DcMaterialInventoryOut model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryOutResponse")]
        int UpdateMaterialInventoryOut(PMSClient.MainService.DcMaterialInventoryOut model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryOutResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialInventoryOutAsync(PMSClient.MainService.DcMaterialInventoryOut model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryOutByUID", ReplyAction="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryOutByUIDResponse" +
            "")]
        int AddMaterialInventoryOutByUID(PMSClient.MainService.DcMaterialInventoryOut model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryOutByUID", ReplyAction="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryOutByUIDResponse" +
            "")]
        System.Threading.Tasks.Task<int> AddMaterialInventoryOutByUIDAsync(PMSClient.MainService.DcMaterialInventoryOut model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryOutByUID", ReplyAction="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryOutByUIDRespo" +
            "nse")]
        int UpdateMaterialInventoryOutByUID(PMSClient.MainService.DcMaterialInventoryOut model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryOutByUID", ReplyAction="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryOutByUIDRespo" +
            "nse")]
        System.Threading.Tasks.Task<int> UpdateMaterialInventoryOutByUIDAsync(PMSClient.MainService.DcMaterialInventoryOut model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryOutResponse")]
        int DeleteMaterialInventoryOut(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryOutResponse")]
        System.Threading.Tasks.Task<int> DeleteMaterialInventoryOutAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMaterialInventoryServiceChannel : PMSClient.MainService.IMaterialInventoryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MaterialInventoryServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IMaterialInventoryService>, PMSClient.MainService.IMaterialInventoryService {
        
        public MaterialInventoryServiceClient() {
        }
        
        public MaterialInventoryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MaterialInventoryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialInventoryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialInventoryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcMaterialInventoryIn[] GetMaterialInventoryIns(int skip, int take) {
            return base.Channel.GetMaterialInventoryIns(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialInventoryIn[]> GetMaterialInventoryInsAsync(int skip, int take) {
            return base.Channel.GetMaterialInventoryInsAsync(skip, take);
        }
        
        public int GetMaterialInventoryInCount() {
            return base.Channel.GetMaterialInventoryInCount();
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialInventoryInCountAsync() {
            return base.Channel.GetMaterialInventoryInCountAsync();
        }
        
        public PMSClient.MainService.DcMaterialInventoryIn[] GetMaterialInventoryInsBySearch(int skip, int take, string supplier, string composition, string batchnumber, string pminumber) {
            return base.Channel.GetMaterialInventoryInsBySearch(skip, take, supplier, composition, batchnumber, pminumber);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialInventoryIn[]> GetMaterialInventoryInsBySearchAsync(int skip, int take, string supplier, string composition, string batchnumber, string pminumber) {
            return base.Channel.GetMaterialInventoryInsBySearchAsync(skip, take, supplier, composition, batchnumber, pminumber);
        }
        
        public int GetMaterialInventoryInCountBySearch(string supplier, string composition, string batchnumber, string pminumber) {
            return base.Channel.GetMaterialInventoryInCountBySearch(supplier, composition, batchnumber, pminumber);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialInventoryInCountBySearchAsync(string supplier, string composition, string batchnumber, string pminumber) {
            return base.Channel.GetMaterialInventoryInCountBySearchAsync(supplier, composition, batchnumber, pminumber);
        }
        
        public PMSClient.MainService.DcMaterialInventoryIn[] GetMaterialInventoryInUnCompleted(int skip, int take, string supplier, string composition, string batchnumber, string pminumber) {
            return base.Channel.GetMaterialInventoryInUnCompleted(skip, take, supplier, composition, batchnumber, pminumber);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialInventoryIn[]> GetMaterialInventoryInUnCompletedAsync(int skip, int take, string supplier, string composition, string batchnumber, string pminumber) {
            return base.Channel.GetMaterialInventoryInUnCompletedAsync(skip, take, supplier, composition, batchnumber, pminumber);
        }
        
        public int GetMaterialInventoryInCountUnCompleted(string supplier, string composition, string batchnumber, string pminumber) {
            return base.Channel.GetMaterialInventoryInCountUnCompleted(supplier, composition, batchnumber, pminumber);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialInventoryInCountUnCompletedAsync(string supplier, string composition, string batchnumber, string pminumber) {
            return base.Channel.GetMaterialInventoryInCountUnCompletedAsync(supplier, composition, batchnumber, pminumber);
        }
        
        public PMSClient.MainService.DcMaterialInventoryIn[] GetMaterialInventoryInByYear(int skip, int take, int year) {
            return base.Channel.GetMaterialInventoryInByYear(skip, take, year);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialInventoryIn[]> GetMaterialInventoryInByYearAsync(int skip, int take, int year) {
            return base.Channel.GetMaterialInventoryInByYearAsync(skip, take, year);
        }
        
        public int GetMaterialInventoryInCountByYear(int year) {
            return base.Channel.GetMaterialInventoryInCountByYear(year);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialInventoryInCountByYearAsync(int year) {
            return base.Channel.GetMaterialInventoryInCountByYearAsync(year);
        }
        
        public int CheckMaterialIn(string pmiNumber) {
            return base.Channel.CheckMaterialIn(pmiNumber);
        }
        
        public System.Threading.Tasks.Task<int> CheckMaterialInAsync(string pmiNumber) {
            return base.Channel.CheckMaterialInAsync(pmiNumber);
        }
        
        public int CheckMaterialOut(string pmiNumber) {
            return base.Channel.CheckMaterialOut(pmiNumber);
        }
        
        public System.Threading.Tasks.Task<int> CheckMaterialOutAsync(string pmiNumber) {
            return base.Channel.CheckMaterialOutAsync(pmiNumber);
        }
        
        public PMSClient.MainService.PMSReadyOutMaterialModel[] GetReadyOutMaterialList(int take) {
            return base.Channel.GetReadyOutMaterialList(take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.PMSReadyOutMaterialModel[]> GetReadyOutMaterialListAsync(int take) {
            return base.Channel.GetReadyOutMaterialListAsync(take);
        }
        
        public int AddMaterialInventoryIn(PMSClient.MainService.DcMaterialInventoryIn model) {
            return base.Channel.AddMaterialInventoryIn(model);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialInventoryInAsync(PMSClient.MainService.DcMaterialInventoryIn model) {
            return base.Channel.AddMaterialInventoryInAsync(model);
        }
        
        public int UpdateMaterialInventoryIn(PMSClient.MainService.DcMaterialInventoryIn model) {
            return base.Channel.UpdateMaterialInventoryIn(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialInventoryInAsync(PMSClient.MainService.DcMaterialInventoryIn model) {
            return base.Channel.UpdateMaterialInventoryInAsync(model);
        }
        
        public int AddMaterialInventoryInByUID(PMSClient.MainService.DcMaterialInventoryIn model, string uid) {
            return base.Channel.AddMaterialInventoryInByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialInventoryInByUIDAsync(PMSClient.MainService.DcMaterialInventoryIn model, string uid) {
            return base.Channel.AddMaterialInventoryInByUIDAsync(model, uid);
        }
        
        public int UpdateMaterialInventoryInByUID(PMSClient.MainService.DcMaterialInventoryIn model, string uid) {
            return base.Channel.UpdateMaterialInventoryInByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialInventoryInByUIDAsync(PMSClient.MainService.DcMaterialInventoryIn model, string uid) {
            return base.Channel.UpdateMaterialInventoryInByUIDAsync(model, uid);
        }
        
        public int DeleteMaterialInventoryIn(System.Guid id) {
            return base.Channel.DeleteMaterialInventoryIn(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMaterialInventoryInAsync(System.Guid id) {
            return base.Channel.DeleteMaterialInventoryInAsync(id);
        }
        
        public PMSClient.MainService.DcMaterialInventoryOut[] GetMaterialInventoryOuts(int skip, int take) {
            return base.Channel.GetMaterialInventoryOuts(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialInventoryOut[]> GetMaterialInventoryOutsAsync(int skip, int take) {
            return base.Channel.GetMaterialInventoryOutsAsync(skip, take);
        }
        
        public int GetMaterialInventoryOutCount() {
            return base.Channel.GetMaterialInventoryOutCount();
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialInventoryOutCountAsync() {
            return base.Channel.GetMaterialInventoryOutCountAsync();
        }
        
        public PMSClient.MainService.DcMaterialInventoryOut[] GetMaterialInventoryOutsBySearch(int skip, int take, string receiver, string composition, string batchnumber, string pminumber) {
            return base.Channel.GetMaterialInventoryOutsBySearch(skip, take, receiver, composition, batchnumber, pminumber);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialInventoryOut[]> GetMaterialInventoryOutsBySearchAsync(int skip, int take, string receiver, string composition, string batchnumber, string pminumber) {
            return base.Channel.GetMaterialInventoryOutsBySearchAsync(skip, take, receiver, composition, batchnumber, pminumber);
        }
        
        public int GetMaterialInventoryOutCountBySearch(string receiver, string composition, string batchnumber, string pminumber) {
            return base.Channel.GetMaterialInventoryOutCountBySearch(receiver, composition, batchnumber, pminumber);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialInventoryOutCountBySearchAsync(string receiver, string composition, string batchnumber, string pminumber) {
            return base.Channel.GetMaterialInventoryOutCountBySearchAsync(receiver, composition, batchnumber, pminumber);
        }
        
        public PMSClient.MainService.DcMaterialInventoryOut[] GetMaterialInventoryOutsByYear(int skip, int take, int year) {
            return base.Channel.GetMaterialInventoryOutsByYear(skip, take, year);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcMaterialInventoryOut[]> GetMaterialInventoryOutsByYearAsync(int skip, int take, int year) {
            return base.Channel.GetMaterialInventoryOutsByYearAsync(skip, take, year);
        }
        
        public int GetMaterialInventoryOutCountByYear(int year) {
            return base.Channel.GetMaterialInventoryOutCountByYear(year);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialInventoryOutCountByYearAsync(int year) {
            return base.Channel.GetMaterialInventoryOutCountByYearAsync(year);
        }
        
        public int AddMaterialInventoryOut(PMSClient.MainService.DcMaterialInventoryOut model) {
            return base.Channel.AddMaterialInventoryOut(model);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialInventoryOutAsync(PMSClient.MainService.DcMaterialInventoryOut model) {
            return base.Channel.AddMaterialInventoryOutAsync(model);
        }
        
        public int UpdateMaterialInventoryOut(PMSClient.MainService.DcMaterialInventoryOut model) {
            return base.Channel.UpdateMaterialInventoryOut(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialInventoryOutAsync(PMSClient.MainService.DcMaterialInventoryOut model) {
            return base.Channel.UpdateMaterialInventoryOutAsync(model);
        }
        
        public int AddMaterialInventoryOutByUID(PMSClient.MainService.DcMaterialInventoryOut model, string uid) {
            return base.Channel.AddMaterialInventoryOutByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialInventoryOutByUIDAsync(PMSClient.MainService.DcMaterialInventoryOut model, string uid) {
            return base.Channel.AddMaterialInventoryOutByUIDAsync(model, uid);
        }
        
        public int UpdateMaterialInventoryOutByUID(PMSClient.MainService.DcMaterialInventoryOut model, string uid) {
            return base.Channel.UpdateMaterialInventoryOutByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialInventoryOutByUIDAsync(PMSClient.MainService.DcMaterialInventoryOut model, string uid) {
            return base.Channel.UpdateMaterialInventoryOutByUIDAsync(model, uid);
        }
        
        public int DeleteMaterialInventoryOut(System.Guid id) {
            return base.Channel.DeleteMaterialInventoryOut(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMaterialInventoryOutAsync(System.Guid id) {
            return base.Channel.DeleteMaterialInventoryOutAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IMissonService")]
    public interface IMissonService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissons", ReplyAction="http://tempuri.org/IMissonService/GetMissonsResponse")]
        PMSClient.MainService.DcOrder[] GetMissons(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissons", ReplyAction="http://tempuri.org/IMissonService/GetMissonsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetMissonsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonsCount", ReplyAction="http://tempuri.org/IMissonService/GetMissonsCountResponse")]
        int GetMissonsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonsCount", ReplyAction="http://tempuri.org/IMissonService/GetMissonsCountResponse")]
        System.Threading.Tasks.Task<int> GetMissonsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonsBySearch", ReplyAction="http://tempuri.org/IMissonService/GetMissonsBySearchResponse")]
        PMSClient.MainService.DcOrder[] GetMissonsBySearch(int skip, int take, string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonsBySearch", ReplyAction="http://tempuri.org/IMissonService/GetMissonsBySearchResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetMissonsBySearchAsync(int skip, int take, string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonsCountBySearch", ReplyAction="http://tempuri.org/IMissonService/GetMissonsCountBySearchResponse")]
        int GetMissonsCountBySearch(string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonsCountBySearch", ReplyAction="http://tempuri.org/IMissonService/GetMissonsCountBySearchResponse")]
        System.Threading.Tasks.Task<int> GetMissonsCountBySearchAsync(string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonUnCompleted", ReplyAction="http://tempuri.org/IMissonService/GetMissonUnCompletedResponse")]
        PMSClient.MainService.DcOrder[] GetMissonUnCompleted(int skip, int take, string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonUnCompleted", ReplyAction="http://tempuri.org/IMissonService/GetMissonUnCompletedResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetMissonUnCompletedAsync(int skip, int take, string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonUnCompletedCount2", ReplyAction="http://tempuri.org/IMissonService/GetMissonUnCompletedCount2Response")]
        int GetMissonUnCompletedCount2(string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonUnCompletedCount2", ReplyAction="http://tempuri.org/IMissonService/GetMissonUnCompletedCount2Response")]
        System.Threading.Tasks.Task<int> GetMissonUnCompletedCount2Async(string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonUnCompletedCount", ReplyAction="http://tempuri.org/IMissonService/GetMissonUnCompletedCountResponse")]
        int GetMissonUnCompletedCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonUnCompletedCount", ReplyAction="http://tempuri.org/IMissonService/GetMissonUnCompletedCountResponse")]
        System.Threading.Tasks.Task<int> GetMissonUnCompletedCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetUnVHPTargetCount", ReplyAction="http://tempuri.org/IMissonService/GetUnVHPTargetCountResponse")]
        double GetUnVHPTargetCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetUnVHPTargetCount", ReplyAction="http://tempuri.org/IMissonService/GetUnVHPTargetCountResponse")]
        System.Threading.Tasks.Task<double> GetUnVHPTargetCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonUnCompletedSample", ReplyAction="http://tempuri.org/IMissonService/GetMissonUnCompletedSampleResponse")]
        PMSClient.MainService.DcOrder[] GetMissonUnCompletedSample(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonUnCompletedSample", ReplyAction="http://tempuri.org/IMissonService/GetMissonUnCompletedSampleResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetMissonUnCompletedSampleAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonUnCompletedCountSample", ReplyAction="http://tempuri.org/IMissonService/GetMissonUnCompletedCountSampleResponse")]
        int GetMissonUnCompletedCountSample();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonUnCompletedCountSample", ReplyAction="http://tempuri.org/IMissonService/GetMissonUnCompletedCountSampleResponse")]
        System.Threading.Tasks.Task<int> GetMissonUnCompletedCountSampleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMisson", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonResponse")]
        PMSClient.MainService.DcPlanWithMisson[] GetPlanWithMisson(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMisson", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanWithMissonAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCount", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCountResponse")]
        int GetPlanWithMissonCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCount", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCountResponse")]
        System.Threading.Tasks.Task<int> GetPlanWithMissonCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonChecked", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedResponse")]
        PMSClient.MainService.DcPlanWithMisson[] GetPlanWithMissonChecked(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonChecked", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanWithMissonCheckedAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCount", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCountResponse")]
        int GetPlanWithMissonCheckedCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCount", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCountResponse")]
        System.Threading.Tasks.Task<int> GetPlanWithMissonCheckedCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedByDateRange", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedByDateRangeResponse")]
        PMSClient.MainService.DcPlanWithMisson[] GetPlanWithMissonCheckedByDateRange(int skip, int take, System.DateTime dateStart, System.DateTime dateEnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedByDateRange", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedByDateRangeResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanWithMissonCheckedByDateRangeAsync(int skip, int take, System.DateTime dateStart, System.DateTime dateEnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCountByDateRange", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCountByDateRangeRespons" +
            "e")]
        int GetPlanWithMissonCheckedCountByDateRange(System.DateTime dateStart, System.DateTime dateEnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCountByDateRange", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCountByDateRangeRespons" +
            "e")]
        System.Threading.Tasks.Task<int> GetPlanWithMissonCheckedCountByDateRangeAsync(System.DateTime dateStart, System.DateTime dateEnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedByDateRange2", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedByDateRange2Response")]
        PMSClient.MainService.DcPlanWithMisson[] GetPlanWithMissonCheckedByDateRange2(int skip, int take, System.DateTime dateStart, System.DateTime dateEnd, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedByDateRange2", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedByDateRange2Response")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanWithMissonCheckedByDateRange2Async(int skip, int take, System.DateTime dateStart, System.DateTime dateEnd, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCountByDateRange2", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCountByDateRange2Respon" +
            "se")]
        int GetPlanWithMissonCheckedCountByDateRange2(System.DateTime dateStart, System.DateTime dateEnd, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCountByDateRange2", ReplyAction="http://tempuri.org/IMissonService/GetPlanWithMissonCheckedCountByDateRange2Respon" +
            "se")]
        System.Threading.Tasks.Task<int> GetPlanWithMissonCheckedCountByDateRange2Async(System.DateTime dateStart, System.DateTime dateEnd, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanExtra", ReplyAction="http://tempuri.org/IMissonService/GetPlanExtraResponse")]
        PMSClient.MainService.DcPlanWithMisson[] GetPlanExtra(int skip, int take, string searchCode, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanExtra", ReplyAction="http://tempuri.org/IMissonService/GetPlanExtraResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanExtraAsync(int skip, int take, string searchCode, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanExtraCount", ReplyAction="http://tempuri.org/IMissonService/GetPlanExtraCountResponse")]
        int GetPlanExtraCount(string searchCode, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanExtraCount", ReplyAction="http://tempuri.org/IMissonService/GetPlanExtraCountResponse")]
        System.Threading.Tasks.Task<int> GetPlanExtraCountAsync(string searchCode, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanExtraForProduct", ReplyAction="http://tempuri.org/IMissonService/GetPlanExtraForProductResponse")]
        PMSClient.MainService.DcPlanWithMisson[] GetPlanExtraForProduct(int skip, int take, string searchCode, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanExtraForProduct", ReplyAction="http://tempuri.org/IMissonService/GetPlanExtraForProductResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanExtraForProductAsync(int skip, int take, string searchCode, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanExtraForProductCount", ReplyAction="http://tempuri.org/IMissonService/GetPlanExtraForProductCountResponse")]
        int GetPlanExtraForProductCount(string searchCode, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanExtraForProductCount", ReplyAction="http://tempuri.org/IMissonService/GetPlanExtraForProductCountResponse")]
        System.Threading.Tasks.Task<int> GetPlanExtraForProductCountAsync(string searchCode, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanExtra2", ReplyAction="http://tempuri.org/IMissonService/GetPlanExtra2Response")]
        PMSClient.MainService.DcPlanWithMisson[] GetPlanExtra2(int skip, int take, string searchCode, string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanExtra2", ReplyAction="http://tempuri.org/IMissonService/GetPlanExtra2Response")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanExtra2Async(int skip, int take, string searchCode, string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanExtraCount2", ReplyAction="http://tempuri.org/IMissonService/GetPlanExtraCount2Response")]
        int GetPlanExtraCount2(string searchCode, string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanExtraCount2", ReplyAction="http://tempuri.org/IMissonService/GetPlanExtraCount2Response")]
        System.Threading.Tasks.Task<int> GetPlanExtraCount2Async(string searchCode, string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanExtraForProduct2", ReplyAction="http://tempuri.org/IMissonService/GetPlanExtraForProduct2Response")]
        PMSClient.MainService.DcPlanWithMisson[] GetPlanExtraForProduct2(int skip, int take, string searchCode, string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanExtraForProduct2", ReplyAction="http://tempuri.org/IMissonService/GetPlanExtraForProduct2Response")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanExtraForProduct2Async(int skip, int take, string searchCode, string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanExtraForProductCount2", ReplyAction="http://tempuri.org/IMissonService/GetPlanExtraForProductCount2Response")]
        int GetPlanExtraForProductCount2(string searchCode, string composition, string pminumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlanExtraForProductCount2", ReplyAction="http://tempuri.org/IMissonService/GetPlanExtraForProductCount2Response")]
        System.Threading.Tasks.Task<int> GetPlanExtraForProductCount2Async(string searchCode, string composition, string pminumber);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMissonServiceChannel : PMSClient.MainService.IMissonService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MissonServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IMissonService>, PMSClient.MainService.IMissonService {
        
        public MissonServiceClient() {
        }
        
        public MissonServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MissonServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MissonServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MissonServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcOrder[] GetMissons(int skip, int take) {
            return base.Channel.GetMissons(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetMissonsAsync(int skip, int take) {
            return base.Channel.GetMissonsAsync(skip, take);
        }
        
        public int GetMissonsCount() {
            return base.Channel.GetMissonsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetMissonsCountAsync() {
            return base.Channel.GetMissonsCountAsync();
        }
        
        public PMSClient.MainService.DcOrder[] GetMissonsBySearch(int skip, int take, string composition, string pminumber) {
            return base.Channel.GetMissonsBySearch(skip, take, composition, pminumber);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetMissonsBySearchAsync(int skip, int take, string composition, string pminumber) {
            return base.Channel.GetMissonsBySearchAsync(skip, take, composition, pminumber);
        }
        
        public int GetMissonsCountBySearch(string composition, string pminumber) {
            return base.Channel.GetMissonsCountBySearch(composition, pminumber);
        }
        
        public System.Threading.Tasks.Task<int> GetMissonsCountBySearchAsync(string composition, string pminumber) {
            return base.Channel.GetMissonsCountBySearchAsync(composition, pminumber);
        }
        
        public PMSClient.MainService.DcOrder[] GetMissonUnCompleted(int skip, int take, string composition, string pminumber) {
            return base.Channel.GetMissonUnCompleted(skip, take, composition, pminumber);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetMissonUnCompletedAsync(int skip, int take, string composition, string pminumber) {
            return base.Channel.GetMissonUnCompletedAsync(skip, take, composition, pminumber);
        }
        
        public int GetMissonUnCompletedCount2(string composition, string pminumber) {
            return base.Channel.GetMissonUnCompletedCount2(composition, pminumber);
        }
        
        public System.Threading.Tasks.Task<int> GetMissonUnCompletedCount2Async(string composition, string pminumber) {
            return base.Channel.GetMissonUnCompletedCount2Async(composition, pminumber);
        }
        
        public int GetMissonUnCompletedCount() {
            return base.Channel.GetMissonUnCompletedCount();
        }
        
        public System.Threading.Tasks.Task<int> GetMissonUnCompletedCountAsync() {
            return base.Channel.GetMissonUnCompletedCountAsync();
        }
        
        public double GetUnVHPTargetCount() {
            return base.Channel.GetUnVHPTargetCount();
        }
        
        public System.Threading.Tasks.Task<double> GetUnVHPTargetCountAsync() {
            return base.Channel.GetUnVHPTargetCountAsync();
        }
        
        public PMSClient.MainService.DcOrder[] GetMissonUnCompletedSample(int skip, int take) {
            return base.Channel.GetMissonUnCompletedSample(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcOrder[]> GetMissonUnCompletedSampleAsync(int skip, int take) {
            return base.Channel.GetMissonUnCompletedSampleAsync(skip, take);
        }
        
        public int GetMissonUnCompletedCountSample() {
            return base.Channel.GetMissonUnCompletedCountSample();
        }
        
        public System.Threading.Tasks.Task<int> GetMissonUnCompletedCountSampleAsync() {
            return base.Channel.GetMissonUnCompletedCountSampleAsync();
        }
        
        public PMSClient.MainService.DcPlanWithMisson[] GetPlanWithMisson(int skip, int take) {
            return base.Channel.GetPlanWithMisson(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanWithMissonAsync(int skip, int take) {
            return base.Channel.GetPlanWithMissonAsync(skip, take);
        }
        
        public int GetPlanWithMissonCount() {
            return base.Channel.GetPlanWithMissonCount();
        }
        
        public System.Threading.Tasks.Task<int> GetPlanWithMissonCountAsync() {
            return base.Channel.GetPlanWithMissonCountAsync();
        }
        
        public PMSClient.MainService.DcPlanWithMisson[] GetPlanWithMissonChecked(int skip, int take) {
            return base.Channel.GetPlanWithMissonChecked(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanWithMissonCheckedAsync(int skip, int take) {
            return base.Channel.GetPlanWithMissonCheckedAsync(skip, take);
        }
        
        public int GetPlanWithMissonCheckedCount() {
            return base.Channel.GetPlanWithMissonCheckedCount();
        }
        
        public System.Threading.Tasks.Task<int> GetPlanWithMissonCheckedCountAsync() {
            return base.Channel.GetPlanWithMissonCheckedCountAsync();
        }
        
        public PMSClient.MainService.DcPlanWithMisson[] GetPlanWithMissonCheckedByDateRange(int skip, int take, System.DateTime dateStart, System.DateTime dateEnd) {
            return base.Channel.GetPlanWithMissonCheckedByDateRange(skip, take, dateStart, dateEnd);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanWithMissonCheckedByDateRangeAsync(int skip, int take, System.DateTime dateStart, System.DateTime dateEnd) {
            return base.Channel.GetPlanWithMissonCheckedByDateRangeAsync(skip, take, dateStart, dateEnd);
        }
        
        public int GetPlanWithMissonCheckedCountByDateRange(System.DateTime dateStart, System.DateTime dateEnd) {
            return base.Channel.GetPlanWithMissonCheckedCountByDateRange(dateStart, dateEnd);
        }
        
        public System.Threading.Tasks.Task<int> GetPlanWithMissonCheckedCountByDateRangeAsync(System.DateTime dateStart, System.DateTime dateEnd) {
            return base.Channel.GetPlanWithMissonCheckedCountByDateRangeAsync(dateStart, dateEnd);
        }
        
        public PMSClient.MainService.DcPlanWithMisson[] GetPlanWithMissonCheckedByDateRange2(int skip, int take, System.DateTime dateStart, System.DateTime dateEnd, string composition) {
            return base.Channel.GetPlanWithMissonCheckedByDateRange2(skip, take, dateStart, dateEnd, composition);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanWithMissonCheckedByDateRange2Async(int skip, int take, System.DateTime dateStart, System.DateTime dateEnd, string composition) {
            return base.Channel.GetPlanWithMissonCheckedByDateRange2Async(skip, take, dateStart, dateEnd, composition);
        }
        
        public int GetPlanWithMissonCheckedCountByDateRange2(System.DateTime dateStart, System.DateTime dateEnd, string composition) {
            return base.Channel.GetPlanWithMissonCheckedCountByDateRange2(dateStart, dateEnd, composition);
        }
        
        public System.Threading.Tasks.Task<int> GetPlanWithMissonCheckedCountByDateRange2Async(System.DateTime dateStart, System.DateTime dateEnd, string composition) {
            return base.Channel.GetPlanWithMissonCheckedCountByDateRange2Async(dateStart, dateEnd, composition);
        }
        
        public PMSClient.MainService.DcPlanWithMisson[] GetPlanExtra(int skip, int take, string searchCode, string composition) {
            return base.Channel.GetPlanExtra(skip, take, searchCode, composition);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanExtraAsync(int skip, int take, string searchCode, string composition) {
            return base.Channel.GetPlanExtraAsync(skip, take, searchCode, composition);
        }
        
        public int GetPlanExtraCount(string searchCode, string composition) {
            return base.Channel.GetPlanExtraCount(searchCode, composition);
        }
        
        public System.Threading.Tasks.Task<int> GetPlanExtraCountAsync(string searchCode, string composition) {
            return base.Channel.GetPlanExtraCountAsync(searchCode, composition);
        }
        
        public PMSClient.MainService.DcPlanWithMisson[] GetPlanExtraForProduct(int skip, int take, string searchCode, string composition) {
            return base.Channel.GetPlanExtraForProduct(skip, take, searchCode, composition);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanExtraForProductAsync(int skip, int take, string searchCode, string composition) {
            return base.Channel.GetPlanExtraForProductAsync(skip, take, searchCode, composition);
        }
        
        public int GetPlanExtraForProductCount(string searchCode, string composition) {
            return base.Channel.GetPlanExtraForProductCount(searchCode, composition);
        }
        
        public System.Threading.Tasks.Task<int> GetPlanExtraForProductCountAsync(string searchCode, string composition) {
            return base.Channel.GetPlanExtraForProductCountAsync(searchCode, composition);
        }
        
        public PMSClient.MainService.DcPlanWithMisson[] GetPlanExtra2(int skip, int take, string searchCode, string composition, string pminumber) {
            return base.Channel.GetPlanExtra2(skip, take, searchCode, composition, pminumber);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanExtra2Async(int skip, int take, string searchCode, string composition, string pminumber) {
            return base.Channel.GetPlanExtra2Async(skip, take, searchCode, composition, pminumber);
        }
        
        public int GetPlanExtraCount2(string searchCode, string composition, string pminumber) {
            return base.Channel.GetPlanExtraCount2(searchCode, composition, pminumber);
        }
        
        public System.Threading.Tasks.Task<int> GetPlanExtraCount2Async(string searchCode, string composition, string pminumber) {
            return base.Channel.GetPlanExtraCount2Async(searchCode, composition, pminumber);
        }
        
        public PMSClient.MainService.DcPlanWithMisson[] GetPlanExtraForProduct2(int skip, int take, string searchCode, string composition, string pminumber) {
            return base.Channel.GetPlanExtraForProduct2(skip, take, searchCode, composition, pminumber);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcPlanWithMisson[]> GetPlanExtraForProduct2Async(int skip, int take, string searchCode, string composition, string pminumber) {
            return base.Channel.GetPlanExtraForProduct2Async(skip, take, searchCode, composition, pminumber);
        }
        
        public int GetPlanExtraForProductCount2(string searchCode, string composition, string pminumber) {
            return base.Channel.GetPlanExtraForProductCount2(searchCode, composition, pminumber);
        }
        
        public System.Threading.Tasks.Task<int> GetPlanExtraForProductCount2Async(string searchCode, string composition, string pminumber) {
            return base.Channel.GetPlanExtraForProductCount2Async(searchCode, composition, pminumber);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IDeliveryService")]
    public interface IDeliveryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDelivery", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryResponse")]
        PMSClient.MainService.DcDelivery[] GetDelivery(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDelivery", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcDelivery[]> GetDeliveryAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryCount", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryCountResponse")]
        int GetDeliveryCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryCount", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryCountResponse")]
        System.Threading.Tasks.Task<int> GetDeliveryCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryBySearch", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryBySearchResponse")]
        PMSClient.MainService.DcDelivery[] GetDeliveryBySearch(int skip, int take, string deliveryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryBySearch", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryBySearchResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcDelivery[]> GetDeliveryBySearchAsync(int skip, int take, string deliveryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryCountBySearch", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryCountBySearchResponse")]
        int GetDeliveryCountBySearch(string deliveryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryCountBySearch", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryCountBySearchResponse")]
        System.Threading.Tasks.Task<int> GetDeliveryCountBySearchAsync(string deliveryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/AddDelivery", ReplyAction="http://tempuri.org/IDeliveryService/AddDeliveryResponse")]
        int AddDelivery(PMSClient.MainService.DcDelivery model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/AddDelivery", ReplyAction="http://tempuri.org/IDeliveryService/AddDeliveryResponse")]
        System.Threading.Tasks.Task<int> AddDeliveryAsync(PMSClient.MainService.DcDelivery model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/UpdateDelivery", ReplyAction="http://tempuri.org/IDeliveryService/UpdateDeliveryResponse")]
        int UpdateDelivery(PMSClient.MainService.DcDelivery model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/UpdateDelivery", ReplyAction="http://tempuri.org/IDeliveryService/UpdateDeliveryResponse")]
        System.Threading.Tasks.Task<int> UpdateDeliveryAsync(PMSClient.MainService.DcDelivery model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/AddDeliveryByUID", ReplyAction="http://tempuri.org/IDeliveryService/AddDeliveryByUIDResponse")]
        int AddDeliveryByUID(PMSClient.MainService.DcDelivery model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/AddDeliveryByUID", ReplyAction="http://tempuri.org/IDeliveryService/AddDeliveryByUIDResponse")]
        System.Threading.Tasks.Task<int> AddDeliveryByUIDAsync(PMSClient.MainService.DcDelivery model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/UpdateDeliveryByUID", ReplyAction="http://tempuri.org/IDeliveryService/UpdateDeliveryByUIDResponse")]
        int UpdateDeliveryByUID(PMSClient.MainService.DcDelivery model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/UpdateDeliveryByUID", ReplyAction="http://tempuri.org/IDeliveryService/UpdateDeliveryByUIDResponse")]
        System.Threading.Tasks.Task<int> UpdateDeliveryByUIDAsync(PMSClient.MainService.DcDelivery model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/DeleteDelivery", ReplyAction="http://tempuri.org/IDeliveryService/DeleteDeliveryResponse")]
        int DeleteDelivery(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/DeleteDelivery", ReplyAction="http://tempuri.org/IDeliveryService/DeleteDeliveryResponse")]
        System.Threading.Tasks.Task<int> DeleteDeliveryAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItemByDeliveryID", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemByDeliveryIDResponse")]
        PMSClient.MainService.DcDeliveryItem[] GetDeliveryItemByDeliveryID(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItemByDeliveryID", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemByDeliveryIDResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcDeliveryItem[]> GetDeliveryItemByDeliveryIDAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItems", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemsResponse")]
        PMSClient.MainService.DcDeliveryItem[] GetDeliveryItems(int skip, int take, string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItems", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcDeliveryItem[]> GetDeliveryItemsAsync(int skip, int take, string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItemsCount", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemsCountResponse")]
        int GetDeliveryItemsCount(string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItemsCount", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemsCountResponse")]
        System.Threading.Tasks.Task<int> GetDeliveryItemsCountAsync(string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItemExtra", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemExtraResponse")]
        PMSClient.MainService.DcDeliveryItemExtra[] GetDeliveryItemExtra(int skip, int take, string productid, string composition, string customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItemExtra", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemExtraResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcDeliveryItemExtra[]> GetDeliveryItemExtraAsync(int skip, int take, string productid, string composition, string customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItemExtraCount", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemExtraCountResponse")]
        int GetDeliveryItemExtraCount(string productid, string composition, string customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItemExtraCount", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemExtraCountResponse")]
        System.Threading.Tasks.Task<int> GetDeliveryItemExtraCountAsync(string productid, string composition, string customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItemExtraByYear", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemExtraByYearResponse")]
        PMSClient.MainService.DcDeliveryItemExtra[] GetDeliveryItemExtraByYear(int skip, int take, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItemExtraByYear", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemExtraByYearResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcDeliveryItemExtra[]> GetDeliveryItemExtraByYearAsync(int skip, int take, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItemExtraCountByYear", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemExtraCountByYearResponse")]
        int GetDeliveryItemExtraCountByYear(string productid, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItemExtraCountByYear", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemExtraCountByYearResponse")]
        System.Threading.Tasks.Task<int> GetDeliveryItemExtraCountByYearAsync(string productid, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/AddDeliveryItem", ReplyAction="http://tempuri.org/IDeliveryService/AddDeliveryItemResponse")]
        int AddDeliveryItem(PMSClient.MainService.DcDeliveryItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/AddDeliveryItem", ReplyAction="http://tempuri.org/IDeliveryService/AddDeliveryItemResponse")]
        System.Threading.Tasks.Task<int> AddDeliveryItemAsync(PMSClient.MainService.DcDeliveryItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/UpdateDeliveryItem", ReplyAction="http://tempuri.org/IDeliveryService/UpdateDeliveryItemResponse")]
        int UpdateDeliveryItem(PMSClient.MainService.DcDeliveryItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/UpdateDeliveryItem", ReplyAction="http://tempuri.org/IDeliveryService/UpdateDeliveryItemResponse")]
        System.Threading.Tasks.Task<int> UpdateDeliveryItemAsync(PMSClient.MainService.DcDeliveryItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/AddDeliveryItemByUID", ReplyAction="http://tempuri.org/IDeliveryService/AddDeliveryItemByUIDResponse")]
        int AddDeliveryItemByUID(PMSClient.MainService.DcDeliveryItem model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/AddDeliveryItemByUID", ReplyAction="http://tempuri.org/IDeliveryService/AddDeliveryItemByUIDResponse")]
        System.Threading.Tasks.Task<int> AddDeliveryItemByUIDAsync(PMSClient.MainService.DcDeliveryItem model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/UpdateDeliveryItemByUID", ReplyAction="http://tempuri.org/IDeliveryService/UpdateDeliveryItemByUIDResponse")]
        int UpdateDeliveryItemByUID(PMSClient.MainService.DcDeliveryItem model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/UpdateDeliveryItemByUID", ReplyAction="http://tempuri.org/IDeliveryService/UpdateDeliveryItemByUIDResponse")]
        System.Threading.Tasks.Task<int> UpdateDeliveryItemByUIDAsync(PMSClient.MainService.DcDeliveryItem model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/DeleteDeliveryItem", ReplyAction="http://tempuri.org/IDeliveryService/DeleteDeliveryItemResponse")]
        int DeleteDeliveryItem(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/DeleteDeliveryItem", ReplyAction="http://tempuri.org/IDeliveryService/DeleteDeliveryItemResponse")]
        System.Threading.Tasks.Task<int> DeleteDeliveryItemAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItemByProductID", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemByProductIDResponse")]
        PMSClient.MainService.DcDeliveryItem[] GetDeliveryItemByProductID(string productid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryItemByProductID", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryItemByProductIDResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcDeliveryItem[]> GetDeliveryItemByProductIDAsync(string productid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryUnFinished", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryUnFinishedResponse")]
        PMSClient.MainService.DcDelivery[] GetDeliveryUnFinished();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetDeliveryUnFinished", ReplyAction="http://tempuri.org/IDeliveryService/GetDeliveryUnFinishedResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcDelivery[]> GetDeliveryUnFinishedAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDeliveryServiceChannel : PMSClient.MainService.IDeliveryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeliveryServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IDeliveryService>, PMSClient.MainService.IDeliveryService {
        
        public DeliveryServiceClient() {
        }
        
        public DeliveryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DeliveryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeliveryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeliveryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcDelivery[] GetDelivery(int skip, int take) {
            return base.Channel.GetDelivery(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcDelivery[]> GetDeliveryAsync(int skip, int take) {
            return base.Channel.GetDeliveryAsync(skip, take);
        }
        
        public int GetDeliveryCount() {
            return base.Channel.GetDeliveryCount();
        }
        
        public System.Threading.Tasks.Task<int> GetDeliveryCountAsync() {
            return base.Channel.GetDeliveryCountAsync();
        }
        
        public PMSClient.MainService.DcDelivery[] GetDeliveryBySearch(int skip, int take, string deliveryName) {
            return base.Channel.GetDeliveryBySearch(skip, take, deliveryName);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcDelivery[]> GetDeliveryBySearchAsync(int skip, int take, string deliveryName) {
            return base.Channel.GetDeliveryBySearchAsync(skip, take, deliveryName);
        }
        
        public int GetDeliveryCountBySearch(string deliveryName) {
            return base.Channel.GetDeliveryCountBySearch(deliveryName);
        }
        
        public System.Threading.Tasks.Task<int> GetDeliveryCountBySearchAsync(string deliveryName) {
            return base.Channel.GetDeliveryCountBySearchAsync(deliveryName);
        }
        
        public int AddDelivery(PMSClient.MainService.DcDelivery model) {
            return base.Channel.AddDelivery(model);
        }
        
        public System.Threading.Tasks.Task<int> AddDeliveryAsync(PMSClient.MainService.DcDelivery model) {
            return base.Channel.AddDeliveryAsync(model);
        }
        
        public int UpdateDelivery(PMSClient.MainService.DcDelivery model) {
            return base.Channel.UpdateDelivery(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateDeliveryAsync(PMSClient.MainService.DcDelivery model) {
            return base.Channel.UpdateDeliveryAsync(model);
        }
        
        public int AddDeliveryByUID(PMSClient.MainService.DcDelivery model, string uid) {
            return base.Channel.AddDeliveryByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> AddDeliveryByUIDAsync(PMSClient.MainService.DcDelivery model, string uid) {
            return base.Channel.AddDeliveryByUIDAsync(model, uid);
        }
        
        public int UpdateDeliveryByUID(PMSClient.MainService.DcDelivery model, string uid) {
            return base.Channel.UpdateDeliveryByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateDeliveryByUIDAsync(PMSClient.MainService.DcDelivery model, string uid) {
            return base.Channel.UpdateDeliveryByUIDAsync(model, uid);
        }
        
        public int DeleteDelivery(System.Guid id) {
            return base.Channel.DeleteDelivery(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteDeliveryAsync(System.Guid id) {
            return base.Channel.DeleteDeliveryAsync(id);
        }
        
        public PMSClient.MainService.DcDeliveryItem[] GetDeliveryItemByDeliveryID(System.Guid id) {
            return base.Channel.GetDeliveryItemByDeliveryID(id);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcDeliveryItem[]> GetDeliveryItemByDeliveryIDAsync(System.Guid id) {
            return base.Channel.GetDeliveryItemByDeliveryIDAsync(id);
        }
        
        public PMSClient.MainService.DcDeliveryItem[] GetDeliveryItems(int skip, int take, string productid, string composition) {
            return base.Channel.GetDeliveryItems(skip, take, productid, composition);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcDeliveryItem[]> GetDeliveryItemsAsync(int skip, int take, string productid, string composition) {
            return base.Channel.GetDeliveryItemsAsync(skip, take, productid, composition);
        }
        
        public int GetDeliveryItemsCount(string productid, string composition) {
            return base.Channel.GetDeliveryItemsCount(productid, composition);
        }
        
        public System.Threading.Tasks.Task<int> GetDeliveryItemsCountAsync(string productid, string composition) {
            return base.Channel.GetDeliveryItemsCountAsync(productid, composition);
        }
        
        public PMSClient.MainService.DcDeliveryItemExtra[] GetDeliveryItemExtra(int skip, int take, string productid, string composition, string customer) {
            return base.Channel.GetDeliveryItemExtra(skip, take, productid, composition, customer);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcDeliveryItemExtra[]> GetDeliveryItemExtraAsync(int skip, int take, string productid, string composition, string customer) {
            return base.Channel.GetDeliveryItemExtraAsync(skip, take, productid, composition, customer);
        }
        
        public int GetDeliveryItemExtraCount(string productid, string composition, string customer) {
            return base.Channel.GetDeliveryItemExtraCount(productid, composition, customer);
        }
        
        public System.Threading.Tasks.Task<int> GetDeliveryItemExtraCountAsync(string productid, string composition, string customer) {
            return base.Channel.GetDeliveryItemExtraCountAsync(productid, composition, customer);
        }
        
        public PMSClient.MainService.DcDeliveryItemExtra[] GetDeliveryItemExtraByYear(int skip, int take, int year) {
            return base.Channel.GetDeliveryItemExtraByYear(skip, take, year);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcDeliveryItemExtra[]> GetDeliveryItemExtraByYearAsync(int skip, int take, int year) {
            return base.Channel.GetDeliveryItemExtraByYearAsync(skip, take, year);
        }
        
        public int GetDeliveryItemExtraCountByYear(string productid, int year) {
            return base.Channel.GetDeliveryItemExtraCountByYear(productid, year);
        }
        
        public System.Threading.Tasks.Task<int> GetDeliveryItemExtraCountByYearAsync(string productid, int year) {
            return base.Channel.GetDeliveryItemExtraCountByYearAsync(productid, year);
        }
        
        public int AddDeliveryItem(PMSClient.MainService.DcDeliveryItem model) {
            return base.Channel.AddDeliveryItem(model);
        }
        
        public System.Threading.Tasks.Task<int> AddDeliveryItemAsync(PMSClient.MainService.DcDeliveryItem model) {
            return base.Channel.AddDeliveryItemAsync(model);
        }
        
        public int UpdateDeliveryItem(PMSClient.MainService.DcDeliveryItem model) {
            return base.Channel.UpdateDeliveryItem(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateDeliveryItemAsync(PMSClient.MainService.DcDeliveryItem model) {
            return base.Channel.UpdateDeliveryItemAsync(model);
        }
        
        public int AddDeliveryItemByUID(PMSClient.MainService.DcDeliveryItem model, string uid) {
            return base.Channel.AddDeliveryItemByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> AddDeliveryItemByUIDAsync(PMSClient.MainService.DcDeliveryItem model, string uid) {
            return base.Channel.AddDeliveryItemByUIDAsync(model, uid);
        }
        
        public int UpdateDeliveryItemByUID(PMSClient.MainService.DcDeliveryItem model, string uid) {
            return base.Channel.UpdateDeliveryItemByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateDeliveryItemByUIDAsync(PMSClient.MainService.DcDeliveryItem model, string uid) {
            return base.Channel.UpdateDeliveryItemByUIDAsync(model, uid);
        }
        
        public int DeleteDeliveryItem(System.Guid id) {
            return base.Channel.DeleteDeliveryItem(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteDeliveryItemAsync(System.Guid id) {
            return base.Channel.DeleteDeliveryItemAsync(id);
        }
        
        public PMSClient.MainService.DcDeliveryItem[] GetDeliveryItemByProductID(string productid) {
            return base.Channel.GetDeliveryItemByProductID(productid);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcDeliveryItem[]> GetDeliveryItemByProductIDAsync(string productid) {
            return base.Channel.GetDeliveryItemByProductIDAsync(productid);
        }
        
        public PMSClient.MainService.DcDelivery[] GetDeliveryUnFinished() {
            return base.Channel.GetDeliveryUnFinished();
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcDelivery[]> GetDeliveryUnFinishedAsync() {
            return base.Channel.GetDeliveryUnFinishedAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IPlateService")]
    public interface IPlateService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/GetPlates", ReplyAction="http://tempuri.org/IPlateService/GetPlatesResponse")]
        PMSClient.MainService.DcPlate[] GetPlates(int skip, int take, string platelot, string supplier, string printnumber, string dimension);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/GetPlates", ReplyAction="http://tempuri.org/IPlateService/GetPlatesResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcPlate[]> GetPlatesAsync(int skip, int take, string platelot, string supplier, string printnumber, string dimension);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/GetPlateCount", ReplyAction="http://tempuri.org/IPlateService/GetPlateCountResponse")]
        int GetPlateCount(string platelot, string supplier, string printnumber, string dimension);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/GetPlateCount", ReplyAction="http://tempuri.org/IPlateService/GetPlateCountResponse")]
        System.Threading.Tasks.Task<int> GetPlateCountAsync(string platelot, string supplier, string printnumber, string dimension);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/GetPlateUnCompleted", ReplyAction="http://tempuri.org/IPlateService/GetPlateUnCompletedResponse")]
        PMSClient.MainService.DcPlate[] GetPlateUnCompleted(int skip, int take, string platelot, string supplier, string printnumber, string dimension);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/GetPlateUnCompleted", ReplyAction="http://tempuri.org/IPlateService/GetPlateUnCompletedResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcPlate[]> GetPlateUnCompletedAsync(int skip, int take, string platelot, string supplier, string printnumber, string dimension);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/GetPlateCountUnCompleted", ReplyAction="http://tempuri.org/IPlateService/GetPlateCountUnCompletedResponse")]
        int GetPlateCountUnCompleted(string platelot, string supplier, string printnumber, string dimension);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/GetPlateCountUnCompleted", ReplyAction="http://tempuri.org/IPlateService/GetPlateCountUnCompletedResponse")]
        System.Threading.Tasks.Task<int> GetPlateCountUnCompletedAsync(string platelot, string supplier, string printnumber, string dimension);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/AddPlate", ReplyAction="http://tempuri.org/IPlateService/AddPlateResponse")]
        int AddPlate(PMSClient.MainService.DcPlate model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/AddPlate", ReplyAction="http://tempuri.org/IPlateService/AddPlateResponse")]
        System.Threading.Tasks.Task<int> AddPlateAsync(PMSClient.MainService.DcPlate model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/UpdatePlate", ReplyAction="http://tempuri.org/IPlateService/UpdatePlateResponse")]
        int UpdatePlate(PMSClient.MainService.DcPlate model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/UpdatePlate", ReplyAction="http://tempuri.org/IPlateService/UpdatePlateResponse")]
        System.Threading.Tasks.Task<int> UpdatePlateAsync(PMSClient.MainService.DcPlate model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/AddPlateByUID", ReplyAction="http://tempuri.org/IPlateService/AddPlateByUIDResponse")]
        int AddPlateByUID(PMSClient.MainService.DcPlate model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/AddPlateByUID", ReplyAction="http://tempuri.org/IPlateService/AddPlateByUIDResponse")]
        System.Threading.Tasks.Task<int> AddPlateByUIDAsync(PMSClient.MainService.DcPlate model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/UpdatePlateByUID", ReplyAction="http://tempuri.org/IPlateService/UpdatePlateByUIDResponse")]
        int UpdatePlateByUID(PMSClient.MainService.DcPlate model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/UpdatePlateByUID", ReplyAction="http://tempuri.org/IPlateService/UpdatePlateByUIDResponse")]
        System.Threading.Tasks.Task<int> UpdatePlateByUIDAsync(PMSClient.MainService.DcPlate model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/DeletePlate", ReplyAction="http://tempuri.org/IPlateService/DeletePlateResponse")]
        int DeletePlate(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/DeletePlate", ReplyAction="http://tempuri.org/IPlateService/DeletePlateResponse")]
        System.Threading.Tasks.Task<int> DeletePlateAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/GetPlateByPlateID", ReplyAction="http://tempuri.org/IPlateService/GetPlateByPlateIDResponse")]
        PMSClient.MainService.DcPlate[] GetPlateByPlateID(string platelot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlateService/GetPlateByPlateID", ReplyAction="http://tempuri.org/IPlateService/GetPlateByPlateIDResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcPlate[]> GetPlateByPlateIDAsync(string platelot);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlateServiceChannel : PMSClient.MainService.IPlateService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlateServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IPlateService>, PMSClient.MainService.IPlateService {
        
        public PlateServiceClient() {
        }
        
        public PlateServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlateServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlateServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlateServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcPlate[] GetPlates(int skip, int take, string platelot, string supplier, string printnumber, string dimension) {
            return base.Channel.GetPlates(skip, take, platelot, supplier, printnumber, dimension);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcPlate[]> GetPlatesAsync(int skip, int take, string platelot, string supplier, string printnumber, string dimension) {
            return base.Channel.GetPlatesAsync(skip, take, platelot, supplier, printnumber, dimension);
        }
        
        public int GetPlateCount(string platelot, string supplier, string printnumber, string dimension) {
            return base.Channel.GetPlateCount(platelot, supplier, printnumber, dimension);
        }
        
        public System.Threading.Tasks.Task<int> GetPlateCountAsync(string platelot, string supplier, string printnumber, string dimension) {
            return base.Channel.GetPlateCountAsync(platelot, supplier, printnumber, dimension);
        }
        
        public PMSClient.MainService.DcPlate[] GetPlateUnCompleted(int skip, int take, string platelot, string supplier, string printnumber, string dimension) {
            return base.Channel.GetPlateUnCompleted(skip, take, platelot, supplier, printnumber, dimension);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcPlate[]> GetPlateUnCompletedAsync(int skip, int take, string platelot, string supplier, string printnumber, string dimension) {
            return base.Channel.GetPlateUnCompletedAsync(skip, take, platelot, supplier, printnumber, dimension);
        }
        
        public int GetPlateCountUnCompleted(string platelot, string supplier, string printnumber, string dimension) {
            return base.Channel.GetPlateCountUnCompleted(platelot, supplier, printnumber, dimension);
        }
        
        public System.Threading.Tasks.Task<int> GetPlateCountUnCompletedAsync(string platelot, string supplier, string printnumber, string dimension) {
            return base.Channel.GetPlateCountUnCompletedAsync(platelot, supplier, printnumber, dimension);
        }
        
        public int AddPlate(PMSClient.MainService.DcPlate model) {
            return base.Channel.AddPlate(model);
        }
        
        public System.Threading.Tasks.Task<int> AddPlateAsync(PMSClient.MainService.DcPlate model) {
            return base.Channel.AddPlateAsync(model);
        }
        
        public int UpdatePlate(PMSClient.MainService.DcPlate model) {
            return base.Channel.UpdatePlate(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePlateAsync(PMSClient.MainService.DcPlate model) {
            return base.Channel.UpdatePlateAsync(model);
        }
        
        public int AddPlateByUID(PMSClient.MainService.DcPlate model, string uid) {
            return base.Channel.AddPlateByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> AddPlateByUIDAsync(PMSClient.MainService.DcPlate model, string uid) {
            return base.Channel.AddPlateByUIDAsync(model, uid);
        }
        
        public int UpdatePlateByUID(PMSClient.MainService.DcPlate model, string uid) {
            return base.Channel.UpdatePlateByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePlateByUIDAsync(PMSClient.MainService.DcPlate model, string uid) {
            return base.Channel.UpdatePlateByUIDAsync(model, uid);
        }
        
        public int DeletePlate(System.Guid id) {
            return base.Channel.DeletePlate(id);
        }
        
        public System.Threading.Tasks.Task<int> DeletePlateAsync(System.Guid id) {
            return base.Channel.DeletePlateAsync(id);
        }
        
        public PMSClient.MainService.DcPlate[] GetPlateByPlateID(string platelot) {
            return base.Channel.GetPlateByPlateID(platelot);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcPlate[]> GetPlateByPlateIDAsync(string platelot) {
            return base.Channel.GetPlateByPlateIDAsync(platelot);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IProductService")]
    public interface IProductService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProducts", ReplyAction="http://tempuri.org/IProductService/GetProductsResponse")]
        PMSClient.MainService.DcProduct[] GetProducts(int skip, int take, string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProducts", ReplyAction="http://tempuri.org/IProductService/GetProductsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcProduct[]> GetProductsAsync(int skip, int take, string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductCount", ReplyAction="http://tempuri.org/IProductService/GetProductCountResponse")]
        int GetProductCount(string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductCount", ReplyAction="http://tempuri.org/IProductService/GetProductCountResponse")]
        System.Threading.Tasks.Task<int> GetProductCountAsync(string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductUnCompleted", ReplyAction="http://tempuri.org/IProductService/GetProductUnCompletedResponse")]
        PMSClient.MainService.DcProduct[] GetProductUnCompleted(int skip, int take, string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductUnCompleted", ReplyAction="http://tempuri.org/IProductService/GetProductUnCompletedResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcProduct[]> GetProductUnCompletedAsync(int skip, int take, string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductCountUnCompleted", ReplyAction="http://tempuri.org/IProductService/GetProductCountUnCompletedResponse")]
        int GetProductCountUnCompleted(string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductCountUnCompleted", ReplyAction="http://tempuri.org/IProductService/GetProductCountUnCompletedResponse")]
        System.Threading.Tasks.Task<int> GetProductCountUnCompletedAsync(string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductsByYear", ReplyAction="http://tempuri.org/IProductService/GetProductsByYearResponse")]
        PMSClient.MainService.DcProduct[] GetProductsByYear(int skip, int take, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductsByYear", ReplyAction="http://tempuri.org/IProductService/GetProductsByYearResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcProduct[]> GetProductsByYearAsync(int skip, int take, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductCountByYear", ReplyAction="http://tempuri.org/IProductService/GetProductCountByYearResponse")]
        int GetProductCountByYear(string productid, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductCountByYear", ReplyAction="http://tempuri.org/IProductService/GetProductCountByYearResponse")]
        System.Threading.Tasks.Task<int> GetProductCountByYearAsync(string productid, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/AddProduct", ReplyAction="http://tempuri.org/IProductService/AddProductResponse")]
        int AddProduct(PMSClient.MainService.DcProduct model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/AddProduct", ReplyAction="http://tempuri.org/IProductService/AddProductResponse")]
        System.Threading.Tasks.Task<int> AddProductAsync(PMSClient.MainService.DcProduct model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateProduct", ReplyAction="http://tempuri.org/IProductService/UpdateProductResponse")]
        int UpdateProduct(PMSClient.MainService.DcProduct model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateProduct", ReplyAction="http://tempuri.org/IProductService/UpdateProductResponse")]
        System.Threading.Tasks.Task<int> UpdateProductAsync(PMSClient.MainService.DcProduct model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/AddProductByUID", ReplyAction="http://tempuri.org/IProductService/AddProductByUIDResponse")]
        int AddProductByUID(PMSClient.MainService.DcProduct model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/AddProductByUID", ReplyAction="http://tempuri.org/IProductService/AddProductByUIDResponse")]
        System.Threading.Tasks.Task<int> AddProductByUIDAsync(PMSClient.MainService.DcProduct model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateProductByUID", ReplyAction="http://tempuri.org/IProductService/UpdateProductByUIDResponse")]
        int UpdateProductByUID(PMSClient.MainService.DcProduct model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateProductByUID", ReplyAction="http://tempuri.org/IProductService/UpdateProductByUIDResponse")]
        System.Threading.Tasks.Task<int> UpdateProductByUIDAsync(PMSClient.MainService.DcProduct model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteProduct", ReplyAction="http://tempuri.org/IProductService/DeleteProductResponse")]
        int DeleteProduct(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteProduct", ReplyAction="http://tempuri.org/IProductService/DeleteProductResponse")]
        System.Threading.Tasks.Task<int> DeleteProductAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductByProductID", ReplyAction="http://tempuri.org/IProductService/GetProductByProductIDResponse")]
        PMSClient.MainService.DcProduct[] GetProductByProductID(string productid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductByProductID", ReplyAction="http://tempuri.org/IProductService/GetProductByProductIDResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcProduct[]> GetProductByProductIDAsync(string productid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProductServiceChannel : PMSClient.MainService.IProductService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IProductService>, PMSClient.MainService.IProductService {
        
        public ProductServiceClient() {
        }
        
        public ProductServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcProduct[] GetProducts(int skip, int take, string productid, string composition) {
            return base.Channel.GetProducts(skip, take, productid, composition);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcProduct[]> GetProductsAsync(int skip, int take, string productid, string composition) {
            return base.Channel.GetProductsAsync(skip, take, productid, composition);
        }
        
        public int GetProductCount(string productid, string composition) {
            return base.Channel.GetProductCount(productid, composition);
        }
        
        public System.Threading.Tasks.Task<int> GetProductCountAsync(string productid, string composition) {
            return base.Channel.GetProductCountAsync(productid, composition);
        }
        
        public PMSClient.MainService.DcProduct[] GetProductUnCompleted(int skip, int take, string productid, string composition) {
            return base.Channel.GetProductUnCompleted(skip, take, productid, composition);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcProduct[]> GetProductUnCompletedAsync(int skip, int take, string productid, string composition) {
            return base.Channel.GetProductUnCompletedAsync(skip, take, productid, composition);
        }
        
        public int GetProductCountUnCompleted(string productid, string composition) {
            return base.Channel.GetProductCountUnCompleted(productid, composition);
        }
        
        public System.Threading.Tasks.Task<int> GetProductCountUnCompletedAsync(string productid, string composition) {
            return base.Channel.GetProductCountUnCompletedAsync(productid, composition);
        }
        
        public PMSClient.MainService.DcProduct[] GetProductsByYear(int skip, int take, int year) {
            return base.Channel.GetProductsByYear(skip, take, year);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcProduct[]> GetProductsByYearAsync(int skip, int take, int year) {
            return base.Channel.GetProductsByYearAsync(skip, take, year);
        }
        
        public int GetProductCountByYear(string productid, int year) {
            return base.Channel.GetProductCountByYear(productid, year);
        }
        
        public System.Threading.Tasks.Task<int> GetProductCountByYearAsync(string productid, int year) {
            return base.Channel.GetProductCountByYearAsync(productid, year);
        }
        
        public int AddProduct(PMSClient.MainService.DcProduct model) {
            return base.Channel.AddProduct(model);
        }
        
        public System.Threading.Tasks.Task<int> AddProductAsync(PMSClient.MainService.DcProduct model) {
            return base.Channel.AddProductAsync(model);
        }
        
        public int UpdateProduct(PMSClient.MainService.DcProduct model) {
            return base.Channel.UpdateProduct(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateProductAsync(PMSClient.MainService.DcProduct model) {
            return base.Channel.UpdateProductAsync(model);
        }
        
        public int AddProductByUID(PMSClient.MainService.DcProduct model, string uid) {
            return base.Channel.AddProductByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> AddProductByUIDAsync(PMSClient.MainService.DcProduct model, string uid) {
            return base.Channel.AddProductByUIDAsync(model, uid);
        }
        
        public int UpdateProductByUID(PMSClient.MainService.DcProduct model, string uid) {
            return base.Channel.UpdateProductByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateProductByUIDAsync(PMSClient.MainService.DcProduct model, string uid) {
            return base.Channel.UpdateProductByUIDAsync(model, uid);
        }
        
        public int DeleteProduct(System.Guid id) {
            return base.Channel.DeleteProduct(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteProductAsync(System.Guid id) {
            return base.Channel.DeleteProductAsync(id);
        }
        
        public PMSClient.MainService.DcProduct[] GetProductByProductID(string productid) {
            return base.Channel.GetProductByProductID(productid);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcProduct[]> GetProductByProductIDAsync(string productid) {
            return base.Channel.GetProductByProductIDAsync(productid);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IRecordTestService")]
    public interface IRecordTestService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestBySearchInPage", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestBySearchInPageResponse")]
        PMSClient.MainService.DcRecordTest[] GetRecordTestBySearchInPage(int skip, int take, string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestBySearchInPage", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestBySearchInPageResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordTest[]> GetRecordTestBySearchInPageAsync(int skip, int take, string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestCountBySearchInPage", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestCountBySearchInPageResponse")]
        int GetRecordTestCountBySearchInPage(string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestCountBySearchInPage", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestCountBySearchInPageResponse")]
        System.Threading.Tasks.Task<int> GetRecordTestCountBySearchInPageAsync(string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestChecked", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestCheckedResponse")]
        PMSClient.MainService.DcRecordTest[] GetRecordTestChecked(int skip, int take, string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestChecked", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestCheckedResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordTest[]> GetRecordTestCheckedAsync(int skip, int take, string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestCountChecked", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestCountCheckedResponse")]
        int GetRecordTestCountChecked(string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestCountChecked", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestCountCheckedResponse")]
        System.Threading.Tasks.Task<int> GetRecordTestCountCheckedAsync(string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/AddRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/AddRecordTestResponse")]
        int AddRecordTest(PMSClient.MainService.DcRecordTest model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/AddRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/AddRecordTestResponse")]
        System.Threading.Tasks.Task<int> AddRecordTestAsync(PMSClient.MainService.DcRecordTest model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/AddRecordTestByUID", ReplyAction="http://tempuri.org/IRecordTestService/AddRecordTestByUIDResponse")]
        int AddRecordTestByUID(PMSClient.MainService.DcRecordTest model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/AddRecordTestByUID", ReplyAction="http://tempuri.org/IRecordTestService/AddRecordTestByUIDResponse")]
        System.Threading.Tasks.Task<int> AddRecordTestByUIDAsync(PMSClient.MainService.DcRecordTest model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/UpdateRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/UpdateRecordTestResponse")]
        int UpdateRecordTest(PMSClient.MainService.DcRecordTest model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/UpdateRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/UpdateRecordTestResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordTestAsync(PMSClient.MainService.DcRecordTest model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/UpdateRecordTestByUID", ReplyAction="http://tempuri.org/IRecordTestService/UpdateRecordTestByUIDResponse")]
        int UpdateRecordTestByUID(PMSClient.MainService.DcRecordTest model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/UpdateRecordTestByUID", ReplyAction="http://tempuri.org/IRecordTestService/UpdateRecordTestByUIDResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordTestByUIDAsync(PMSClient.MainService.DcRecordTest model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/DeleteRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/DeleteRecordTestResponse")]
        int DeleteRecordTest(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/DeleteRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/DeleteRecordTestResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordTestAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestByProductID", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestByProductIDResponse")]
        PMSClient.MainService.DcRecordTest[] GetRecordTestByProductID(string productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestByProductID", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestByProductIDResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordTest[]> GetRecordTestByProductIDAsync(string productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetUnFinishedRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/GetUnFinishedRecordTestResponse")]
        PMSClient.MainService.DcRecordTest[] GetUnFinishedRecordTest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetUnFinishedRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/GetUnFinishedRecordTestResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordTest[]> GetUnFinishedRecordTestAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordTestServiceChannel : PMSClient.MainService.IRecordTestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordTestServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IRecordTestService>, PMSClient.MainService.IRecordTestService {
        
        public RecordTestServiceClient() {
        }
        
        public RecordTestServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordTestServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordTestServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordTestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcRecordTest[] GetRecordTestBySearchInPage(int skip, int take, string productId, string compositionStd) {
            return base.Channel.GetRecordTestBySearchInPage(skip, take, productId, compositionStd);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordTest[]> GetRecordTestBySearchInPageAsync(int skip, int take, string productId, string compositionStd) {
            return base.Channel.GetRecordTestBySearchInPageAsync(skip, take, productId, compositionStd);
        }
        
        public int GetRecordTestCountBySearchInPage(string productId, string compositionStd) {
            return base.Channel.GetRecordTestCountBySearchInPage(productId, compositionStd);
        }
        
        public System.Threading.Tasks.Task<int> GetRecordTestCountBySearchInPageAsync(string productId, string compositionStd) {
            return base.Channel.GetRecordTestCountBySearchInPageAsync(productId, compositionStd);
        }
        
        public PMSClient.MainService.DcRecordTest[] GetRecordTestChecked(int skip, int take, string productId, string compositionStd) {
            return base.Channel.GetRecordTestChecked(skip, take, productId, compositionStd);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordTest[]> GetRecordTestCheckedAsync(int skip, int take, string productId, string compositionStd) {
            return base.Channel.GetRecordTestCheckedAsync(skip, take, productId, compositionStd);
        }
        
        public int GetRecordTestCountChecked(string productId, string compositionStd) {
            return base.Channel.GetRecordTestCountChecked(productId, compositionStd);
        }
        
        public System.Threading.Tasks.Task<int> GetRecordTestCountCheckedAsync(string productId, string compositionStd) {
            return base.Channel.GetRecordTestCountCheckedAsync(productId, compositionStd);
        }
        
        public int AddRecordTest(PMSClient.MainService.DcRecordTest model) {
            return base.Channel.AddRecordTest(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordTestAsync(PMSClient.MainService.DcRecordTest model) {
            return base.Channel.AddRecordTestAsync(model);
        }
        
        public int AddRecordTestByUID(PMSClient.MainService.DcRecordTest model, string uid) {
            return base.Channel.AddRecordTestByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordTestByUIDAsync(PMSClient.MainService.DcRecordTest model, string uid) {
            return base.Channel.AddRecordTestByUIDAsync(model, uid);
        }
        
        public int UpdateRecordTest(PMSClient.MainService.DcRecordTest model) {
            return base.Channel.UpdateRecordTest(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordTestAsync(PMSClient.MainService.DcRecordTest model) {
            return base.Channel.UpdateRecordTestAsync(model);
        }
        
        public int UpdateRecordTestByUID(PMSClient.MainService.DcRecordTest model, string uid) {
            return base.Channel.UpdateRecordTestByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordTestByUIDAsync(PMSClient.MainService.DcRecordTest model, string uid) {
            return base.Channel.UpdateRecordTestByUIDAsync(model, uid);
        }
        
        public int DeleteRecordTest(System.Guid id) {
            return base.Channel.DeleteRecordTest(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordTestAsync(System.Guid id) {
            return base.Channel.DeleteRecordTestAsync(id);
        }
        
        public PMSClient.MainService.DcRecordTest[] GetRecordTestByProductID(string productId) {
            return base.Channel.GetRecordTestByProductID(productId);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordTest[]> GetRecordTestByProductIDAsync(string productId) {
            return base.Channel.GetRecordTestByProductIDAsync(productId);
        }
        
        public PMSClient.MainService.DcRecordTest[] GetUnFinishedRecordTest() {
            return base.Channel.GetUnFinishedRecordTest();
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordTest[]> GetUnFinishedRecordTestAsync() {
            return base.Channel.GetUnFinishedRecordTestAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IRecordVHPService")]
    public interface IRecordVHPService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/GetRecordVHP", ReplyAction="http://tempuri.org/IRecordVHPService/GetRecordVHPResponse")]
        PMSClient.MainService.DcRecordVHP[] GetRecordVHP(System.Guid planVHPId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/GetRecordVHP", ReplyAction="http://tempuri.org/IRecordVHPService/GetRecordVHPResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordVHP[]> GetRecordVHPAsync(System.Guid planVHPId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/GetRecordVHPCount", ReplyAction="http://tempuri.org/IRecordVHPService/GetRecordVHPCountResponse")]
        int GetRecordVHPCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/GetRecordVHPCount", ReplyAction="http://tempuri.org/IRecordVHPService/GetRecordVHPCountResponse")]
        System.Threading.Tasks.Task<int> GetRecordVHPCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/AddRecordVHP", ReplyAction="http://tempuri.org/IRecordVHPService/AddRecordVHPResponse")]
        int AddRecordVHP(PMSClient.MainService.DcRecordVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/AddRecordVHP", ReplyAction="http://tempuri.org/IRecordVHPService/AddRecordVHPResponse")]
        System.Threading.Tasks.Task<int> AddRecordVHPAsync(PMSClient.MainService.DcRecordVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/UpdateReocrdVHP", ReplyAction="http://tempuri.org/IRecordVHPService/UpdateReocrdVHPResponse")]
        int UpdateReocrdVHP(PMSClient.MainService.DcRecordVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/UpdateReocrdVHP", ReplyAction="http://tempuri.org/IRecordVHPService/UpdateReocrdVHPResponse")]
        System.Threading.Tasks.Task<int> UpdateReocrdVHPAsync(PMSClient.MainService.DcRecordVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/AddRecordVHPByUID", ReplyAction="http://tempuri.org/IRecordVHPService/AddRecordVHPByUIDResponse")]
        int AddRecordVHPByUID(PMSClient.MainService.DcRecordVHP model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/AddRecordVHPByUID", ReplyAction="http://tempuri.org/IRecordVHPService/AddRecordVHPByUIDResponse")]
        System.Threading.Tasks.Task<int> AddRecordVHPByUIDAsync(PMSClient.MainService.DcRecordVHP model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/UpdateRecordVHPByUID", ReplyAction="http://tempuri.org/IRecordVHPService/UpdateRecordVHPByUIDResponse")]
        int UpdateRecordVHPByUID(PMSClient.MainService.DcRecordVHP model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/UpdateRecordVHPByUID", ReplyAction="http://tempuri.org/IRecordVHPService/UpdateRecordVHPByUIDResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordVHPByUIDAsync(PMSClient.MainService.DcRecordVHP model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/DeleteRecordVHP", ReplyAction="http://tempuri.org/IRecordVHPService/DeleteRecordVHPResponse")]
        int DeleteRecordVHP(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/DeleteRecordVHP", ReplyAction="http://tempuri.org/IRecordVHPService/DeleteRecordVHPResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordVHPAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordVHPServiceChannel : PMSClient.MainService.IRecordVHPService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordVHPServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IRecordVHPService>, PMSClient.MainService.IRecordVHPService {
        
        public RecordVHPServiceClient() {
        }
        
        public RecordVHPServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordVHPServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordVHPServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordVHPServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcRecordVHP[] GetRecordVHP(System.Guid planVHPId) {
            return base.Channel.GetRecordVHP(planVHPId);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordVHP[]> GetRecordVHPAsync(System.Guid planVHPId) {
            return base.Channel.GetRecordVHPAsync(planVHPId);
        }
        
        public int GetRecordVHPCount() {
            return base.Channel.GetRecordVHPCount();
        }
        
        public System.Threading.Tasks.Task<int> GetRecordVHPCountAsync() {
            return base.Channel.GetRecordVHPCountAsync();
        }
        
        public int AddRecordVHP(PMSClient.MainService.DcRecordVHP model) {
            return base.Channel.AddRecordVHP(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordVHPAsync(PMSClient.MainService.DcRecordVHP model) {
            return base.Channel.AddRecordVHPAsync(model);
        }
        
        public int UpdateReocrdVHP(PMSClient.MainService.DcRecordVHP model) {
            return base.Channel.UpdateReocrdVHP(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateReocrdVHPAsync(PMSClient.MainService.DcRecordVHP model) {
            return base.Channel.UpdateReocrdVHPAsync(model);
        }
        
        public int AddRecordVHPByUID(PMSClient.MainService.DcRecordVHP model, string uid) {
            return base.Channel.AddRecordVHPByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordVHPByUIDAsync(PMSClient.MainService.DcRecordVHP model, string uid) {
            return base.Channel.AddRecordVHPByUIDAsync(model, uid);
        }
        
        public int UpdateRecordVHPByUID(PMSClient.MainService.DcRecordVHP model, string uid) {
            return base.Channel.UpdateRecordVHPByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordVHPByUIDAsync(PMSClient.MainService.DcRecordVHP model, string uid) {
            return base.Channel.UpdateRecordVHPByUIDAsync(model, uid);
        }
        
        public int DeleteRecordVHP(System.Guid id) {
            return base.Channel.DeleteRecordVHP(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordVHPAsync(System.Guid id) {
            return base.Channel.DeleteRecordVHPAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IRecordMillingService")]
    public interface IRecordMillingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillings", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingsResponse")]
        PMSClient.MainService.DcRecordMilling[] GetRecordMillings(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillings", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordMilling[]> GetRecordMillingsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingCount", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingCountResponse")]
        int GetRecordMillingCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingCount", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingCountResponse")]
        System.Threading.Tasks.Task<int> GetRecordMillingCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingsByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingsByVHPPlanLotResponse")]
        PMSClient.MainService.DcRecordMilling[] GetRecordMillingsByVHPPlanLot(int skip, int take, string vhpplanlot, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingsByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingsByVHPPlanLotResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordMilling[]> GetRecordMillingsByVHPPlanLotAsync(int skip, int take, string vhpplanlot, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingCountByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingCountByVHPPlanLotRespons" +
            "e")]
        int GetRecordMillingCountByVHPPlanLot(string vhpplanlot, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingCountByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingCountByVHPPlanLotRespons" +
            "e")]
        System.Threading.Tasks.Task<int> GetRecordMillingCountByVHPPlanLotAsync(string vhpplanlot, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingByMaterialType", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingByMaterialTypeResponse")]
        PMSClient.MainService.DcRecordMilling[] GetRecordMillingByMaterialType(string materialType, int topCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingByMaterialType", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingByMaterialTypeResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordMilling[]> GetRecordMillingByMaterialTypeAsync(string materialType, int topCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/AddRecordMilling", ReplyAction="http://tempuri.org/IRecordMillingService/AddRecordMillingResponse")]
        int AddRecordMilling(PMSClient.MainService.DcRecordMilling model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/AddRecordMilling", ReplyAction="http://tempuri.org/IRecordMillingService/AddRecordMillingResponse")]
        System.Threading.Tasks.Task<int> AddRecordMillingAsync(PMSClient.MainService.DcRecordMilling model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/UpdateRecordMilling", ReplyAction="http://tempuri.org/IRecordMillingService/UpdateRecordMillingResponse")]
        int UpdateRecordMilling(PMSClient.MainService.DcRecordMilling model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/UpdateRecordMilling", ReplyAction="http://tempuri.org/IRecordMillingService/UpdateRecordMillingResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordMillingAsync(PMSClient.MainService.DcRecordMilling model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/AddRecordMillingByUID", ReplyAction="http://tempuri.org/IRecordMillingService/AddRecordMillingByUIDResponse")]
        int AddRecordMillingByUID(PMSClient.MainService.DcRecordMilling model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/AddRecordMillingByUID", ReplyAction="http://tempuri.org/IRecordMillingService/AddRecordMillingByUIDResponse")]
        System.Threading.Tasks.Task<int> AddRecordMillingByUIDAsync(PMSClient.MainService.DcRecordMilling model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/UpdateRecordMillingByUID", ReplyAction="http://tempuri.org/IRecordMillingService/UpdateRecordMillingByUIDResponse")]
        int UpdateRecordMillingByUID(PMSClient.MainService.DcRecordMilling model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/UpdateRecordMillingByUID", ReplyAction="http://tempuri.org/IRecordMillingService/UpdateRecordMillingByUIDResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordMillingByUIDAsync(PMSClient.MainService.DcRecordMilling model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/DeleteRecordMilling", ReplyAction="http://tempuri.org/IRecordMillingService/DeleteRecordMillingResponse")]
        int DeleteRecordMilling(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/DeleteRecordMilling", ReplyAction="http://tempuri.org/IRecordMillingService/DeleteRecordMillingResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordMillingAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetAllPowderWeight", ReplyAction="http://tempuri.org/IRecordMillingService/GetAllPowderWeightResponse")]
        double GetAllPowderWeight();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetAllPowderWeight", ReplyAction="http://tempuri.org/IRecordMillingService/GetAllPowderWeightResponse")]
        System.Threading.Tasks.Task<double> GetAllPowderWeightAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordMillingServiceChannel : PMSClient.MainService.IRecordMillingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordMillingServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IRecordMillingService>, PMSClient.MainService.IRecordMillingService {
        
        public RecordMillingServiceClient() {
        }
        
        public RecordMillingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordMillingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordMillingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordMillingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcRecordMilling[] GetRecordMillings(int skip, int take) {
            return base.Channel.GetRecordMillings(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordMilling[]> GetRecordMillingsAsync(int skip, int take) {
            return base.Channel.GetRecordMillingsAsync(skip, take);
        }
        
        public int GetRecordMillingCount() {
            return base.Channel.GetRecordMillingCount();
        }
        
        public System.Threading.Tasks.Task<int> GetRecordMillingCountAsync() {
            return base.Channel.GetRecordMillingCountAsync();
        }
        
        public PMSClient.MainService.DcRecordMilling[] GetRecordMillingsByVHPPlanLot(int skip, int take, string vhpplanlot, string composition) {
            return base.Channel.GetRecordMillingsByVHPPlanLot(skip, take, vhpplanlot, composition);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordMilling[]> GetRecordMillingsByVHPPlanLotAsync(int skip, int take, string vhpplanlot, string composition) {
            return base.Channel.GetRecordMillingsByVHPPlanLotAsync(skip, take, vhpplanlot, composition);
        }
        
        public int GetRecordMillingCountByVHPPlanLot(string vhpplanlot, string composition) {
            return base.Channel.GetRecordMillingCountByVHPPlanLot(vhpplanlot, composition);
        }
        
        public System.Threading.Tasks.Task<int> GetRecordMillingCountByVHPPlanLotAsync(string vhpplanlot, string composition) {
            return base.Channel.GetRecordMillingCountByVHPPlanLotAsync(vhpplanlot, composition);
        }
        
        public PMSClient.MainService.DcRecordMilling[] GetRecordMillingByMaterialType(string materialType, int topCount) {
            return base.Channel.GetRecordMillingByMaterialType(materialType, topCount);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordMilling[]> GetRecordMillingByMaterialTypeAsync(string materialType, int topCount) {
            return base.Channel.GetRecordMillingByMaterialTypeAsync(materialType, topCount);
        }
        
        public int AddRecordMilling(PMSClient.MainService.DcRecordMilling model) {
            return base.Channel.AddRecordMilling(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordMillingAsync(PMSClient.MainService.DcRecordMilling model) {
            return base.Channel.AddRecordMillingAsync(model);
        }
        
        public int UpdateRecordMilling(PMSClient.MainService.DcRecordMilling model) {
            return base.Channel.UpdateRecordMilling(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordMillingAsync(PMSClient.MainService.DcRecordMilling model) {
            return base.Channel.UpdateRecordMillingAsync(model);
        }
        
        public int AddRecordMillingByUID(PMSClient.MainService.DcRecordMilling model, string uid) {
            return base.Channel.AddRecordMillingByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordMillingByUIDAsync(PMSClient.MainService.DcRecordMilling model, string uid) {
            return base.Channel.AddRecordMillingByUIDAsync(model, uid);
        }
        
        public int UpdateRecordMillingByUID(PMSClient.MainService.DcRecordMilling model, string uid) {
            return base.Channel.UpdateRecordMillingByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordMillingByUIDAsync(PMSClient.MainService.DcRecordMilling model, string uid) {
            return base.Channel.UpdateRecordMillingByUIDAsync(model, uid);
        }
        
        public int DeleteRecordMilling(System.Guid id) {
            return base.Channel.DeleteRecordMilling(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordMillingAsync(System.Guid id) {
            return base.Channel.DeleteRecordMillingAsync(id);
        }
        
        public double GetAllPowderWeight() {
            return base.Channel.GetAllPowderWeight();
        }
        
        public System.Threading.Tasks.Task<double> GetAllPowderWeightAsync() {
            return base.Channel.GetAllPowderWeightAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IRecordMachineService")]
    public interface IRecordMachineService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachines", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachinesResponse")]
        PMSClient.MainService.DcRecordMachine[] GetRecordMachines(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachines", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachinesResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordMachine[]> GetRecordMachinesAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachineCount", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachineCountResponse")]
        int GetRecordMachineCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachineCount", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachineCountResponse")]
        System.Threading.Tasks.Task<int> GetRecordMachineCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachinesByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachinesByVHPPlanLotResponse")]
        PMSClient.MainService.DcRecordMachine[] GetRecordMachinesByVHPPlanLot(int skip, int take, string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachinesByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachinesByVHPPlanLotResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordMachine[]> GetRecordMachinesByVHPPlanLotAsync(int skip, int take, string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachineCountByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachineCountByVHPPlanLotRespons" +
            "e")]
        int GetRecordMachineCountByVHPPlanLot(string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachineCountByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachineCountByVHPPlanLotRespons" +
            "e")]
        System.Threading.Tasks.Task<int> GetRecordMachineCountByVHPPlanLotAsync(string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/AddRecordMachine", ReplyAction="http://tempuri.org/IRecordMachineService/AddRecordMachineResponse")]
        int AddRecordMachine(PMSClient.MainService.DcRecordMachine model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/AddRecordMachine", ReplyAction="http://tempuri.org/IRecordMachineService/AddRecordMachineResponse")]
        System.Threading.Tasks.Task<int> AddRecordMachineAsync(PMSClient.MainService.DcRecordMachine model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/UpdateRecordMachine", ReplyAction="http://tempuri.org/IRecordMachineService/UpdateRecordMachineResponse")]
        int UpdateRecordMachine(PMSClient.MainService.DcRecordMachine model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/UpdateRecordMachine", ReplyAction="http://tempuri.org/IRecordMachineService/UpdateRecordMachineResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordMachineAsync(PMSClient.MainService.DcRecordMachine model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/AddRecordMachineByUID", ReplyAction="http://tempuri.org/IRecordMachineService/AddRecordMachineByUIDResponse")]
        int AddRecordMachineByUID(PMSClient.MainService.DcRecordMachine model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/AddRecordMachineByUID", ReplyAction="http://tempuri.org/IRecordMachineService/AddRecordMachineByUIDResponse")]
        System.Threading.Tasks.Task<int> AddRecordMachineByUIDAsync(PMSClient.MainService.DcRecordMachine model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/UpdateRecordMachineByUID", ReplyAction="http://tempuri.org/IRecordMachineService/UpdateRecordMachineByUIDResponse")]
        int UpdateRecordMachineByUID(PMSClient.MainService.DcRecordMachine model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/UpdateRecordMachineByUID", ReplyAction="http://tempuri.org/IRecordMachineService/UpdateRecordMachineByUIDResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordMachineByUIDAsync(PMSClient.MainService.DcRecordMachine model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/DeleteRecordMachine", ReplyAction="http://tempuri.org/IRecordMachineService/DeleteRecordMachineResponse")]
        int DeleteRecordMachine(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/DeleteRecordMachine", ReplyAction="http://tempuri.org/IRecordMachineService/DeleteRecordMachineResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordMachineAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordMachineServiceChannel : PMSClient.MainService.IRecordMachineService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordMachineServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IRecordMachineService>, PMSClient.MainService.IRecordMachineService {
        
        public RecordMachineServiceClient() {
        }
        
        public RecordMachineServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordMachineServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordMachineServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordMachineServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcRecordMachine[] GetRecordMachines(int skip, int take) {
            return base.Channel.GetRecordMachines(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordMachine[]> GetRecordMachinesAsync(int skip, int take) {
            return base.Channel.GetRecordMachinesAsync(skip, take);
        }
        
        public int GetRecordMachineCount() {
            return base.Channel.GetRecordMachineCount();
        }
        
        public System.Threading.Tasks.Task<int> GetRecordMachineCountAsync() {
            return base.Channel.GetRecordMachineCountAsync();
        }
        
        public PMSClient.MainService.DcRecordMachine[] GetRecordMachinesByVHPPlanLot(int skip, int take, string vhpplanlot) {
            return base.Channel.GetRecordMachinesByVHPPlanLot(skip, take, vhpplanlot);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordMachine[]> GetRecordMachinesByVHPPlanLotAsync(int skip, int take, string vhpplanlot) {
            return base.Channel.GetRecordMachinesByVHPPlanLotAsync(skip, take, vhpplanlot);
        }
        
        public int GetRecordMachineCountByVHPPlanLot(string vhpplanlot) {
            return base.Channel.GetRecordMachineCountByVHPPlanLot(vhpplanlot);
        }
        
        public System.Threading.Tasks.Task<int> GetRecordMachineCountByVHPPlanLotAsync(string vhpplanlot) {
            return base.Channel.GetRecordMachineCountByVHPPlanLotAsync(vhpplanlot);
        }
        
        public int AddRecordMachine(PMSClient.MainService.DcRecordMachine model) {
            return base.Channel.AddRecordMachine(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordMachineAsync(PMSClient.MainService.DcRecordMachine model) {
            return base.Channel.AddRecordMachineAsync(model);
        }
        
        public int UpdateRecordMachine(PMSClient.MainService.DcRecordMachine model) {
            return base.Channel.UpdateRecordMachine(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordMachineAsync(PMSClient.MainService.DcRecordMachine model) {
            return base.Channel.UpdateRecordMachineAsync(model);
        }
        
        public int AddRecordMachineByUID(PMSClient.MainService.DcRecordMachine model, string uid) {
            return base.Channel.AddRecordMachineByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordMachineByUIDAsync(PMSClient.MainService.DcRecordMachine model, string uid) {
            return base.Channel.AddRecordMachineByUIDAsync(model, uid);
        }
        
        public int UpdateRecordMachineByUID(PMSClient.MainService.DcRecordMachine model, string uid) {
            return base.Channel.UpdateRecordMachineByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordMachineByUIDAsync(PMSClient.MainService.DcRecordMachine model, string uid) {
            return base.Channel.UpdateRecordMachineByUIDAsync(model, uid);
        }
        
        public int DeleteRecordMachine(System.Guid id) {
            return base.Channel.DeleteRecordMachine(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordMachineAsync(System.Guid id) {
            return base.Channel.DeleteRecordMachineAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IRecordDeMoldService")]
    public interface IRecordDeMoldService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMolds", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsResponse")]
        PMSClient.MainService.DcRecordDeMold[] GetRecordDeMolds(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMolds", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordDeMold[]> GetRecordDeMoldsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCount", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCountResponse")]
        int GetRecordDeMoldsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCount", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCountResponse")]
        System.Threading.Tasks.Task<int> GetRecordDeMoldsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsByVHPPlanLotResponse")]
        PMSClient.MainService.DcRecordDeMold[] GetRecordDeMoldsByVHPPlanLot(int skip, int take, string vhpplanlot, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsByVHPPlanLotResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordDeMold[]> GetRecordDeMoldsByVHPPlanLotAsync(int skip, int take, string vhpplanlot, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCountByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCountByVHPPlanLotResponse" +
            "")]
        int GetRecordDeMoldsCountByVHPPlanLot(string vhpplanlot, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCountByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCountByVHPPlanLotResponse" +
            "")]
        System.Threading.Tasks.Task<int> GetRecordDeMoldsCountByVHPPlanLotAsync(string vhpplanlot, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/AddRecordDeMold", ReplyAction="http://tempuri.org/IRecordDeMoldService/AddRecordDeMoldResponse")]
        int AddRecordDeMold(PMSClient.MainService.DcRecordDeMold model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/AddRecordDeMold", ReplyAction="http://tempuri.org/IRecordDeMoldService/AddRecordDeMoldResponse")]
        System.Threading.Tasks.Task<int> AddRecordDeMoldAsync(PMSClient.MainService.DcRecordDeMold model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/UpdateRecordDeMold", ReplyAction="http://tempuri.org/IRecordDeMoldService/UpdateRecordDeMoldResponse")]
        int UpdateRecordDeMold(PMSClient.MainService.DcRecordDeMold model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/UpdateRecordDeMold", ReplyAction="http://tempuri.org/IRecordDeMoldService/UpdateRecordDeMoldResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordDeMoldAsync(PMSClient.MainService.DcRecordDeMold model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/AddRecordDeMoldByUID", ReplyAction="http://tempuri.org/IRecordDeMoldService/AddRecordDeMoldByUIDResponse")]
        int AddRecordDeMoldByUID(PMSClient.MainService.DcRecordDeMold model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/AddRecordDeMoldByUID", ReplyAction="http://tempuri.org/IRecordDeMoldService/AddRecordDeMoldByUIDResponse")]
        System.Threading.Tasks.Task<int> AddRecordDeMoldByUIDAsync(PMSClient.MainService.DcRecordDeMold model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/UpdateRecordDeMoldByUID", ReplyAction="http://tempuri.org/IRecordDeMoldService/UpdateRecordDeMoldByUIDResponse")]
        int UpdateRecordDeMoldByUID(PMSClient.MainService.DcRecordDeMold model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/UpdateRecordDeMoldByUID", ReplyAction="http://tempuri.org/IRecordDeMoldService/UpdateRecordDeMoldByUIDResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordDeMoldByUIDAsync(PMSClient.MainService.DcRecordDeMold model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/DeleteRecordDeMold", ReplyAction="http://tempuri.org/IRecordDeMoldService/DeleteRecordDeMoldResponse")]
        int DeleteRecordDeMold(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/DeleteRecordDeMold", ReplyAction="http://tempuri.org/IRecordDeMoldService/DeleteRecordDeMoldResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordDeMoldAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordDeMoldServiceChannel : PMSClient.MainService.IRecordDeMoldService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordDeMoldServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IRecordDeMoldService>, PMSClient.MainService.IRecordDeMoldService {
        
        public RecordDeMoldServiceClient() {
        }
        
        public RecordDeMoldServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordDeMoldServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordDeMoldServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordDeMoldServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcRecordDeMold[] GetRecordDeMolds(int skip, int take) {
            return base.Channel.GetRecordDeMolds(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordDeMold[]> GetRecordDeMoldsAsync(int skip, int take) {
            return base.Channel.GetRecordDeMoldsAsync(skip, take);
        }
        
        public int GetRecordDeMoldsCount() {
            return base.Channel.GetRecordDeMoldsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetRecordDeMoldsCountAsync() {
            return base.Channel.GetRecordDeMoldsCountAsync();
        }
        
        public PMSClient.MainService.DcRecordDeMold[] GetRecordDeMoldsByVHPPlanLot(int skip, int take, string vhpplanlot, string composition) {
            return base.Channel.GetRecordDeMoldsByVHPPlanLot(skip, take, vhpplanlot, composition);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordDeMold[]> GetRecordDeMoldsByVHPPlanLotAsync(int skip, int take, string vhpplanlot, string composition) {
            return base.Channel.GetRecordDeMoldsByVHPPlanLotAsync(skip, take, vhpplanlot, composition);
        }
        
        public int GetRecordDeMoldsCountByVHPPlanLot(string vhpplanlot, string composition) {
            return base.Channel.GetRecordDeMoldsCountByVHPPlanLot(vhpplanlot, composition);
        }
        
        public System.Threading.Tasks.Task<int> GetRecordDeMoldsCountByVHPPlanLotAsync(string vhpplanlot, string composition) {
            return base.Channel.GetRecordDeMoldsCountByVHPPlanLotAsync(vhpplanlot, composition);
        }
        
        public int AddRecordDeMold(PMSClient.MainService.DcRecordDeMold model) {
            return base.Channel.AddRecordDeMold(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordDeMoldAsync(PMSClient.MainService.DcRecordDeMold model) {
            return base.Channel.AddRecordDeMoldAsync(model);
        }
        
        public int UpdateRecordDeMold(PMSClient.MainService.DcRecordDeMold model) {
            return base.Channel.UpdateRecordDeMold(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordDeMoldAsync(PMSClient.MainService.DcRecordDeMold model) {
            return base.Channel.UpdateRecordDeMoldAsync(model);
        }
        
        public int AddRecordDeMoldByUID(PMSClient.MainService.DcRecordDeMold model, string uid) {
            return base.Channel.AddRecordDeMoldByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordDeMoldByUIDAsync(PMSClient.MainService.DcRecordDeMold model, string uid) {
            return base.Channel.AddRecordDeMoldByUIDAsync(model, uid);
        }
        
        public int UpdateRecordDeMoldByUID(PMSClient.MainService.DcRecordDeMold model, string uid) {
            return base.Channel.UpdateRecordDeMoldByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordDeMoldByUIDAsync(PMSClient.MainService.DcRecordDeMold model, string uid) {
            return base.Channel.UpdateRecordDeMoldByUIDAsync(model, uid);
        }
        
        public int DeleteRecordDeMold(System.Guid id) {
            return base.Channel.DeleteRecordDeMold(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordDeMoldAsync(System.Guid id) {
            return base.Channel.DeleteRecordDeMoldAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IRecordBondingService")]
    public interface IRecordBondingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondings", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingsResponse")]
        PMSClient.MainService.DcRecordBonding[] GetRecordBondings(int skip, int take, string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondings", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordBonding[]> GetRecordBondingsAsync(int skip, int take, string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondingCount", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingCountResponse")]
        int GetRecordBondingCount(string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondingCount", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingCountResponse")]
        System.Threading.Tasks.Task<int> GetRecordBondingCountAsync(string productid, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondingsNew", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingsNewResponse")]
        PMSClient.MainService.DcRecordBonding[] GetRecordBondingsNew(int skip, int take, string productid, string composition, string platelot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondingsNew", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingsNewResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordBonding[]> GetRecordBondingsNewAsync(int skip, int take, string productid, string composition, string platelot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondingCountNew", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingCountNewResponse")]
        int GetRecordBondingCountNew(string productid, string composition, string platelot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondingCountNew", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingCountNewResponse")]
        System.Threading.Tasks.Task<int> GetRecordBondingCountNewAsync(string productid, string composition, string platelot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/AddRecordBongding", ReplyAction="http://tempuri.org/IRecordBondingService/AddRecordBongdingResponse")]
        int AddRecordBongding(PMSClient.MainService.DcRecordBonding model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/AddRecordBongding", ReplyAction="http://tempuri.org/IRecordBondingService/AddRecordBongdingResponse")]
        System.Threading.Tasks.Task<int> AddRecordBongdingAsync(PMSClient.MainService.DcRecordBonding model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/UpdateRecordBongding", ReplyAction="http://tempuri.org/IRecordBondingService/UpdateRecordBongdingResponse")]
        int UpdateRecordBongding(PMSClient.MainService.DcRecordBonding model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/UpdateRecordBongding", ReplyAction="http://tempuri.org/IRecordBondingService/UpdateRecordBongdingResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordBongdingAsync(PMSClient.MainService.DcRecordBonding model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/AddRecordBongdingByUID", ReplyAction="http://tempuri.org/IRecordBondingService/AddRecordBongdingByUIDResponse")]
        int AddRecordBongdingByUID(PMSClient.MainService.DcRecordBonding model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/AddRecordBongdingByUID", ReplyAction="http://tempuri.org/IRecordBondingService/AddRecordBongdingByUIDResponse")]
        System.Threading.Tasks.Task<int> AddRecordBongdingByUIDAsync(PMSClient.MainService.DcRecordBonding model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/UpdateRecordBongdingByUID", ReplyAction="http://tempuri.org/IRecordBondingService/UpdateRecordBongdingByUIDResponse")]
        int UpdateRecordBongdingByUID(PMSClient.MainService.DcRecordBonding model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/UpdateRecordBongdingByUID", ReplyAction="http://tempuri.org/IRecordBondingService/UpdateRecordBongdingByUIDResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordBongdingByUIDAsync(PMSClient.MainService.DcRecordBonding model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/DeleteRecordBongding", ReplyAction="http://tempuri.org/IRecordBondingService/DeleteRecordBongdingResponse")]
        int DeleteRecordBongding(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/DeleteRecordBongding", ReplyAction="http://tempuri.org/IRecordBondingService/DeleteRecordBongdingResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordBongdingAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetUnFinishedRecordBondings", ReplyAction="http://tempuri.org/IRecordBondingService/GetUnFinishedRecordBondingsResponse")]
        PMSClient.MainService.DcRecordBonding[] GetUnFinishedRecordBondings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetUnFinishedRecordBondings", ReplyAction="http://tempuri.org/IRecordBondingService/GetUnFinishedRecordBondingsResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordBonding[]> GetUnFinishedRecordBondingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondingByProductID", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingByProductIDResponse")]
        PMSClient.MainService.DcRecordBonding[] GetRecordBondingByProductID(string productid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondingByProductID", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingByProductIDResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcRecordBonding[]> GetRecordBondingByProductIDAsync(string productid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/SetAllUnFinsihToTempFinish", ReplyAction="http://tempuri.org/IRecordBondingService/SetAllUnFinsihToTempFinishResponse")]
        int SetAllUnFinsihToTempFinish();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/SetAllUnFinsihToTempFinish", ReplyAction="http://tempuri.org/IRecordBondingService/SetAllUnFinsihToTempFinishResponse")]
        System.Threading.Tasks.Task<int> SetAllUnFinsihToTempFinishAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/CheckPlateUsedTimes", ReplyAction="http://tempuri.org/IRecordBondingService/CheckPlateUsedTimesResponse")]
        int CheckPlateUsedTimes(string platelot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/CheckPlateUsedTimes", ReplyAction="http://tempuri.org/IRecordBondingService/CheckPlateUsedTimesResponse")]
        System.Threading.Tasks.Task<int> CheckPlateUsedTimesAsync(string platelot);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordBondingServiceChannel : PMSClient.MainService.IRecordBondingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordBondingServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IRecordBondingService>, PMSClient.MainService.IRecordBondingService {
        
        public RecordBondingServiceClient() {
        }
        
        public RecordBondingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordBondingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordBondingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordBondingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcRecordBonding[] GetRecordBondings(int skip, int take, string productid, string composition) {
            return base.Channel.GetRecordBondings(skip, take, productid, composition);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordBonding[]> GetRecordBondingsAsync(int skip, int take, string productid, string composition) {
            return base.Channel.GetRecordBondingsAsync(skip, take, productid, composition);
        }
        
        public int GetRecordBondingCount(string productid, string composition) {
            return base.Channel.GetRecordBondingCount(productid, composition);
        }
        
        public System.Threading.Tasks.Task<int> GetRecordBondingCountAsync(string productid, string composition) {
            return base.Channel.GetRecordBondingCountAsync(productid, composition);
        }
        
        public PMSClient.MainService.DcRecordBonding[] GetRecordBondingsNew(int skip, int take, string productid, string composition, string platelot) {
            return base.Channel.GetRecordBondingsNew(skip, take, productid, composition, platelot);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordBonding[]> GetRecordBondingsNewAsync(int skip, int take, string productid, string composition, string platelot) {
            return base.Channel.GetRecordBondingsNewAsync(skip, take, productid, composition, platelot);
        }
        
        public int GetRecordBondingCountNew(string productid, string composition, string platelot) {
            return base.Channel.GetRecordBondingCountNew(productid, composition, platelot);
        }
        
        public System.Threading.Tasks.Task<int> GetRecordBondingCountNewAsync(string productid, string composition, string platelot) {
            return base.Channel.GetRecordBondingCountNewAsync(productid, composition, platelot);
        }
        
        public int AddRecordBongding(PMSClient.MainService.DcRecordBonding model) {
            return base.Channel.AddRecordBongding(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordBongdingAsync(PMSClient.MainService.DcRecordBonding model) {
            return base.Channel.AddRecordBongdingAsync(model);
        }
        
        public int UpdateRecordBongding(PMSClient.MainService.DcRecordBonding model) {
            return base.Channel.UpdateRecordBongding(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordBongdingAsync(PMSClient.MainService.DcRecordBonding model) {
            return base.Channel.UpdateRecordBongdingAsync(model);
        }
        
        public int AddRecordBongdingByUID(PMSClient.MainService.DcRecordBonding model, string uid) {
            return base.Channel.AddRecordBongdingByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordBongdingByUIDAsync(PMSClient.MainService.DcRecordBonding model, string uid) {
            return base.Channel.AddRecordBongdingByUIDAsync(model, uid);
        }
        
        public int UpdateRecordBongdingByUID(PMSClient.MainService.DcRecordBonding model, string uid) {
            return base.Channel.UpdateRecordBongdingByUID(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordBongdingByUIDAsync(PMSClient.MainService.DcRecordBonding model, string uid) {
            return base.Channel.UpdateRecordBongdingByUIDAsync(model, uid);
        }
        
        public int DeleteRecordBongding(System.Guid id) {
            return base.Channel.DeleteRecordBongding(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordBongdingAsync(System.Guid id) {
            return base.Channel.DeleteRecordBongdingAsync(id);
        }
        
        public PMSClient.MainService.DcRecordBonding[] GetUnFinishedRecordBondings() {
            return base.Channel.GetUnFinishedRecordBondings();
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordBonding[]> GetUnFinishedRecordBondingsAsync() {
            return base.Channel.GetUnFinishedRecordBondingsAsync();
        }
        
        public PMSClient.MainService.DcRecordBonding[] GetRecordBondingByProductID(string productid) {
            return base.Channel.GetRecordBondingByProductID(productid);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcRecordBonding[]> GetRecordBondingByProductIDAsync(string productid) {
            return base.Channel.GetRecordBondingByProductIDAsync(productid);
        }
        
        public int SetAllUnFinsihToTempFinish() {
            return base.Channel.SetAllUnFinsihToTempFinish();
        }
        
        public System.Threading.Tasks.Task<int> SetAllUnFinsihToTempFinishAsync() {
            return base.Channel.SetAllUnFinsihToTempFinishAsync();
        }
        
        public int CheckPlateUsedTimes(string platelot) {
            return base.Channel.CheckPlateUsedTimes(platelot);
        }
        
        public System.Threading.Tasks.Task<int> CheckPlateUsedTimesAsync(string platelot) {
            return base.Channel.CheckPlateUsedTimesAsync(platelot);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IOutSourceService")]
    public interface IOutSourceService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutSourceService/GetOutSources", ReplyAction="http://tempuri.org/IOutSourceService/GetOutSourcesResponse")]
        PMSClient.MainService.DcOutSource[] GetOutSources(int s, int t, string orderlot, string ordername, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutSourceService/GetOutSources", ReplyAction="http://tempuri.org/IOutSourceService/GetOutSourcesResponse")]
        System.Threading.Tasks.Task<PMSClient.MainService.DcOutSource[]> GetOutSourcesAsync(int s, int t, string orderlot, string ordername, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutSourceService/GetOutSourcesCount", ReplyAction="http://tempuri.org/IOutSourceService/GetOutSourcesCountResponse")]
        int GetOutSourcesCount(string orderlot, string ordername, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutSourceService/GetOutSourcesCount", ReplyAction="http://tempuri.org/IOutSourceService/GetOutSourcesCountResponse")]
        System.Threading.Tasks.Task<int> GetOutSourcesCountAsync(string orderlot, string ordername, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutSourceService/AddOutSource", ReplyAction="http://tempuri.org/IOutSourceService/AddOutSourceResponse")]
        int AddOutSource(PMSClient.MainService.DcOutSource model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutSourceService/AddOutSource", ReplyAction="http://tempuri.org/IOutSourceService/AddOutSourceResponse")]
        System.Threading.Tasks.Task<int> AddOutSourceAsync(PMSClient.MainService.DcOutSource model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutSourceService/UpdateOutSource", ReplyAction="http://tempuri.org/IOutSourceService/UpdateOutSourceResponse")]
        int UpdateOutSource(PMSClient.MainService.DcOutSource model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutSourceService/UpdateOutSource", ReplyAction="http://tempuri.org/IOutSourceService/UpdateOutSourceResponse")]
        System.Threading.Tasks.Task<int> UpdateOutSourceAsync(PMSClient.MainService.DcOutSource model, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutSourceService/DeleteOutSource", ReplyAction="http://tempuri.org/IOutSourceService/DeleteOutSourceResponse")]
        int DeleteOutSource(System.Guid id, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOutSourceService/DeleteOutSource", ReplyAction="http://tempuri.org/IOutSourceService/DeleteOutSourceResponse")]
        System.Threading.Tasks.Task<int> DeleteOutSourceAsync(System.Guid id, string uid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOutSourceServiceChannel : PMSClient.MainService.IOutSourceService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OutSourceServiceClient : System.ServiceModel.ClientBase<PMSClient.MainService.IOutSourceService>, PMSClient.MainService.IOutSourceService {
        
        public OutSourceServiceClient() {
        }
        
        public OutSourceServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OutSourceServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OutSourceServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OutSourceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.MainService.DcOutSource[] GetOutSources(int s, int t, string orderlot, string ordername, string supplier) {
            return base.Channel.GetOutSources(s, t, orderlot, ordername, supplier);
        }
        
        public System.Threading.Tasks.Task<PMSClient.MainService.DcOutSource[]> GetOutSourcesAsync(int s, int t, string orderlot, string ordername, string supplier) {
            return base.Channel.GetOutSourcesAsync(s, t, orderlot, ordername, supplier);
        }
        
        public int GetOutSourcesCount(string orderlot, string ordername, string supplier) {
            return base.Channel.GetOutSourcesCount(orderlot, ordername, supplier);
        }
        
        public System.Threading.Tasks.Task<int> GetOutSourcesCountAsync(string orderlot, string ordername, string supplier) {
            return base.Channel.GetOutSourcesCountAsync(orderlot, ordername, supplier);
        }
        
        public int AddOutSource(PMSClient.MainService.DcOutSource model, string uid) {
            return base.Channel.AddOutSource(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> AddOutSourceAsync(PMSClient.MainService.DcOutSource model, string uid) {
            return base.Channel.AddOutSourceAsync(model, uid);
        }
        
        public int UpdateOutSource(PMSClient.MainService.DcOutSource model, string uid) {
            return base.Channel.UpdateOutSource(model, uid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateOutSourceAsync(PMSClient.MainService.DcOutSource model, string uid) {
            return base.Channel.UpdateOutSourceAsync(model, uid);
        }
        
        public int DeleteOutSource(System.Guid id, string uid) {
            return base.Channel.DeleteOutSource(id, uid);
        }
        
        public System.Threading.Tasks.Task<int> DeleteOutSourceAsync(System.Guid id, string uid) {
            return base.Channel.DeleteOutSourceAsync(id, uid);
        }
    }
}
