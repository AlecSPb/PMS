//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace PMSClient.Other {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRawMaterialSheet", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRawMaterialSheet : PMSClient.Other.DcModelBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GDMSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ICPOESField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSampleTakingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SampleRemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SampleTakingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StoreTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GDMS {
            get {
                return this.GDMSField;
            }
            set {
                if ((object.ReferenceEquals(this.GDMSField, value) != true)) {
                    this.GDMSField = value;
                    this.RaisePropertyChanged("GDMS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ICPOES {
            get {
                return this.ICPOESField;
            }
            set {
                if ((object.ReferenceEquals(this.ICPOESField, value) != true)) {
                    this.ICPOESField = value;
                    this.RaisePropertyChanged("ICPOES");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSampleTaking {
            get {
                return this.IsSampleTakingField;
            }
            set {
                if ((this.IsSampleTakingField.Equals(value) != true)) {
                    this.IsSampleTakingField = value;
                    this.RaisePropertyChanged("IsSampleTaking");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lot {
            get {
                return this.LotField;
            }
            set {
                if ((object.ReferenceEquals(this.LotField, value) != true)) {
                    this.LotField = value;
                    this.RaisePropertyChanged("Lot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SampleRemark {
            get {
                return this.SampleRemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.SampleRemarkField, value) != true)) {
                    this.SampleRemarkField = value;
                    this.RaisePropertyChanged("SampleRemark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SampleTakingTime {
            get {
                return this.SampleTakingTimeField;
            }
            set {
                if ((this.SampleTakingTimeField.Equals(value) != true)) {
                    this.SampleTakingTimeField = value;
                    this.RaisePropertyChanged("SampleTakingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StoreTime {
            get {
                return this.StoreTimeField;
            }
            set {
                if ((this.StoreTimeField.Equals(value) != true)) {
                    this.StoreTimeField = value;
                    this.RaisePropertyChanged("StoreTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Supplier {
            get {
                return this.SupplierField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierField, value) != true)) {
                    this.SupplierField = value;
                    this.RaisePropertyChanged("Supplier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcModelBase", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PMSClient.Other.DcRawMaterialSheet))]
    public partial class DcModelBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Other.IRawMaterialSheetService")]
    public interface IRawMaterialSheetService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRawMaterialSheetService/GetRawMaterialSheetAll", ReplyAction="http://tempuri.org/IRawMaterialSheetService/GetRawMaterialSheetAllResponse")]
        PMSClient.Other.DcRawMaterialSheet[] GetRawMaterialSheetAll(int s, int t, string lot, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRawMaterialSheetService/GetRawMaterialSheetAll", ReplyAction="http://tempuri.org/IRawMaterialSheetService/GetRawMaterialSheetAllResponse")]
        System.Threading.Tasks.Task<PMSClient.Other.DcRawMaterialSheet[]> GetRawMaterialSheetAllAsync(int s, int t, string lot, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRawMaterialSheetService/GetRawMaterialSheetAllCount", ReplyAction="http://tempuri.org/IRawMaterialSheetService/GetRawMaterialSheetAllCountResponse")]
        int GetRawMaterialSheetAllCount(string lot, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRawMaterialSheetService/GetRawMaterialSheetAllCount", ReplyAction="http://tempuri.org/IRawMaterialSheetService/GetRawMaterialSheetAllCountResponse")]
        System.Threading.Tasks.Task<int> GetRawMaterialSheetAllCountAsync(string lot, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRawMaterialSheetService/GetRawMaterialSheet", ReplyAction="http://tempuri.org/IRawMaterialSheetService/GetRawMaterialSheetResponse")]
        PMSClient.Other.DcRawMaterialSheet[] GetRawMaterialSheet(int s, int t, string lot, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRawMaterialSheetService/GetRawMaterialSheet", ReplyAction="http://tempuri.org/IRawMaterialSheetService/GetRawMaterialSheetResponse")]
        System.Threading.Tasks.Task<PMSClient.Other.DcRawMaterialSheet[]> GetRawMaterialSheetAsync(int s, int t, string lot, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRawMaterialSheetService/GetRawMaterialSheetCount", ReplyAction="http://tempuri.org/IRawMaterialSheetService/GetRawMaterialSheetCountResponse")]
        int GetRawMaterialSheetCount(string lot, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRawMaterialSheetService/GetRawMaterialSheetCount", ReplyAction="http://tempuri.org/IRawMaterialSheetService/GetRawMaterialSheetCountResponse")]
        System.Threading.Tasks.Task<int> GetRawMaterialSheetCountAsync(string lot, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRawMaterialSheetService/AddRawMaterialSheet", ReplyAction="http://tempuri.org/IRawMaterialSheetService/AddRawMaterialSheetResponse")]
        void AddRawMaterialSheet(PMSClient.Other.DcRawMaterialSheet model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRawMaterialSheetService/AddRawMaterialSheet", ReplyAction="http://tempuri.org/IRawMaterialSheetService/AddRawMaterialSheetResponse")]
        System.Threading.Tasks.Task AddRawMaterialSheetAsync(PMSClient.Other.DcRawMaterialSheet model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRawMaterialSheetService/UpdateRawMaterialSheet", ReplyAction="http://tempuri.org/IRawMaterialSheetService/UpdateRawMaterialSheetResponse")]
        void UpdateRawMaterialSheet(PMSClient.Other.DcRawMaterialSheet model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRawMaterialSheetService/UpdateRawMaterialSheet", ReplyAction="http://tempuri.org/IRawMaterialSheetService/UpdateRawMaterialSheetResponse")]
        System.Threading.Tasks.Task UpdateRawMaterialSheetAsync(PMSClient.Other.DcRawMaterialSheet model);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRawMaterialSheetServiceChannel : PMSClient.Other.IRawMaterialSheetService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RawMaterialSheetServiceClient : System.ServiceModel.ClientBase<PMSClient.Other.IRawMaterialSheetService>, PMSClient.Other.IRawMaterialSheetService {
        
        public RawMaterialSheetServiceClient() {
        }
        
        public RawMaterialSheetServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RawMaterialSheetServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RawMaterialSheetServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RawMaterialSheetServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.Other.DcRawMaterialSheet[] GetRawMaterialSheetAll(int s, int t, string lot, string composition) {
            return base.Channel.GetRawMaterialSheetAll(s, t, lot, composition);
        }
        
        public System.Threading.Tasks.Task<PMSClient.Other.DcRawMaterialSheet[]> GetRawMaterialSheetAllAsync(int s, int t, string lot, string composition) {
            return base.Channel.GetRawMaterialSheetAllAsync(s, t, lot, composition);
        }
        
        public int GetRawMaterialSheetAllCount(string lot, string composition) {
            return base.Channel.GetRawMaterialSheetAllCount(lot, composition);
        }
        
        public System.Threading.Tasks.Task<int> GetRawMaterialSheetAllCountAsync(string lot, string composition) {
            return base.Channel.GetRawMaterialSheetAllCountAsync(lot, composition);
        }
        
        public PMSClient.Other.DcRawMaterialSheet[] GetRawMaterialSheet(int s, int t, string lot, string composition) {
            return base.Channel.GetRawMaterialSheet(s, t, lot, composition);
        }
        
        public System.Threading.Tasks.Task<PMSClient.Other.DcRawMaterialSheet[]> GetRawMaterialSheetAsync(int s, int t, string lot, string composition) {
            return base.Channel.GetRawMaterialSheetAsync(s, t, lot, composition);
        }
        
        public int GetRawMaterialSheetCount(string lot, string composition) {
            return base.Channel.GetRawMaterialSheetCount(lot, composition);
        }
        
        public System.Threading.Tasks.Task<int> GetRawMaterialSheetCountAsync(string lot, string composition) {
            return base.Channel.GetRawMaterialSheetCountAsync(lot, composition);
        }
        
        public void AddRawMaterialSheet(PMSClient.Other.DcRawMaterialSheet model) {
            base.Channel.AddRawMaterialSheet(model);
        }
        
        public System.Threading.Tasks.Task AddRawMaterialSheetAsync(PMSClient.Other.DcRawMaterialSheet model) {
            return base.Channel.AddRawMaterialSheetAsync(model);
        }
        
        public void UpdateRawMaterialSheet(PMSClient.Other.DcRawMaterialSheet model) {
            base.Channel.UpdateRawMaterialSheet(model);
        }
        
        public System.Threading.Tasks.Task UpdateRawMaterialSheetAsync(PMSClient.Other.DcRawMaterialSheet model) {
            return base.Channel.UpdateRawMaterialSheetAsync(model);
        }
    }
}
