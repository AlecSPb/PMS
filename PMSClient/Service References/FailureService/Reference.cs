//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace PMSClient.FailureService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcFailure", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcFailure : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProblemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Problem {
            get {
                return this.ProblemField;
            }
            set {
                if ((object.ReferenceEquals(this.ProblemField, value) != true)) {
                    this.ProblemField = value;
                    this.RaisePropertyChanged("Problem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Process {
            get {
                return this.ProcessField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessField, value) != true)) {
                    this.ProcessField = value;
                    this.RaisePropertyChanged("Process");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIDField, value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Stage {
            get {
                return this.StageField;
            }
            set {
                if ((object.ReferenceEquals(this.StageField, value) != true)) {
                    this.StageField = value;
                    this.RaisePropertyChanged("Stage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FailureService.IFailureService")]
    public interface IFailureService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFailureService/GetFailures", ReplyAction="http://tempuri.org/IFailureService/GetFailuresResponse")]
        PMSClient.FailureService.DcFailure[] GetFailures(int s, int t, string stage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFailureService/GetFailures", ReplyAction="http://tempuri.org/IFailureService/GetFailuresResponse")]
        System.Threading.Tasks.Task<PMSClient.FailureService.DcFailure[]> GetFailuresAsync(int s, int t, string stage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFailureService/GetFailuresBySearch", ReplyAction="http://tempuri.org/IFailureService/GetFailuresBySearchResponse")]
        PMSClient.FailureService.DcFailure[] GetFailuresBySearch(int s, int t, string productid, string composition, string stage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFailureService/GetFailuresBySearch", ReplyAction="http://tempuri.org/IFailureService/GetFailuresBySearchResponse")]
        System.Threading.Tasks.Task<PMSClient.FailureService.DcFailure[]> GetFailuresBySearchAsync(int s, int t, string productid, string composition, string stage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFailureService/GetFailuresCount", ReplyAction="http://tempuri.org/IFailureService/GetFailuresCountResponse")]
        int GetFailuresCount(string stage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFailureService/GetFailuresCount", ReplyAction="http://tempuri.org/IFailureService/GetFailuresCountResponse")]
        System.Threading.Tasks.Task<int> GetFailuresCountAsync(string stage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFailureService/GetFailuresCountByProductID", ReplyAction="http://tempuri.org/IFailureService/GetFailuresCountByProductIDResponse")]
        int GetFailuresCountByProductID(string productid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFailureService/GetFailuresCountByProductID", ReplyAction="http://tempuri.org/IFailureService/GetFailuresCountByProductIDResponse")]
        System.Threading.Tasks.Task<int> GetFailuresCountByProductIDAsync(string productid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFailureService/AddFailure", ReplyAction="http://tempuri.org/IFailureService/AddFailureResponse")]
        int AddFailure(PMSClient.FailureService.DcFailure model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFailureService/AddFailure", ReplyAction="http://tempuri.org/IFailureService/AddFailureResponse")]
        System.Threading.Tasks.Task<int> AddFailureAsync(PMSClient.FailureService.DcFailure model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFailureService/UpdateFailure", ReplyAction="http://tempuri.org/IFailureService/UpdateFailureResponse")]
        int UpdateFailure(PMSClient.FailureService.DcFailure model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFailureService/UpdateFailure", ReplyAction="http://tempuri.org/IFailureService/UpdateFailureResponse")]
        System.Threading.Tasks.Task<int> UpdateFailureAsync(PMSClient.FailureService.DcFailure model);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFailureServiceChannel : PMSClient.FailureService.IFailureService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FailureServiceClient : System.ServiceModel.ClientBase<PMSClient.FailureService.IFailureService>, PMSClient.FailureService.IFailureService {
        
        public FailureServiceClient() {
        }
        
        public FailureServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FailureServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FailureServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FailureServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSClient.FailureService.DcFailure[] GetFailures(int s, int t, string stage) {
            return base.Channel.GetFailures(s, t, stage);
        }
        
        public System.Threading.Tasks.Task<PMSClient.FailureService.DcFailure[]> GetFailuresAsync(int s, int t, string stage) {
            return base.Channel.GetFailuresAsync(s, t, stage);
        }
        
        public PMSClient.FailureService.DcFailure[] GetFailuresBySearch(int s, int t, string productid, string composition, string stage) {
            return base.Channel.GetFailuresBySearch(s, t, productid, composition, stage);
        }
        
        public System.Threading.Tasks.Task<PMSClient.FailureService.DcFailure[]> GetFailuresBySearchAsync(int s, int t, string productid, string composition, string stage) {
            return base.Channel.GetFailuresBySearchAsync(s, t, productid, composition, stage);
        }
        
        public int GetFailuresCount(string stage) {
            return base.Channel.GetFailuresCount(stage);
        }
        
        public System.Threading.Tasks.Task<int> GetFailuresCountAsync(string stage) {
            return base.Channel.GetFailuresCountAsync(stage);
        }
        
        public int GetFailuresCountByProductID(string productid) {
            return base.Channel.GetFailuresCountByProductID(productid);
        }
        
        public System.Threading.Tasks.Task<int> GetFailuresCountByProductIDAsync(string productid) {
            return base.Channel.GetFailuresCountByProductIDAsync(productid);
        }
        
        public int AddFailure(PMSClient.FailureService.DcFailure model) {
            return base.Channel.AddFailure(model);
        }
        
        public System.Threading.Tasks.Task<int> AddFailureAsync(PMSClient.FailureService.DcFailure model) {
            return base.Channel.AddFailureAsync(model);
        }
        
        public int UpdateFailure(PMSClient.FailureService.DcFailure model) {
            return base.Channel.UpdateFailure(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateFailureAsync(PMSClient.FailureService.DcFailure model) {
            return base.Channel.UpdateFailureAsync(model);
        }
    }
}
