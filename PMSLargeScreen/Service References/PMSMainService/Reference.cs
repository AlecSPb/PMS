//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace PMSLargeScreen.PMSMainService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcOrder", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcOrder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionAbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionOriginalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionStandardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DeadLineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MinimumAcceptDefectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string POField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PolicyContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PolicyMakeDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PolicyMakerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PolicyTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuantityUnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ReviewDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ReviewPassedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReviewerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SampleNeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateRemarkField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionAbbr {
            get {
                return this.CompositionAbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionAbbrField, value) != true)) {
                    this.CompositionAbbrField = value;
                    this.RaisePropertyChanged("CompositionAbbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionOriginal {
            get {
                return this.CompositionOriginalField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionOriginalField, value) != true)) {
                    this.CompositionOriginalField = value;
                    this.RaisePropertyChanged("CompositionOriginal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionStandard {
            get {
                return this.CompositionStandardField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionStandardField, value) != true)) {
                    this.CompositionStandardField = value;
                    this.RaisePropertyChanged("CompositionStandard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerName {
            get {
                return this.CustomerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerNameField, value) != true)) {
                    this.CustomerNameField = value;
                    this.RaisePropertyChanged("CustomerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DeadLine {
            get {
                return this.DeadLineField;
            }
            set {
                if ((this.DeadLineField.Equals(value) != true)) {
                    this.DeadLineField = value;
                    this.RaisePropertyChanged("DeadLine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dimension {
            get {
                return this.DimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionField, value) != true)) {
                    this.DimensionField = value;
                    this.RaisePropertyChanged("Dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DimensionDetails {
            get {
                return this.DimensionDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionDetailsField, value) != true)) {
                    this.DimensionDetailsField = value;
                    this.RaisePropertyChanged("DimensionDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MinimumAcceptDefect {
            get {
                return this.MinimumAcceptDefectField;
            }
            set {
                if ((object.ReferenceEquals(this.MinimumAcceptDefectField, value) != true)) {
                    this.MinimumAcceptDefectField = value;
                    this.RaisePropertyChanged("MinimumAcceptDefect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PO {
            get {
                return this.POField;
            }
            set {
                if ((object.ReferenceEquals(this.POField, value) != true)) {
                    this.POField = value;
                    this.RaisePropertyChanged("PO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PolicyContent {
            get {
                return this.PolicyContentField;
            }
            set {
                if ((object.ReferenceEquals(this.PolicyContentField, value) != true)) {
                    this.PolicyContentField = value;
                    this.RaisePropertyChanged("PolicyContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PolicyMakeDate {
            get {
                return this.PolicyMakeDateField;
            }
            set {
                if ((this.PolicyMakeDateField.Equals(value) != true)) {
                    this.PolicyMakeDateField = value;
                    this.RaisePropertyChanged("PolicyMakeDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PolicyMaker {
            get {
                return this.PolicyMakerField;
            }
            set {
                if ((object.ReferenceEquals(this.PolicyMakerField, value) != true)) {
                    this.PolicyMakerField = value;
                    this.RaisePropertyChanged("PolicyMaker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PolicyType {
            get {
                return this.PolicyTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PolicyTypeField, value) != true)) {
                    this.PolicyTypeField = value;
                    this.RaisePropertyChanged("PolicyType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityField, value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductType {
            get {
                return this.ProductTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductTypeField, value) != true)) {
                    this.ProductTypeField = value;
                    this.RaisePropertyChanged("ProductType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purity {
            get {
                return this.PurityField;
            }
            set {
                if ((object.ReferenceEquals(this.PurityField, value) != true)) {
                    this.PurityField = value;
                    this.RaisePropertyChanged("Purity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuantityUnit {
            get {
                return this.QuantityUnitField;
            }
            set {
                if ((object.ReferenceEquals(this.QuantityUnitField, value) != true)) {
                    this.QuantityUnitField = value;
                    this.RaisePropertyChanged("QuantityUnit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReviewDate {
            get {
                return this.ReviewDateField;
            }
            set {
                if ((this.ReviewDateField.Equals(value) != true)) {
                    this.ReviewDateField = value;
                    this.RaisePropertyChanged("ReviewDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ReviewPassed {
            get {
                return this.ReviewPassedField;
            }
            set {
                if ((this.ReviewPassedField.Equals(value) != true)) {
                    this.ReviewPassedField = value;
                    this.RaisePropertyChanged("ReviewPassed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reviewer {
            get {
                return this.ReviewerField;
            }
            set {
                if ((object.ReferenceEquals(this.ReviewerField, value) != true)) {
                    this.ReviewerField = value;
                    this.RaisePropertyChanged("Reviewer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SampleNeed {
            get {
                return this.SampleNeedField;
            }
            set {
                if ((object.ReferenceEquals(this.SampleNeedField, value) != true)) {
                    this.SampleNeedField = value;
                    this.RaisePropertyChanged("SampleNeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateRemark {
            get {
                return this.StateRemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.StateRemarkField, value) != true)) {
                    this.StateRemarkField = value;
                    this.RaisePropertyChanged("StateRemark");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcPlanVHP", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcPlanVHP : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CalculationDensityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FillingRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GrainSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double KeepTempTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MillingRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MoldDiameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MoldTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid OrderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PlanDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlanLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PrePressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PreTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RoomHumidityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RoomTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpecialRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ThicknessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPDeviceCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VaccumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CalculationDensity {
            get {
                return this.CalculationDensityField;
            }
            set {
                if ((this.CalculationDensityField.Equals(value) != true)) {
                    this.CalculationDensityField = value;
                    this.RaisePropertyChanged("CalculationDensity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FillingRequirement {
            get {
                return this.FillingRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.FillingRequirementField, value) != true)) {
                    this.FillingRequirementField = value;
                    this.RaisePropertyChanged("FillingRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GrainSize {
            get {
                return this.GrainSizeField;
            }
            set {
                if ((object.ReferenceEquals(this.GrainSizeField, value) != true)) {
                    this.GrainSizeField = value;
                    this.RaisePropertyChanged("GrainSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double KeepTempTime {
            get {
                return this.KeepTempTimeField;
            }
            set {
                if ((this.KeepTempTimeField.Equals(value) != true)) {
                    this.KeepTempTimeField = value;
                    this.RaisePropertyChanged("KeepTempTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineRequirement {
            get {
                return this.MachineRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineRequirementField, value) != true)) {
                    this.MachineRequirementField = value;
                    this.RaisePropertyChanged("MachineRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MillingRequirement {
            get {
                return this.MillingRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.MillingRequirementField, value) != true)) {
                    this.MillingRequirementField = value;
                    this.RaisePropertyChanged("MillingRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MoldDiameter {
            get {
                return this.MoldDiameterField;
            }
            set {
                if ((this.MoldDiameterField.Equals(value) != true)) {
                    this.MoldDiameterField = value;
                    this.RaisePropertyChanged("MoldDiameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MoldType {
            get {
                return this.MoldTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MoldTypeField, value) != true)) {
                    this.MoldTypeField = value;
                    this.RaisePropertyChanged("MoldType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid OrderID {
            get {
                return this.OrderIDField;
            }
            set {
                if ((this.OrderIDField.Equals(value) != true)) {
                    this.OrderIDField = value;
                    this.RaisePropertyChanged("OrderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PlanDate {
            get {
                return this.PlanDateField;
            }
            set {
                if ((this.PlanDateField.Equals(value) != true)) {
                    this.PlanDateField = value;
                    this.RaisePropertyChanged("PlanDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlanLot {
            get {
                return this.PlanLotField;
            }
            set {
                if ((this.PlanLotField.Equals(value) != true)) {
                    this.PlanLotField = value;
                    this.RaisePropertyChanged("PlanLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PrePressure {
            get {
                return this.PrePressureField;
            }
            set {
                if ((this.PrePressureField.Equals(value) != true)) {
                    this.PrePressureField = value;
                    this.RaisePropertyChanged("PrePressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PreTemperature {
            get {
                return this.PreTemperatureField;
            }
            set {
                if ((this.PreTemperatureField.Equals(value) != true)) {
                    this.PreTemperatureField = value;
                    this.RaisePropertyChanged("PreTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Pressure {
            get {
                return this.PressureField;
            }
            set {
                if ((this.PressureField.Equals(value) != true)) {
                    this.PressureField = value;
                    this.RaisePropertyChanged("Pressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessCode {
            get {
                return this.ProcessCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessCodeField, value) != true)) {
                    this.ProcessCodeField = value;
                    this.RaisePropertyChanged("ProcessCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RoomHumidity {
            get {
                return this.RoomHumidityField;
            }
            set {
                if ((this.RoomHumidityField.Equals(value) != true)) {
                    this.RoomHumidityField = value;
                    this.RaisePropertyChanged("RoomHumidity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RoomTemperature {
            get {
                return this.RoomTemperatureField;
            }
            set {
                if ((this.RoomTemperatureField.Equals(value) != true)) {
                    this.RoomTemperatureField = value;
                    this.RaisePropertyChanged("RoomTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpecialRequirement {
            get {
                return this.SpecialRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialRequirementField, value) != true)) {
                    this.SpecialRequirementField = value;
                    this.RaisePropertyChanged("SpecialRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness {
            get {
                return this.ThicknessField;
            }
            set {
                if ((this.ThicknessField.Equals(value) != true)) {
                    this.ThicknessField = value;
                    this.RaisePropertyChanged("Thickness");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPDeviceCode {
            get {
                return this.VHPDeviceCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPDeviceCodeField, value) != true)) {
                    this.VHPDeviceCodeField = value;
                    this.RaisePropertyChanged("VHPDeviceCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPRequirement {
            get {
                return this.VHPRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPRequirementField, value) != true)) {
                    this.VHPRequirementField = value;
                    this.RaisePropertyChanged("VHPRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Vaccum {
            get {
                return this.VaccumField;
            }
            set {
                if ((this.VaccumField.Equals(value) != true)) {
                    this.VaccumField = value;
                    this.RaisePropertyChanged("Vaccum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcMaterialNeed", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcMaterialNeed : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpecialNeedsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purity {
            get {
                return this.PurityField;
            }
            set {
                if ((object.ReferenceEquals(this.PurityField, value) != true)) {
                    this.PurityField = value;
                    this.RaisePropertyChanged("Purity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpecialNeeds {
            get {
                return this.SpecialNeedsField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialNeedsField, value) != true)) {
                    this.SpecialNeedsField = value;
                    this.RaisePropertyChanged("SpecialNeeds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcMaterialOrder", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcMaterialOrder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderPOField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ShipFeeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierAbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierReceiverField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderPO {
            get {
                return this.OrderPOField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderPOField, value) != true)) {
                    this.OrderPOField = value;
                    this.RaisePropertyChanged("OrderPO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityField, value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ShipFee {
            get {
                return this.ShipFeeField;
            }
            set {
                if ((this.ShipFeeField.Equals(value) != true)) {
                    this.ShipFeeField = value;
                    this.RaisePropertyChanged("ShipFee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Supplier {
            get {
                return this.SupplierField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierField, value) != true)) {
                    this.SupplierField = value;
                    this.RaisePropertyChanged("Supplier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierAbbr {
            get {
                return this.SupplierAbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierAbbrField, value) != true)) {
                    this.SupplierAbbrField = value;
                    this.RaisePropertyChanged("SupplierAbbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierAddress {
            get {
                return this.SupplierAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierAddressField, value) != true)) {
                    this.SupplierAddressField = value;
                    this.RaisePropertyChanged("SupplierAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierEmail {
            get {
                return this.SupplierEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierEmailField, value) != true)) {
                    this.SupplierEmailField = value;
                    this.RaisePropertyChanged("SupplierEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierReceiver {
            get {
                return this.SupplierReceiverField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierReceiverField, value) != true)) {
                    this.SupplierReceiverField = value;
                    this.RaisePropertyChanged("SupplierReceiver");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcMaterialOrderItem", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcMaterialOrderItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DeliveryDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid MaterialOrderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProvideRawMaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UnitPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DeliveryDate {
            get {
                return this.DeliveryDateField;
            }
            set {
                if ((this.DeliveryDateField.Equals(value) != true)) {
                    this.DeliveryDateField = value;
                    this.RaisePropertyChanged("DeliveryDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid MaterialOrderID {
            get {
                return this.MaterialOrderIDField;
            }
            set {
                if ((this.MaterialOrderIDField.Equals(value) != true)) {
                    this.MaterialOrderIDField = value;
                    this.RaisePropertyChanged("MaterialOrderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProvideRawMaterial {
            get {
                return this.ProvideRawMaterialField;
            }
            set {
                if ((object.ReferenceEquals(this.ProvideRawMaterialField, value) != true)) {
                    this.ProvideRawMaterialField = value;
                    this.RaisePropertyChanged("ProvideRawMaterial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purity {
            get {
                return this.PurityField;
            }
            set {
                if ((object.ReferenceEquals(this.PurityField, value) != true)) {
                    this.PurityField = value;
                    this.RaisePropertyChanged("Purity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double UnitPrice {
            get {
                return this.UnitPriceField;
            }
            set {
                if ((this.UnitPriceField.Equals(value) != true)) {
                    this.UnitPriceField = value;
                    this.RaisePropertyChanged("UnitPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcMaterialInventoryIn", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcMaterialInventoryIn : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialLot {
            get {
                return this.MaterialLotField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialLotField, value) != true)) {
                    this.MaterialLotField = value;
                    this.RaisePropertyChanged("MaterialLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purity {
            get {
                return this.PurityField;
            }
            set {
                if ((object.ReferenceEquals(this.PurityField, value) != true)) {
                    this.PurityField = value;
                    this.RaisePropertyChanged("Purity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Supplier {
            get {
                return this.SupplierField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierField, value) != true)) {
                    this.SupplierField = value;
                    this.RaisePropertyChanged("Supplier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcMaterialInventoryOut", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcMaterialInventoryOut : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiverField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialLot {
            get {
                return this.MaterialLotField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialLotField, value) != true)) {
                    this.MaterialLotField = value;
                    this.RaisePropertyChanged("MaterialLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purity {
            get {
                return this.PurityField;
            }
            set {
                if ((object.ReferenceEquals(this.PurityField, value) != true)) {
                    this.PurityField = value;
                    this.RaisePropertyChanged("Purity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Receiver {
            get {
                return this.ReceiverField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiverField, value) != true)) {
                    this.ReceiverField = value;
                    this.RaisePropertyChanged("Receiver");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcMissonWithPlan", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcMissonWithPlan : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CalculationDensityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionAbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionOriginalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionStandardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DeadLineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FillingRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GrainSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double KeepTempTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MillingRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MinimumAcceptDefectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MoldDiameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MoldTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid OrderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderRemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMINumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string POField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PlanDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid PlanIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlanLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PrePressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PreTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuantityUnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RoomHumidityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RoomTemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SampleNeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpecialRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TargetQuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ThicknessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPDeviceCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPPlanRemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VaccumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CalculationDensity {
            get {
                return this.CalculationDensityField;
            }
            set {
                if ((this.CalculationDensityField.Equals(value) != true)) {
                    this.CalculationDensityField = value;
                    this.RaisePropertyChanged("CalculationDensity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionAbbr {
            get {
                return this.CompositionAbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionAbbrField, value) != true)) {
                    this.CompositionAbbrField = value;
                    this.RaisePropertyChanged("CompositionAbbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionOriginal {
            get {
                return this.CompositionOriginalField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionOriginalField, value) != true)) {
                    this.CompositionOriginalField = value;
                    this.RaisePropertyChanged("CompositionOriginal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionStandard {
            get {
                return this.CompositionStandardField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionStandardField, value) != true)) {
                    this.CompositionStandardField = value;
                    this.RaisePropertyChanged("CompositionStandard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerName {
            get {
                return this.CustomerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerNameField, value) != true)) {
                    this.CustomerNameField = value;
                    this.RaisePropertyChanged("CustomerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DeadLine {
            get {
                return this.DeadLineField;
            }
            set {
                if ((this.DeadLineField.Equals(value) != true)) {
                    this.DeadLineField = value;
                    this.RaisePropertyChanged("DeadLine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dimension {
            get {
                return this.DimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionField, value) != true)) {
                    this.DimensionField = value;
                    this.RaisePropertyChanged("Dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DimensionDetails {
            get {
                return this.DimensionDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionDetailsField, value) != true)) {
                    this.DimensionDetailsField = value;
                    this.RaisePropertyChanged("DimensionDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FillingRequirement {
            get {
                return this.FillingRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.FillingRequirementField, value) != true)) {
                    this.FillingRequirementField = value;
                    this.RaisePropertyChanged("FillingRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GrainSize {
            get {
                return this.GrainSizeField;
            }
            set {
                if ((object.ReferenceEquals(this.GrainSizeField, value) != true)) {
                    this.GrainSizeField = value;
                    this.RaisePropertyChanged("GrainSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double KeepTempTime {
            get {
                return this.KeepTempTimeField;
            }
            set {
                if ((this.KeepTempTimeField.Equals(value) != true)) {
                    this.KeepTempTimeField = value;
                    this.RaisePropertyChanged("KeepTempTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineRequirement {
            get {
                return this.MachineRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineRequirementField, value) != true)) {
                    this.MachineRequirementField = value;
                    this.RaisePropertyChanged("MachineRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MillingRequirement {
            get {
                return this.MillingRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.MillingRequirementField, value) != true)) {
                    this.MillingRequirementField = value;
                    this.RaisePropertyChanged("MillingRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MinimumAcceptDefect {
            get {
                return this.MinimumAcceptDefectField;
            }
            set {
                if ((object.ReferenceEquals(this.MinimumAcceptDefectField, value) != true)) {
                    this.MinimumAcceptDefectField = value;
                    this.RaisePropertyChanged("MinimumAcceptDefect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MoldDiameter {
            get {
                return this.MoldDiameterField;
            }
            set {
                if ((this.MoldDiameterField.Equals(value) != true)) {
                    this.MoldDiameterField = value;
                    this.RaisePropertyChanged("MoldDiameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MoldType {
            get {
                return this.MoldTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MoldTypeField, value) != true)) {
                    this.MoldTypeField = value;
                    this.RaisePropertyChanged("MoldType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid OrderID {
            get {
                return this.OrderIDField;
            }
            set {
                if ((this.OrderIDField.Equals(value) != true)) {
                    this.OrderIDField = value;
                    this.RaisePropertyChanged("OrderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderRemark {
            get {
                return this.OrderRemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderRemarkField, value) != true)) {
                    this.OrderRemarkField = value;
                    this.RaisePropertyChanged("OrderRemark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMINumber {
            get {
                return this.PMINumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PMINumberField, value) != true)) {
                    this.PMINumberField = value;
                    this.RaisePropertyChanged("PMINumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PO {
            get {
                return this.POField;
            }
            set {
                if ((object.ReferenceEquals(this.POField, value) != true)) {
                    this.POField = value;
                    this.RaisePropertyChanged("PO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PlanDate {
            get {
                return this.PlanDateField;
            }
            set {
                if ((this.PlanDateField.Equals(value) != true)) {
                    this.PlanDateField = value;
                    this.RaisePropertyChanged("PlanDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PlanID {
            get {
                return this.PlanIDField;
            }
            set {
                if ((this.PlanIDField.Equals(value) != true)) {
                    this.PlanIDField = value;
                    this.RaisePropertyChanged("PlanID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlanLot {
            get {
                return this.PlanLotField;
            }
            set {
                if ((this.PlanLotField.Equals(value) != true)) {
                    this.PlanLotField = value;
                    this.RaisePropertyChanged("PlanLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PrePressure {
            get {
                return this.PrePressureField;
            }
            set {
                if ((this.PrePressureField.Equals(value) != true)) {
                    this.PrePressureField = value;
                    this.RaisePropertyChanged("PrePressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PreTemperature {
            get {
                return this.PreTemperatureField;
            }
            set {
                if ((this.PreTemperatureField.Equals(value) != true)) {
                    this.PreTemperatureField = value;
                    this.RaisePropertyChanged("PreTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Pressure {
            get {
                return this.PressureField;
            }
            set {
                if ((this.PressureField.Equals(value) != true)) {
                    this.PressureField = value;
                    this.RaisePropertyChanged("Pressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessCode {
            get {
                return this.ProcessCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessCodeField, value) != true)) {
                    this.ProcessCodeField = value;
                    this.RaisePropertyChanged("ProcessCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductType {
            get {
                return this.ProductTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductTypeField, value) != true)) {
                    this.ProductTypeField = value;
                    this.RaisePropertyChanged("ProductType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Purity {
            get {
                return this.PurityField;
            }
            set {
                if ((object.ReferenceEquals(this.PurityField, value) != true)) {
                    this.PurityField = value;
                    this.RaisePropertyChanged("Purity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuantityUnit {
            get {
                return this.QuantityUnitField;
            }
            set {
                if ((object.ReferenceEquals(this.QuantityUnitField, value) != true)) {
                    this.QuantityUnitField = value;
                    this.RaisePropertyChanged("QuantityUnit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RoomHumidity {
            get {
                return this.RoomHumidityField;
            }
            set {
                if ((this.RoomHumidityField.Equals(value) != true)) {
                    this.RoomHumidityField = value;
                    this.RaisePropertyChanged("RoomHumidity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RoomTemperature {
            get {
                return this.RoomTemperatureField;
            }
            set {
                if ((this.RoomTemperatureField.Equals(value) != true)) {
                    this.RoomTemperatureField = value;
                    this.RaisePropertyChanged("RoomTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SampleNeed {
            get {
                return this.SampleNeedField;
            }
            set {
                if ((object.ReferenceEquals(this.SampleNeedField, value) != true)) {
                    this.SampleNeedField = value;
                    this.RaisePropertyChanged("SampleNeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpecialRequirement {
            get {
                return this.SpecialRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialRequirementField, value) != true)) {
                    this.SpecialRequirementField = value;
                    this.RaisePropertyChanged("SpecialRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TargetQuantity {
            get {
                return this.TargetQuantityField;
            }
            set {
                if ((this.TargetQuantityField.Equals(value) != true)) {
                    this.TargetQuantityField = value;
                    this.RaisePropertyChanged("TargetQuantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness {
            get {
                return this.ThicknessField;
            }
            set {
                if ((this.ThicknessField.Equals(value) != true)) {
                    this.ThicknessField = value;
                    this.RaisePropertyChanged("Thickness");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPDeviceCode {
            get {
                return this.VHPDeviceCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPDeviceCodeField, value) != true)) {
                    this.VHPDeviceCodeField = value;
                    this.RaisePropertyChanged("VHPDeviceCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPPlanRemark {
            get {
                return this.VHPPlanRemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPPlanRemarkField, value) != true)) {
                    this.VHPPlanRemarkField = value;
                    this.RaisePropertyChanged("VHPPlanRemark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPRequirement {
            get {
                return this.VHPRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPRequirementField, value) != true)) {
                    this.VHPRequirementField = value;
                    this.RaisePropertyChanged("VHPRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Vaccum {
            get {
                return this.VaccumField;
            }
            set {
                if ((this.VaccumField.Equals(value) != true)) {
                    this.VaccumField = value;
                    this.RaisePropertyChanged("Vaccum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordDelivery", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordDelivery : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeliveryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeliveryNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InvoiceNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackageInformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackageTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ShipTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeliveryName {
            get {
                return this.DeliveryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeliveryNameField, value) != true)) {
                    this.DeliveryNameField = value;
                    this.RaisePropertyChanged("DeliveryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeliveryNumber {
            get {
                return this.DeliveryNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.DeliveryNumberField, value) != true)) {
                    this.DeliveryNumberField = value;
                    this.RaisePropertyChanged("DeliveryNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InvoiceNumber {
            get {
                return this.InvoiceNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.InvoiceNumberField, value) != true)) {
                    this.InvoiceNumberField = value;
                    this.RaisePropertyChanged("InvoiceNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PackageInformation {
            get {
                return this.PackageInformationField;
            }
            set {
                if ((object.ReferenceEquals(this.PackageInformationField, value) != true)) {
                    this.PackageInformationField = value;
                    this.RaisePropertyChanged("PackageInformation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PackageType {
            get {
                return this.PackageTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PackageTypeField, value) != true)) {
                    this.PackageTypeField = value;
                    this.RaisePropertyChanged("PackageType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ShipTime {
            get {
                return this.ShipTimeField;
            }
            set {
                if ((this.ShipTimeField.Equals(value) != true)) {
                    this.ShipTimeField = value;
                    this.RaisePropertyChanged("ShipTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordDeliveryItem", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordDeliveryItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DeliveryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string POField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Abbr {
            get {
                return this.AbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.AbbrField, value) != true)) {
                    this.AbbrField = value;
                    this.RaisePropertyChanged("Abbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Customer {
            get {
                return this.CustomerField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerField, value) != true)) {
                    this.CustomerField = value;
                    this.RaisePropertyChanged("Customer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DeliveryID {
            get {
                return this.DeliveryIDField;
            }
            set {
                if ((this.DeliveryIDField.Equals(value) != true)) {
                    this.DeliveryIDField = value;
                    this.RaisePropertyChanged("DeliveryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailRecord {
            get {
                return this.DetailRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailRecordField, value) != true)) {
                    this.DetailRecordField = value;
                    this.RaisePropertyChanged("DetailRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PO {
            get {
                return this.POField;
            }
            set {
                if ((object.ReferenceEquals(this.POField, value) != true)) {
                    this.POField = value;
                    this.RaisePropertyChanged("PO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Position {
            get {
                return this.PositionField;
            }
            set {
                if ((object.ReferenceEquals(this.PositionField, value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIDField, value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductType {
            get {
                return this.ProductTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductTypeField, value) != true)) {
                    this.ProductTypeField = value;
                    this.RaisePropertyChanged("ProductType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((object.ReferenceEquals(this.WeightField, value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordTest", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordTest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionAbbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionXRFField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DensityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionActualField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string POField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResistanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SampleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionAbbr {
            get {
                return this.CompositionAbbrField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionAbbrField, value) != true)) {
                    this.CompositionAbbrField = value;
                    this.RaisePropertyChanged("CompositionAbbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompositionXRF {
            get {
                return this.CompositionXRFField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionXRFField, value) != true)) {
                    this.CompositionXRFField = value;
                    this.RaisePropertyChanged("CompositionXRF");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Customer {
            get {
                return this.CustomerField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerField, value) != true)) {
                    this.CustomerField = value;
                    this.RaisePropertyChanged("Customer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Density {
            get {
                return this.DensityField;
            }
            set {
                if ((object.ReferenceEquals(this.DensityField, value) != true)) {
                    this.DensityField = value;
                    this.RaisePropertyChanged("Density");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dimension {
            get {
                return this.DimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionField, value) != true)) {
                    this.DimensionField = value;
                    this.RaisePropertyChanged("Dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DimensionActual {
            get {
                return this.DimensionActualField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionActualField, value) != true)) {
                    this.DimensionActualField = value;
                    this.RaisePropertyChanged("DimensionActual");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PO {
            get {
                return this.POField;
            }
            set {
                if ((object.ReferenceEquals(this.POField, value) != true)) {
                    this.POField = value;
                    this.RaisePropertyChanged("PO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIDField, value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Resistance {
            get {
                return this.ResistanceField;
            }
            set {
                if ((object.ReferenceEquals(this.ResistanceField, value) != true)) {
                    this.ResistanceField = value;
                    this.RaisePropertyChanged("Resistance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sample {
            get {
                return this.SampleField;
            }
            set {
                if ((object.ReferenceEquals(this.SampleField, value) != true)) {
                    this.SampleField = value;
                    this.RaisePropertyChanged("Sample");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestType {
            get {
                return this.TestTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TestTypeField, value) != true)) {
                    this.TestTypeField = value;
                    this.RaisePropertyChanged("TestType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((object.ReferenceEquals(this.WeightField, value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordVHP", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordVHP : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CurrentTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtraInformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double OmegaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PV1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PV2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PV3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid PlanVHPIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SVField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Shift1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Shift2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VaccumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WaterTemperatureInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WaterTemperatureOutField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CurrentTime {
            get {
                return this.CurrentTimeField;
            }
            set {
                if ((this.CurrentTimeField.Equals(value) != true)) {
                    this.CurrentTimeField = value;
                    this.RaisePropertyChanged("CurrentTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExtraInformation {
            get {
                return this.ExtraInformationField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtraInformationField, value) != true)) {
                    this.ExtraInformationField = value;
                    this.RaisePropertyChanged("ExtraInformation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Omega {
            get {
                return this.OmegaField;
            }
            set {
                if ((this.OmegaField.Equals(value) != true)) {
                    this.OmegaField = value;
                    this.RaisePropertyChanged("Omega");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PV1 {
            get {
                return this.PV1Field;
            }
            set {
                if ((this.PV1Field.Equals(value) != true)) {
                    this.PV1Field = value;
                    this.RaisePropertyChanged("PV1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PV2 {
            get {
                return this.PV2Field;
            }
            set {
                if ((this.PV2Field.Equals(value) != true)) {
                    this.PV2Field = value;
                    this.RaisePropertyChanged("PV2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PV3 {
            get {
                return this.PV3Field;
            }
            set {
                if ((this.PV3Field.Equals(value) != true)) {
                    this.PV3Field = value;
                    this.RaisePropertyChanged("PV3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PlanVHPID {
            get {
                return this.PlanVHPIDField;
            }
            set {
                if ((this.PlanVHPIDField.Equals(value) != true)) {
                    this.PlanVHPIDField = value;
                    this.RaisePropertyChanged("PlanVHPID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SV {
            get {
                return this.SVField;
            }
            set {
                if ((this.SVField.Equals(value) != true)) {
                    this.SVField = value;
                    this.RaisePropertyChanged("SV");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Shift1 {
            get {
                return this.Shift1Field;
            }
            set {
                if ((this.Shift1Field.Equals(value) != true)) {
                    this.Shift1Field = value;
                    this.RaisePropertyChanged("Shift1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Shift2 {
            get {
                return this.Shift2Field;
            }
            set {
                if ((this.Shift2Field.Equals(value) != true)) {
                    this.Shift2Field = value;
                    this.RaisePropertyChanged("Shift2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Ton {
            get {
                return this.TonField;
            }
            set {
                if ((this.TonField.Equals(value) != true)) {
                    this.TonField = value;
                    this.RaisePropertyChanged("Ton");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Vaccum {
            get {
                return this.VaccumField;
            }
            set {
                if ((this.VaccumField.Equals(value) != true)) {
                    this.VaccumField = value;
                    this.RaisePropertyChanged("Vaccum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WaterTemperatureIn {
            get {
                return this.WaterTemperatureInField;
            }
            set {
                if ((this.WaterTemperatureInField.Equals(value) != true)) {
                    this.WaterTemperatureInField = value;
                    this.RaisePropertyChanged("WaterTemperatureIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WaterTemperatureOut {
            get {
                return this.WaterTemperatureOutField;
            }
            set {
                if ((this.WaterTemperatureOutField.Equals(value) != true)) {
                    this.WaterTemperatureOutField = value;
                    this.RaisePropertyChanged("WaterTemperatureOut");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordMilling", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordMilling : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GasProtectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaterialSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MillingToolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPPlanLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightOutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightRemainField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GasProtection {
            get {
                return this.GasProtectionField;
            }
            set {
                if ((object.ReferenceEquals(this.GasProtectionField, value) != true)) {
                    this.GasProtectionField = value;
                    this.RaisePropertyChanged("GasProtection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialSource {
            get {
                return this.MaterialSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialSourceField, value) != true)) {
                    this.MaterialSourceField = value;
                    this.RaisePropertyChanged("MaterialSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MillingTool {
            get {
                return this.MillingToolField;
            }
            set {
                if ((object.ReferenceEquals(this.MillingToolField, value) != true)) {
                    this.MillingToolField = value;
                    this.RaisePropertyChanged("MillingTool");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPPlanLot {
            get {
                return this.VHPPlanLotField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPPlanLotField, value) != true)) {
                    this.VHPPlanLotField = value;
                    this.RaisePropertyChanged("VHPPlanLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WeightIn {
            get {
                return this.WeightInField;
            }
            set {
                if ((this.WeightInField.Equals(value) != true)) {
                    this.WeightInField = value;
                    this.RaisePropertyChanged("WeightIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WeightOut {
            get {
                return this.WeightOutField;
            }
            set {
                if ((this.WeightOutField.Equals(value) != true)) {
                    this.WeightOutField = value;
                    this.RaisePropertyChanged("WeightOut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WeightRemain {
            get {
                return this.WeightRemainField;
            }
            set {
                if ((this.WeightRemainField.Equals(value) != true)) {
                    this.WeightRemainField = value;
                    this.RaisePropertyChanged("WeightRemain");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordMachine", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordMachine : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Diameter1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Diameter2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtraRequirementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness4Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPPlanLotField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Defects {
            get {
                return this.DefectsField;
            }
            set {
                if ((object.ReferenceEquals(this.DefectsField, value) != true)) {
                    this.DefectsField = value;
                    this.RaisePropertyChanged("Defects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diameter1 {
            get {
                return this.Diameter1Field;
            }
            set {
                if ((this.Diameter1Field.Equals(value) != true)) {
                    this.Diameter1Field = value;
                    this.RaisePropertyChanged("Diameter1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diameter2 {
            get {
                return this.Diameter2Field;
            }
            set {
                if ((this.Diameter2Field.Equals(value) != true)) {
                    this.Diameter2Field = value;
                    this.RaisePropertyChanged("Diameter2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dimension {
            get {
                return this.DimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionField, value) != true)) {
                    this.DimensionField = value;
                    this.RaisePropertyChanged("Dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExtraRequirement {
            get {
                return this.ExtraRequirementField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtraRequirementField, value) != true)) {
                    this.ExtraRequirementField = value;
                    this.RaisePropertyChanged("ExtraRequirement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness1 {
            get {
                return this.Thickness1Field;
            }
            set {
                if ((this.Thickness1Field.Equals(value) != true)) {
                    this.Thickness1Field = value;
                    this.RaisePropertyChanged("Thickness1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness2 {
            get {
                return this.Thickness2Field;
            }
            set {
                if ((this.Thickness2Field.Equals(value) != true)) {
                    this.Thickness2Field = value;
                    this.RaisePropertyChanged("Thickness2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness3 {
            get {
                return this.Thickness3Field;
            }
            set {
                if ((this.Thickness3Field.Equals(value) != true)) {
                    this.Thickness3Field = value;
                    this.RaisePropertyChanged("Thickness3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness4 {
            get {
                return this.Thickness4Field;
            }
            set {
                if ((this.Thickness4Field.Equals(value) != true)) {
                    this.Thickness4Field = value;
                    this.RaisePropertyChanged("Thickness4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPPlanLot {
            get {
                return this.VHPPlanLotField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPPlanLotField, value) != true)) {
                    this.VHPPlanLotField = value;
                    this.RaisePropertyChanged("VHPPlanLot");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordDeMold", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordDeMold : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Diameter1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Diameter2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Temperature1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Temperature2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Thickness4Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VHPPlanLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Composition {
            get {
                return this.CompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompositionField, value) != true)) {
                    this.CompositionField = value;
                    this.RaisePropertyChanged("Composition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diameter1 {
            get {
                return this.Diameter1Field;
            }
            set {
                if ((this.Diameter1Field.Equals(value) != true)) {
                    this.Diameter1Field = value;
                    this.RaisePropertyChanged("Diameter1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Diameter2 {
            get {
                return this.Diameter2Field;
            }
            set {
                if ((this.Diameter2Field.Equals(value) != true)) {
                    this.Diameter2Field = value;
                    this.RaisePropertyChanged("Diameter2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Temperature1 {
            get {
                return this.Temperature1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Temperature1Field, value) != true)) {
                    this.Temperature1Field = value;
                    this.RaisePropertyChanged("Temperature1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Temperature2 {
            get {
                return this.Temperature2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Temperature2Field, value) != true)) {
                    this.Temperature2Field = value;
                    this.RaisePropertyChanged("Temperature2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness1 {
            get {
                return this.Thickness1Field;
            }
            set {
                if ((this.Thickness1Field.Equals(value) != true)) {
                    this.Thickness1Field = value;
                    this.RaisePropertyChanged("Thickness1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness2 {
            get {
                return this.Thickness2Field;
            }
            set {
                if ((this.Thickness2Field.Equals(value) != true)) {
                    this.Thickness2Field = value;
                    this.RaisePropertyChanged("Thickness2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness3 {
            get {
                return this.Thickness3Field;
            }
            set {
                if ((this.Thickness3Field.Equals(value) != true)) {
                    this.Thickness3Field = value;
                    this.RaisePropertyChanged("Thickness3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Thickness4 {
            get {
                return this.Thickness4Field;
            }
            set {
                if ((this.Thickness4Field.Equals(value) != true)) {
                    this.Thickness4Field = value;
                    this.RaisePropertyChanged("Thickness4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VHPPlanLot {
            get {
                return this.VHPPlanLotField;
            }
            set {
                if ((object.ReferenceEquals(this.VHPPlanLotField, value) != true)) {
                    this.VHPPlanLotField = value;
                    this.RaisePropertyChanged("VHPPlanLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordBonding", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordBonding : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HeatRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstructionCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TemperatureField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HeatRecord {
            get {
                return this.HeatRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.HeatRecordField, value) != true)) {
                    this.HeatRecordField = value;
                    this.RaisePropertyChanged("HeatRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstructionCode {
            get {
                return this.InstructionCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.InstructionCodeField, value) != true)) {
                    this.InstructionCodeField = value;
                    this.RaisePropertyChanged("InstructionCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordBondingPlate", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordBondingPlate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastWeldMaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OtherRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateAppearanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateDimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateHardnessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateMaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateProcessRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateSuplierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateUseCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastWeldMaterial {
            get {
                return this.LastWeldMaterialField;
            }
            set {
                if ((object.ReferenceEquals(this.LastWeldMaterialField, value) != true)) {
                    this.LastWeldMaterialField = value;
                    this.RaisePropertyChanged("LastWeldMaterial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OtherRecord {
            get {
                return this.OtherRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.OtherRecordField, value) != true)) {
                    this.OtherRecordField = value;
                    this.RaisePropertyChanged("OtherRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateAppearance {
            get {
                return this.PlateAppearanceField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateAppearanceField, value) != true)) {
                    this.PlateAppearanceField = value;
                    this.RaisePropertyChanged("PlateAppearance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateDimension {
            get {
                return this.PlateDimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateDimensionField, value) != true)) {
                    this.PlateDimensionField = value;
                    this.RaisePropertyChanged("PlateDimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateHardness {
            get {
                return this.PlateHardnessField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateHardnessField, value) != true)) {
                    this.PlateHardnessField = value;
                    this.RaisePropertyChanged("PlateHardness");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateLot {
            get {
                return this.PlateLotField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateLotField, value) != true)) {
                    this.PlateLotField = value;
                    this.RaisePropertyChanged("PlateLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateMaterial {
            get {
                return this.PlateMaterialField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateMaterialField, value) != true)) {
                    this.PlateMaterialField = value;
                    this.RaisePropertyChanged("PlateMaterial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateProcessRecord {
            get {
                return this.PlateProcessRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateProcessRecordField, value) != true)) {
                    this.PlateProcessRecordField = value;
                    this.RaisePropertyChanged("PlateProcessRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateSuplier {
            get {
                return this.PlateSuplierField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateSuplierField, value) != true)) {
                    this.PlateSuplierField = value;
                    this.RaisePropertyChanged("PlateSuplier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateUseCount {
            get {
                return this.PlateUseCountField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateUseCountField, value) != true)) {
                    this.PlateUseCountField = value;
                    this.RaisePropertyChanged("PlateUseCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DcRecordBondingTarget", Namespace="http://schemas.datacontract.org/2004/07/PMSWCFService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class DcRecordBondingTarget : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BondAppearanceCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BondCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BondCleanCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BondDimensionCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BondWarpageCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BondWarpageFixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid BondingIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CuStringDiameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid PlateIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetAppearanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetCompositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetDiameterCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetDimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetLotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetProcessRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetThicknessCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetWarpageCheckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeldMaterialField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BondAppearanceCheck {
            get {
                return this.BondAppearanceCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.BondAppearanceCheckField, value) != true)) {
                    this.BondAppearanceCheckField = value;
                    this.RaisePropertyChanged("BondAppearanceCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BondCheck {
            get {
                return this.BondCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.BondCheckField, value) != true)) {
                    this.BondCheckField = value;
                    this.RaisePropertyChanged("BondCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BondCleanCheck {
            get {
                return this.BondCleanCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.BondCleanCheckField, value) != true)) {
                    this.BondCleanCheckField = value;
                    this.RaisePropertyChanged("BondCleanCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BondDimensionCheck {
            get {
                return this.BondDimensionCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.BondDimensionCheckField, value) != true)) {
                    this.BondDimensionCheckField = value;
                    this.RaisePropertyChanged("BondDimensionCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BondWarpageCheck {
            get {
                return this.BondWarpageCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.BondWarpageCheckField, value) != true)) {
                    this.BondWarpageCheckField = value;
                    this.RaisePropertyChanged("BondWarpageCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BondWarpageFix {
            get {
                return this.BondWarpageFixField;
            }
            set {
                if ((object.ReferenceEquals(this.BondWarpageFixField, value) != true)) {
                    this.BondWarpageFixField = value;
                    this.RaisePropertyChanged("BondWarpageFix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid BondingID {
            get {
                return this.BondingIDField;
            }
            set {
                if ((this.BondingIDField.Equals(value) != true)) {
                    this.BondingIDField = value;
                    this.RaisePropertyChanged("BondingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CuStringDiameter {
            get {
                return this.CuStringDiameterField;
            }
            set {
                if ((this.CuStringDiameterField.Equals(value) != true)) {
                    this.CuStringDiameterField = value;
                    this.RaisePropertyChanged("CuStringDiameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PlateID {
            get {
                return this.PlateIDField;
            }
            set {
                if ((this.PlateIDField.Equals(value) != true)) {
                    this.PlateIDField = value;
                    this.RaisePropertyChanged("PlateID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetAppearance {
            get {
                return this.TargetAppearanceField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetAppearanceField, value) != true)) {
                    this.TargetAppearanceField = value;
                    this.RaisePropertyChanged("TargetAppearance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetComposition {
            get {
                return this.TargetCompositionField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetCompositionField, value) != true)) {
                    this.TargetCompositionField = value;
                    this.RaisePropertyChanged("TargetComposition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDiameterCheck {
            get {
                return this.TargetDiameterCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetDiameterCheckField, value) != true)) {
                    this.TargetDiameterCheckField = value;
                    this.RaisePropertyChanged("TargetDiameterCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetDimension {
            get {
                return this.TargetDimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetDimensionField, value) != true)) {
                    this.TargetDimensionField = value;
                    this.RaisePropertyChanged("TargetDimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetLot {
            get {
                return this.TargetLotField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetLotField, value) != true)) {
                    this.TargetLotField = value;
                    this.RaisePropertyChanged("TargetLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetProcessRecord {
            get {
                return this.TargetProcessRecordField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetProcessRecordField, value) != true)) {
                    this.TargetProcessRecordField = value;
                    this.RaisePropertyChanged("TargetProcessRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetThicknessCheck {
            get {
                return this.TargetThicknessCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetThicknessCheckField, value) != true)) {
                    this.TargetThicknessCheckField = value;
                    this.RaisePropertyChanged("TargetThicknessCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TargetWarpageCheck {
            get {
                return this.TargetWarpageCheckField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetWarpageCheckField, value) != true)) {
                    this.TargetWarpageCheckField = value;
                    this.RaisePropertyChanged("TargetWarpageCheck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WeldMaterial {
            get {
                return this.WeldMaterialField;
            }
            set {
                if ((object.ReferenceEquals(this.WeldMaterialField, value) != true)) {
                    this.WeldMaterialField = value;
                    this.RaisePropertyChanged("WeldMaterial");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PMSMainService.IOrderService")]
    public interface IOrderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetAllOrderInPage", ReplyAction="http://tempuri.org/IOrderService/GetAllOrderInPageResponse")]
        PMSLargeScreen.PMSMainService.DcOrder[] GetAllOrderInPage(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetAllOrderInPage", ReplyAction="http://tempuri.org/IOrderService/GetAllOrderInPageResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcOrder[]> GetAllOrderInPageAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderBySearchInPage", ReplyAction="http://tempuri.org/IOrderService/GetOrderBySearchInPageResponse")]
        PMSLargeScreen.PMSMainService.DcOrder[] GetOrderBySearchInPage(int skip, int take, string customer, string compositionstd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderBySearchInPage", ReplyAction="http://tempuri.org/IOrderService/GetOrderBySearchInPageResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcOrder[]> GetOrderBySearchInPageAsync(int skip, int take, string customer, string compositionstd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderCountBySearch", ReplyAction="http://tempuri.org/IOrderService/GetOrderCountBySearchResponse")]
        int GetOrderCountBySearch(string customer, string compositionstd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderCountBySearch", ReplyAction="http://tempuri.org/IOrderService/GetOrderCountBySearchResponse")]
        System.Threading.Tasks.Task<int> GetOrderCountBySearchAsync(string customer, string compositionstd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddOrder", ReplyAction="http://tempuri.org/IOrderService/AddOrderResponse")]
        int AddOrder(PMSLargeScreen.PMSMainService.DcOrder order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddOrder", ReplyAction="http://tempuri.org/IOrderService/AddOrderResponse")]
        System.Threading.Tasks.Task<int> AddOrderAsync(PMSLargeScreen.PMSMainService.DcOrder order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/UpdateOrder", ReplyAction="http://tempuri.org/IOrderService/UpdateOrderResponse")]
        int UpdateOrder(PMSLargeScreen.PMSMainService.DcOrder order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/UpdateOrder", ReplyAction="http://tempuri.org/IOrderService/UpdateOrderResponse")]
        System.Threading.Tasks.Task<int> UpdateOrderAsync(PMSLargeScreen.PMSMainService.DcOrder order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteOrder", ReplyAction="http://tempuri.org/IOrderService/DeleteOrderResponse")]
        int DeleteOrder(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteOrder", ReplyAction="http://tempuri.org/IOrderService/DeleteOrderResponse")]
        System.Threading.Tasks.Task<int> DeleteOrderAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrderServiceChannel : PMSLargeScreen.PMSMainService.IOrderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrderServiceClient : System.ServiceModel.ClientBase<PMSLargeScreen.PMSMainService.IOrderService>, PMSLargeScreen.PMSMainService.IOrderService {
        
        public OrderServiceClient() {
        }
        
        public OrderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSLargeScreen.PMSMainService.DcOrder[] GetAllOrderInPage(int skip, int take) {
            return base.Channel.GetAllOrderInPage(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcOrder[]> GetAllOrderInPageAsync(int skip, int take) {
            return base.Channel.GetAllOrderInPageAsync(skip, take);
        }
        
        public PMSLargeScreen.PMSMainService.DcOrder[] GetOrderBySearchInPage(int skip, int take, string customer, string compositionstd) {
            return base.Channel.GetOrderBySearchInPage(skip, take, customer, compositionstd);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcOrder[]> GetOrderBySearchInPageAsync(int skip, int take, string customer, string compositionstd) {
            return base.Channel.GetOrderBySearchInPageAsync(skip, take, customer, compositionstd);
        }
        
        public int GetOrderCountBySearch(string customer, string compositionstd) {
            return base.Channel.GetOrderCountBySearch(customer, compositionstd);
        }
        
        public System.Threading.Tasks.Task<int> GetOrderCountBySearchAsync(string customer, string compositionstd) {
            return base.Channel.GetOrderCountBySearchAsync(customer, compositionstd);
        }
        
        public int AddOrder(PMSLargeScreen.PMSMainService.DcOrder order) {
            return base.Channel.AddOrder(order);
        }
        
        public System.Threading.Tasks.Task<int> AddOrderAsync(PMSLargeScreen.PMSMainService.DcOrder order) {
            return base.Channel.AddOrderAsync(order);
        }
        
        public int UpdateOrder(PMSLargeScreen.PMSMainService.DcOrder order) {
            return base.Channel.UpdateOrder(order);
        }
        
        public System.Threading.Tasks.Task<int> UpdateOrderAsync(PMSLargeScreen.PMSMainService.DcOrder order) {
            return base.Channel.UpdateOrderAsync(order);
        }
        
        public int DeleteOrder(System.Guid id) {
            return base.Channel.DeleteOrder(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteOrderAsync(System.Guid id) {
            return base.Channel.DeleteOrderAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PMSMainService.IPlanVHPService")]
    public interface IPlanVHPService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/GetVHPPlansByOrderID", ReplyAction="http://tempuri.org/IPlanVHPService/GetVHPPlansByOrderIDResponse")]
        PMSLargeScreen.PMSMainService.DcPlanVHP[] GetVHPPlansByOrderID(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/GetVHPPlansByOrderID", ReplyAction="http://tempuri.org/IPlanVHPService/GetVHPPlansByOrderIDResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcPlanVHP[]> GetVHPPlansByOrderIDAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/AddVHPPlan", ReplyAction="http://tempuri.org/IPlanVHPService/AddVHPPlanResponse")]
        int AddVHPPlan(PMSLargeScreen.PMSMainService.DcPlanVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/AddVHPPlan", ReplyAction="http://tempuri.org/IPlanVHPService/AddVHPPlanResponse")]
        System.Threading.Tasks.Task<int> AddVHPPlanAsync(PMSLargeScreen.PMSMainService.DcPlanVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/UpdateVHPPlan", ReplyAction="http://tempuri.org/IPlanVHPService/UpdateVHPPlanResponse")]
        int UpdateVHPPlan(PMSLargeScreen.PMSMainService.DcPlanVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/UpdateVHPPlan", ReplyAction="http://tempuri.org/IPlanVHPService/UpdateVHPPlanResponse")]
        System.Threading.Tasks.Task<int> UpdateVHPPlanAsync(PMSLargeScreen.PMSMainService.DcPlanVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/DeleteVHPPlan", ReplyAction="http://tempuri.org/IPlanVHPService/DeleteVHPPlanResponse")]
        int DeleteVHPPlan(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlanVHPService/DeleteVHPPlan", ReplyAction="http://tempuri.org/IPlanVHPService/DeleteVHPPlanResponse")]
        System.Threading.Tasks.Task<int> DeleteVHPPlanAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlanVHPServiceChannel : PMSLargeScreen.PMSMainService.IPlanVHPService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlanVHPServiceClient : System.ServiceModel.ClientBase<PMSLargeScreen.PMSMainService.IPlanVHPService>, PMSLargeScreen.PMSMainService.IPlanVHPService {
        
        public PlanVHPServiceClient() {
        }
        
        public PlanVHPServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlanVHPServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlanVHPServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlanVHPServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSLargeScreen.PMSMainService.DcPlanVHP[] GetVHPPlansByOrderID(System.Guid id) {
            return base.Channel.GetVHPPlansByOrderID(id);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcPlanVHP[]> GetVHPPlansByOrderIDAsync(System.Guid id) {
            return base.Channel.GetVHPPlansByOrderIDAsync(id);
        }
        
        public int AddVHPPlan(PMSLargeScreen.PMSMainService.DcPlanVHP model) {
            return base.Channel.AddVHPPlan(model);
        }
        
        public System.Threading.Tasks.Task<int> AddVHPPlanAsync(PMSLargeScreen.PMSMainService.DcPlanVHP model) {
            return base.Channel.AddVHPPlanAsync(model);
        }
        
        public int UpdateVHPPlan(PMSLargeScreen.PMSMainService.DcPlanVHP model) {
            return base.Channel.UpdateVHPPlan(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateVHPPlanAsync(PMSLargeScreen.PMSMainService.DcPlanVHP model) {
            return base.Channel.UpdateVHPPlanAsync(model);
        }
        
        public int DeleteVHPPlan(System.Guid id) {
            return base.Channel.DeleteVHPPlan(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteVHPPlanAsync(System.Guid id) {
            return base.Channel.DeleteVHPPlanAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PMSMainService.IMaterialNeedService")]
    public interface IMaterialNeedService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/GetMaterialNeedBySearchInPage", ReplyAction="http://tempuri.org/IMaterialNeedService/GetMaterialNeedBySearchInPageResponse")]
        PMSLargeScreen.PMSMainService.DcMaterialNeed[] GetMaterialNeedBySearchInPage(int skip, int take, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/GetMaterialNeedBySearchInPage", ReplyAction="http://tempuri.org/IMaterialNeedService/GetMaterialNeedBySearchInPageResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMaterialNeed[]> GetMaterialNeedBySearchInPageAsync(int skip, int take, string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/GetMaterialNeedCountBySearch", ReplyAction="http://tempuri.org/IMaterialNeedService/GetMaterialNeedCountBySearchResponse")]
        int GetMaterialNeedCountBySearch(string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/GetMaterialNeedCountBySearch", ReplyAction="http://tempuri.org/IMaterialNeedService/GetMaterialNeedCountBySearchResponse")]
        System.Threading.Tasks.Task<int> GetMaterialNeedCountBySearchAsync(string composition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/AddMaterialNeed", ReplyAction="http://tempuri.org/IMaterialNeedService/AddMaterialNeedResponse")]
        int AddMaterialNeed(PMSLargeScreen.PMSMainService.DcMaterialNeed model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/AddMaterialNeed", ReplyAction="http://tempuri.org/IMaterialNeedService/AddMaterialNeedResponse")]
        System.Threading.Tasks.Task<int> AddMaterialNeedAsync(PMSLargeScreen.PMSMainService.DcMaterialNeed model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/UpdateMaterialNeed", ReplyAction="http://tempuri.org/IMaterialNeedService/UpdateMaterialNeedResponse")]
        int UpdateMaterialNeed(PMSLargeScreen.PMSMainService.DcMaterialNeed model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/UpdateMaterialNeed", ReplyAction="http://tempuri.org/IMaterialNeedService/UpdateMaterialNeedResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialNeedAsync(PMSLargeScreen.PMSMainService.DcMaterialNeed model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/DeleteMaterialNeed", ReplyAction="http://tempuri.org/IMaterialNeedService/DeleteMaterialNeedResponse")]
        int DeleteMaterialNeed(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialNeedService/DeleteMaterialNeed", ReplyAction="http://tempuri.org/IMaterialNeedService/DeleteMaterialNeedResponse")]
        System.Threading.Tasks.Task<int> DeleteMaterialNeedAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMaterialNeedServiceChannel : PMSLargeScreen.PMSMainService.IMaterialNeedService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MaterialNeedServiceClient : System.ServiceModel.ClientBase<PMSLargeScreen.PMSMainService.IMaterialNeedService>, PMSLargeScreen.PMSMainService.IMaterialNeedService {
        
        public MaterialNeedServiceClient() {
        }
        
        public MaterialNeedServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MaterialNeedServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialNeedServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialNeedServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSLargeScreen.PMSMainService.DcMaterialNeed[] GetMaterialNeedBySearchInPage(int skip, int take, string composition) {
            return base.Channel.GetMaterialNeedBySearchInPage(skip, take, composition);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMaterialNeed[]> GetMaterialNeedBySearchInPageAsync(int skip, int take, string composition) {
            return base.Channel.GetMaterialNeedBySearchInPageAsync(skip, take, composition);
        }
        
        public int GetMaterialNeedCountBySearch(string composition) {
            return base.Channel.GetMaterialNeedCountBySearch(composition);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialNeedCountBySearchAsync(string composition) {
            return base.Channel.GetMaterialNeedCountBySearchAsync(composition);
        }
        
        public int AddMaterialNeed(PMSLargeScreen.PMSMainService.DcMaterialNeed model) {
            return base.Channel.AddMaterialNeed(model);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialNeedAsync(PMSLargeScreen.PMSMainService.DcMaterialNeed model) {
            return base.Channel.AddMaterialNeedAsync(model);
        }
        
        public int UpdateMaterialNeed(PMSLargeScreen.PMSMainService.DcMaterialNeed model) {
            return base.Channel.UpdateMaterialNeed(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialNeedAsync(PMSLargeScreen.PMSMainService.DcMaterialNeed model) {
            return base.Channel.UpdateMaterialNeedAsync(model);
        }
        
        public int DeleteMaterialNeed(System.Guid id) {
            return base.Channel.DeleteMaterialNeed(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMaterialNeedAsync(System.Guid id) {
            return base.Channel.DeleteMaterialNeedAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PMSMainService.IMaterialOrderService")]
    public interface IMaterialOrderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderBySearchInPage", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderBySearchInPageResponse")]
        PMSLargeScreen.PMSMainService.DcMaterialOrder[] GetMaterialOrderBySearchInPage(int skip, int take, string orderPo, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderBySearchInPage", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderBySearchInPageResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMaterialOrder[]> GetMaterialOrderBySearchInPageAsync(int skip, int take, string orderPo, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountBySearch", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountBySearchResponse")]
        int GetMaterialOrderCountBySearch(string orderPo, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountBySearch", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountBySearchResponse")]
        System.Threading.Tasks.Task<int> GetMaterialOrderCountBySearchAsync(string orderPo, string supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderForSanjie", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderForSanjieResponse")]
        PMSLargeScreen.PMSMainService.DcMaterialOrder[] GetMaterialOrderForSanjie(int skip, int take, string orderPo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderForSanjie", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderForSanjieResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMaterialOrder[]> GetMaterialOrderForSanjieAsync(int skip, int take, string orderPo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountForSanjie", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountForSanjieResponse")]
        int GetMaterialOrderCountForSanjie(string orderPo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountForSanjie", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderCountForSanjieResponse")]
        System.Threading.Tasks.Task<int> GetMaterialOrderCountForSanjieAsync(string orderPo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/AddMaterialOrder", ReplyAction="http://tempuri.org/IMaterialOrderService/AddMaterialOrderResponse")]
        int AddMaterialOrder(PMSLargeScreen.PMSMainService.DcMaterialOrder model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/AddMaterialOrder", ReplyAction="http://tempuri.org/IMaterialOrderService/AddMaterialOrderResponse")]
        System.Threading.Tasks.Task<int> AddMaterialOrderAsync(PMSLargeScreen.PMSMainService.DcMaterialOrder model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrder", ReplyAction="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderResponse")]
        int UpdateMaterialOrder(PMSLargeScreen.PMSMainService.DcMaterialOrder model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrder", ReplyAction="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialOrderAsync(PMSLargeScreen.PMSMainService.DcMaterialOrder model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrder", ReplyAction="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrderResponse")]
        int DeleteMaterialOrder(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrder", ReplyAction="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrderResponse")]
        System.Threading.Tasks.Task<int> DeleteMaterialOrderAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItembyMaterialID", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItembyMaterialIDResponse" +
            "")]
        PMSLargeScreen.PMSMainService.DcMaterialOrderItem[] GetMaterialOrderItembyMaterialID(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItembyMaterialID", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItembyMaterialIDResponse" +
            "")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMaterialOrderItem[]> GetMaterialOrderItembyMaterialIDAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/AddMaterialOrderItem", ReplyAction="http://tempuri.org/IMaterialOrderService/AddMaterialOrderItemResponse")]
        int AddMaterialOrderItem(PMSLargeScreen.PMSMainService.DcMaterialOrderItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/AddMaterialOrderItem", ReplyAction="http://tempuri.org/IMaterialOrderService/AddMaterialOrderItemResponse")]
        System.Threading.Tasks.Task<int> AddMaterialOrderItemAsync(PMSLargeScreen.PMSMainService.DcMaterialOrderItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderItem", ReplyAction="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderItemResponse")]
        int UpdateMaterialOrderItem(PMSLargeScreen.PMSMainService.DcMaterialOrderItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderItem", ReplyAction="http://tempuri.org/IMaterialOrderService/UpdateMaterialOrderItemResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialOrderItemAsync(PMSLargeScreen.PMSMainService.DcMaterialOrderItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrderItem", ReplyAction="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrderItemResponse")]
        int DeleteMaterialOrderItem(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrderItem", ReplyAction="http://tempuri.org/IMaterialOrderService/DeleteMaterialOrderItemResponse")]
        System.Threading.Tasks.Task<int> DeleteMaterialOrderItemAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItems", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemsResponse")]
        PMSLargeScreen.PMSMainService.DcMaterialOrderItem[] GetMaterialOrderItems(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItems", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemsResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMaterialOrderItem[]> GetMaterialOrderItemsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemsCount", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemsCountResponse")]
        int GetMaterialOrderItemsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemsCount", ReplyAction="http://tempuri.org/IMaterialOrderService/GetMaterialOrderItemsCountResponse")]
        System.Threading.Tasks.Task<int> GetMaterialOrderItemsCountAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMaterialOrderServiceChannel : PMSLargeScreen.PMSMainService.IMaterialOrderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MaterialOrderServiceClient : System.ServiceModel.ClientBase<PMSLargeScreen.PMSMainService.IMaterialOrderService>, PMSLargeScreen.PMSMainService.IMaterialOrderService {
        
        public MaterialOrderServiceClient() {
        }
        
        public MaterialOrderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MaterialOrderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialOrderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialOrderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSLargeScreen.PMSMainService.DcMaterialOrder[] GetMaterialOrderBySearchInPage(int skip, int take, string orderPo, string supplier) {
            return base.Channel.GetMaterialOrderBySearchInPage(skip, take, orderPo, supplier);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMaterialOrder[]> GetMaterialOrderBySearchInPageAsync(int skip, int take, string orderPo, string supplier) {
            return base.Channel.GetMaterialOrderBySearchInPageAsync(skip, take, orderPo, supplier);
        }
        
        public int GetMaterialOrderCountBySearch(string orderPo, string supplier) {
            return base.Channel.GetMaterialOrderCountBySearch(orderPo, supplier);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialOrderCountBySearchAsync(string orderPo, string supplier) {
            return base.Channel.GetMaterialOrderCountBySearchAsync(orderPo, supplier);
        }
        
        public PMSLargeScreen.PMSMainService.DcMaterialOrder[] GetMaterialOrderForSanjie(int skip, int take, string orderPo) {
            return base.Channel.GetMaterialOrderForSanjie(skip, take, orderPo);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMaterialOrder[]> GetMaterialOrderForSanjieAsync(int skip, int take, string orderPo) {
            return base.Channel.GetMaterialOrderForSanjieAsync(skip, take, orderPo);
        }
        
        public int GetMaterialOrderCountForSanjie(string orderPo) {
            return base.Channel.GetMaterialOrderCountForSanjie(orderPo);
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialOrderCountForSanjieAsync(string orderPo) {
            return base.Channel.GetMaterialOrderCountForSanjieAsync(orderPo);
        }
        
        public int AddMaterialOrder(PMSLargeScreen.PMSMainService.DcMaterialOrder model) {
            return base.Channel.AddMaterialOrder(model);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialOrderAsync(PMSLargeScreen.PMSMainService.DcMaterialOrder model) {
            return base.Channel.AddMaterialOrderAsync(model);
        }
        
        public int UpdateMaterialOrder(PMSLargeScreen.PMSMainService.DcMaterialOrder model) {
            return base.Channel.UpdateMaterialOrder(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialOrderAsync(PMSLargeScreen.PMSMainService.DcMaterialOrder model) {
            return base.Channel.UpdateMaterialOrderAsync(model);
        }
        
        public int DeleteMaterialOrder(System.Guid id) {
            return base.Channel.DeleteMaterialOrder(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMaterialOrderAsync(System.Guid id) {
            return base.Channel.DeleteMaterialOrderAsync(id);
        }
        
        public PMSLargeScreen.PMSMainService.DcMaterialOrderItem[] GetMaterialOrderItembyMaterialID(System.Guid id) {
            return base.Channel.GetMaterialOrderItembyMaterialID(id);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMaterialOrderItem[]> GetMaterialOrderItembyMaterialIDAsync(System.Guid id) {
            return base.Channel.GetMaterialOrderItembyMaterialIDAsync(id);
        }
        
        public int AddMaterialOrderItem(PMSLargeScreen.PMSMainService.DcMaterialOrderItem model) {
            return base.Channel.AddMaterialOrderItem(model);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialOrderItemAsync(PMSLargeScreen.PMSMainService.DcMaterialOrderItem model) {
            return base.Channel.AddMaterialOrderItemAsync(model);
        }
        
        public int UpdateMaterialOrderItem(PMSLargeScreen.PMSMainService.DcMaterialOrderItem model) {
            return base.Channel.UpdateMaterialOrderItem(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialOrderItemAsync(PMSLargeScreen.PMSMainService.DcMaterialOrderItem model) {
            return base.Channel.UpdateMaterialOrderItemAsync(model);
        }
        
        public int DeleteMaterialOrderItem(System.Guid id) {
            return base.Channel.DeleteMaterialOrderItem(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMaterialOrderItemAsync(System.Guid id) {
            return base.Channel.DeleteMaterialOrderItemAsync(id);
        }
        
        public PMSLargeScreen.PMSMainService.DcMaterialOrderItem[] GetMaterialOrderItems(int skip, int take) {
            return base.Channel.GetMaterialOrderItems(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMaterialOrderItem[]> GetMaterialOrderItemsAsync(int skip, int take) {
            return base.Channel.GetMaterialOrderItemsAsync(skip, take);
        }
        
        public int GetMaterialOrderItemsCount() {
            return base.Channel.GetMaterialOrderItemsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialOrderItemsCountAsync() {
            return base.Channel.GetMaterialOrderItemsCountAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PMSMainService.IMaterialInventoryService")]
    public interface IMaterialInventoryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryIns", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInsResponse")]
        PMSLargeScreen.PMSMainService.DcMaterialInventoryIn[] GetMaterialInventoryIns(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryIns", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInsResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMaterialInventoryIn[]> GetMaterialInventoryInsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCount", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCountResponse")]
        int GetMaterialInventoryInCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCount", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryInCountResponse")]
        System.Threading.Tasks.Task<int> GetMaterialInventoryInCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryInResponse")]
        int AddMaterialInventoryIn(PMSLargeScreen.PMSMainService.DcMaterialInventoryIn model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryInResponse")]
        System.Threading.Tasks.Task<int> AddMaterialInventoryInAsync(PMSLargeScreen.PMSMainService.DcMaterialInventoryIn model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryInResponse")]
        int UpdateMaterialInventoryIn(PMSLargeScreen.PMSMainService.DcMaterialInventoryIn model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryInResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialInventoryInAsync(PMSLargeScreen.PMSMainService.DcMaterialInventoryIn model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryInResponse")]
        int DeleteMaterialInventoryIn(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryIn", ReplyAction="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryInResponse")]
        System.Threading.Tasks.Task<int> DeleteMaterialInventoryInAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOuts", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutsResponse")]
        PMSLargeScreen.PMSMainService.DcMaterialInventoryOut[] GetMaterialInventoryOuts(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOuts", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutsResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMaterialInventoryOut[]> GetMaterialInventoryOutsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCount", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCountResponse" +
            "")]
        int GetMaterialInventoryOutCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCount", ReplyAction="http://tempuri.org/IMaterialInventoryService/GetMaterialInventoryOutCountResponse" +
            "")]
        System.Threading.Tasks.Task<int> GetMaterialInventoryOutCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryOutResponse")]
        int AddMaterialInventoryOut(PMSLargeScreen.PMSMainService.DcMaterialInventoryOut model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/AddMaterialInventoryOutResponse")]
        System.Threading.Tasks.Task<int> AddMaterialInventoryOutAsync(PMSLargeScreen.PMSMainService.DcMaterialInventoryOut model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryOutResponse")]
        int UpdateMaterialInventoryOut(PMSLargeScreen.PMSMainService.DcMaterialInventoryOut model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/UpdateMaterialInventoryOutResponse")]
        System.Threading.Tasks.Task<int> UpdateMaterialInventoryOutAsync(PMSLargeScreen.PMSMainService.DcMaterialInventoryOut model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryOutResponse")]
        int DeleteMaterialInventoryOut(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryOut", ReplyAction="http://tempuri.org/IMaterialInventoryService/DeleteMaterialInventoryOutResponse")]
        System.Threading.Tasks.Task<int> DeleteMaterialInventoryOutAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMaterialInventoryServiceChannel : PMSLargeScreen.PMSMainService.IMaterialInventoryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MaterialInventoryServiceClient : System.ServiceModel.ClientBase<PMSLargeScreen.PMSMainService.IMaterialInventoryService>, PMSLargeScreen.PMSMainService.IMaterialInventoryService {
        
        public MaterialInventoryServiceClient() {
        }
        
        public MaterialInventoryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MaterialInventoryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialInventoryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialInventoryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSLargeScreen.PMSMainService.DcMaterialInventoryIn[] GetMaterialInventoryIns(int skip, int take) {
            return base.Channel.GetMaterialInventoryIns(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMaterialInventoryIn[]> GetMaterialInventoryInsAsync(int skip, int take) {
            return base.Channel.GetMaterialInventoryInsAsync(skip, take);
        }
        
        public int GetMaterialInventoryInCount() {
            return base.Channel.GetMaterialInventoryInCount();
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialInventoryInCountAsync() {
            return base.Channel.GetMaterialInventoryInCountAsync();
        }
        
        public int AddMaterialInventoryIn(PMSLargeScreen.PMSMainService.DcMaterialInventoryIn model) {
            return base.Channel.AddMaterialInventoryIn(model);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialInventoryInAsync(PMSLargeScreen.PMSMainService.DcMaterialInventoryIn model) {
            return base.Channel.AddMaterialInventoryInAsync(model);
        }
        
        public int UpdateMaterialInventoryIn(PMSLargeScreen.PMSMainService.DcMaterialInventoryIn model) {
            return base.Channel.UpdateMaterialInventoryIn(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialInventoryInAsync(PMSLargeScreen.PMSMainService.DcMaterialInventoryIn model) {
            return base.Channel.UpdateMaterialInventoryInAsync(model);
        }
        
        public int DeleteMaterialInventoryIn(System.Guid id) {
            return base.Channel.DeleteMaterialInventoryIn(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMaterialInventoryInAsync(System.Guid id) {
            return base.Channel.DeleteMaterialInventoryInAsync(id);
        }
        
        public PMSLargeScreen.PMSMainService.DcMaterialInventoryOut[] GetMaterialInventoryOuts(int skip, int take) {
            return base.Channel.GetMaterialInventoryOuts(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMaterialInventoryOut[]> GetMaterialInventoryOutsAsync(int skip, int take) {
            return base.Channel.GetMaterialInventoryOutsAsync(skip, take);
        }
        
        public int GetMaterialInventoryOutCount() {
            return base.Channel.GetMaterialInventoryOutCount();
        }
        
        public System.Threading.Tasks.Task<int> GetMaterialInventoryOutCountAsync() {
            return base.Channel.GetMaterialInventoryOutCountAsync();
        }
        
        public int AddMaterialInventoryOut(PMSLargeScreen.PMSMainService.DcMaterialInventoryOut model) {
            return base.Channel.AddMaterialInventoryOut(model);
        }
        
        public System.Threading.Tasks.Task<int> AddMaterialInventoryOutAsync(PMSLargeScreen.PMSMainService.DcMaterialInventoryOut model) {
            return base.Channel.AddMaterialInventoryOutAsync(model);
        }
        
        public int UpdateMaterialInventoryOut(PMSLargeScreen.PMSMainService.DcMaterialInventoryOut model) {
            return base.Channel.UpdateMaterialInventoryOut(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMaterialInventoryOutAsync(PMSLargeScreen.PMSMainService.DcMaterialInventoryOut model) {
            return base.Channel.UpdateMaterialInventoryOutAsync(model);
        }
        
        public int DeleteMaterialInventoryOut(System.Guid id) {
            return base.Channel.DeleteMaterialInventoryOut(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMaterialInventoryOutAsync(System.Guid id) {
            return base.Channel.DeleteMaterialInventoryOutAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PMSMainService.IMissonService")]
    public interface IMissonService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissons", ReplyAction="http://tempuri.org/IMissonService/GetMissonsResponse")]
        PMSLargeScreen.PMSMainService.DcOrder[] GetMissons(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissons", ReplyAction="http://tempuri.org/IMissonService/GetMissonsResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcOrder[]> GetMissonsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlans", ReplyAction="http://tempuri.org/IMissonService/GetPlansResponse")]
        PMSLargeScreen.PMSMainService.DcPlanVHP[] GetPlans(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetPlans", ReplyAction="http://tempuri.org/IMissonService/GetPlansResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcPlanVHP[]> GetPlansAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonsCount", ReplyAction="http://tempuri.org/IMissonService/GetMissonsCountResponse")]
        int GetMissonsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonsCount", ReplyAction="http://tempuri.org/IMissonService/GetMissonsCountResponse")]
        System.Threading.Tasks.Task<int> GetMissonsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonWithPlan", ReplyAction="http://tempuri.org/IMissonService/GetMissonWithPlanResponse")]
        PMSLargeScreen.PMSMainService.DcMissonWithPlan[] GetMissonWithPlan(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonWithPlan", ReplyAction="http://tempuri.org/IMissonService/GetMissonWithPlanResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMissonWithPlan[]> GetMissonWithPlanAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonWithPlanCount", ReplyAction="http://tempuri.org/IMissonService/GetMissonWithPlanCountResponse")]
        int GetMissonWithPlanCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonWithPlanCount", ReplyAction="http://tempuri.org/IMissonService/GetMissonWithPlanCountResponse")]
        System.Threading.Tasks.Task<int> GetMissonWithPlanCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonWithPlanChecked", ReplyAction="http://tempuri.org/IMissonService/GetMissonWithPlanCheckedResponse")]
        PMSLargeScreen.PMSMainService.DcMissonWithPlan[] GetMissonWithPlanChecked(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonWithPlanChecked", ReplyAction="http://tempuri.org/IMissonService/GetMissonWithPlanCheckedResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMissonWithPlan[]> GetMissonWithPlanCheckedAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonWithPlanCheckedCount", ReplyAction="http://tempuri.org/IMissonService/GetMissonWithPlanCheckedCountResponse")]
        int GetMissonWithPlanCheckedCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonWithPlanCheckedCount", ReplyAction="http://tempuri.org/IMissonService/GetMissonWithPlanCheckedCountResponse")]
        System.Threading.Tasks.Task<int> GetMissonWithPlanCheckedCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonWithPlanByDate", ReplyAction="http://tempuri.org/IMissonService/GetMissonWithPlanByDateResponse")]
        PMSLargeScreen.PMSMainService.DcMissonWithPlan[] GetMissonWithPlanByDate(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissonService/GetMissonWithPlanByDate", ReplyAction="http://tempuri.org/IMissonService/GetMissonWithPlanByDateResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMissonWithPlan[]> GetMissonWithPlanByDateAsync(System.DateTime date);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMissonServiceChannel : PMSLargeScreen.PMSMainService.IMissonService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MissonServiceClient : System.ServiceModel.ClientBase<PMSLargeScreen.PMSMainService.IMissonService>, PMSLargeScreen.PMSMainService.IMissonService {
        
        public MissonServiceClient() {
        }
        
        public MissonServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MissonServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MissonServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MissonServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSLargeScreen.PMSMainService.DcOrder[] GetMissons(int skip, int take) {
            return base.Channel.GetMissons(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcOrder[]> GetMissonsAsync(int skip, int take) {
            return base.Channel.GetMissonsAsync(skip, take);
        }
        
        public PMSLargeScreen.PMSMainService.DcPlanVHP[] GetPlans(System.Guid id) {
            return base.Channel.GetPlans(id);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcPlanVHP[]> GetPlansAsync(System.Guid id) {
            return base.Channel.GetPlansAsync(id);
        }
        
        public int GetMissonsCount() {
            return base.Channel.GetMissonsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetMissonsCountAsync() {
            return base.Channel.GetMissonsCountAsync();
        }
        
        public PMSLargeScreen.PMSMainService.DcMissonWithPlan[] GetMissonWithPlan(int skip, int take) {
            return base.Channel.GetMissonWithPlan(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMissonWithPlan[]> GetMissonWithPlanAsync(int skip, int take) {
            return base.Channel.GetMissonWithPlanAsync(skip, take);
        }
        
        public int GetMissonWithPlanCount() {
            return base.Channel.GetMissonWithPlanCount();
        }
        
        public System.Threading.Tasks.Task<int> GetMissonWithPlanCountAsync() {
            return base.Channel.GetMissonWithPlanCountAsync();
        }
        
        public PMSLargeScreen.PMSMainService.DcMissonWithPlan[] GetMissonWithPlanChecked(int skip, int take) {
            return base.Channel.GetMissonWithPlanChecked(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMissonWithPlan[]> GetMissonWithPlanCheckedAsync(int skip, int take) {
            return base.Channel.GetMissonWithPlanCheckedAsync(skip, take);
        }
        
        public int GetMissonWithPlanCheckedCount() {
            return base.Channel.GetMissonWithPlanCheckedCount();
        }
        
        public System.Threading.Tasks.Task<int> GetMissonWithPlanCheckedCountAsync() {
            return base.Channel.GetMissonWithPlanCheckedCountAsync();
        }
        
        public PMSLargeScreen.PMSMainService.DcMissonWithPlan[] GetMissonWithPlanByDate(System.DateTime date) {
            return base.Channel.GetMissonWithPlanByDate(date);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcMissonWithPlan[]> GetMissonWithPlanByDateAsync(System.DateTime date) {
            return base.Channel.GetMissonWithPlanByDateAsync(date);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PMSMainService.IRecordDeliveryService")]
    public interface IRecordDeliveryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeliveryService/GetDelivery", ReplyAction="http://tempuri.org/IRecordDeliveryService/GetDeliveryResponse")]
        PMSLargeScreen.PMSMainService.DcRecordDelivery[] GetDelivery(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeliveryService/GetDelivery", ReplyAction="http://tempuri.org/IRecordDeliveryService/GetDeliveryResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordDelivery[]> GetDeliveryAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeliveryService/GetDeliveryCount", ReplyAction="http://tempuri.org/IRecordDeliveryService/GetDeliveryCountResponse")]
        int GetDeliveryCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeliveryService/GetDeliveryCount", ReplyAction="http://tempuri.org/IRecordDeliveryService/GetDeliveryCountResponse")]
        System.Threading.Tasks.Task<int> GetDeliveryCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeliveryService/AddRecordDelivery", ReplyAction="http://tempuri.org/IRecordDeliveryService/AddRecordDeliveryResponse")]
        int AddRecordDelivery(PMSLargeScreen.PMSMainService.DcRecordDelivery model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeliveryService/AddRecordDelivery", ReplyAction="http://tempuri.org/IRecordDeliveryService/AddRecordDeliveryResponse")]
        System.Threading.Tasks.Task<int> AddRecordDeliveryAsync(PMSLargeScreen.PMSMainService.DcRecordDelivery model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeliveryService/UpdateReocrdDelivery", ReplyAction="http://tempuri.org/IRecordDeliveryService/UpdateReocrdDeliveryResponse")]
        int UpdateReocrdDelivery(PMSLargeScreen.PMSMainService.DcRecordDelivery model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeliveryService/UpdateReocrdDelivery", ReplyAction="http://tempuri.org/IRecordDeliveryService/UpdateReocrdDeliveryResponse")]
        System.Threading.Tasks.Task<int> UpdateReocrdDeliveryAsync(PMSLargeScreen.PMSMainService.DcRecordDelivery model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeliveryService/DeleteRecordDelivery", ReplyAction="http://tempuri.org/IRecordDeliveryService/DeleteRecordDeliveryResponse")]
        int DeleteRecordDelivery(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeliveryService/DeleteRecordDelivery", ReplyAction="http://tempuri.org/IRecordDeliveryService/DeleteRecordDeliveryResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordDeliveryAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeliveryService/GetRecordDeliveryItemByRecordDeliveryID" +
            "", ReplyAction="http://tempuri.org/IRecordDeliveryService/GetRecordDeliveryItemByRecordDeliveryID" +
            "Response")]
        PMSLargeScreen.PMSMainService.DcRecordDeliveryItem[] GetRecordDeliveryItemByRecordDeliveryID(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeliveryService/GetRecordDeliveryItemByRecordDeliveryID" +
            "", ReplyAction="http://tempuri.org/IRecordDeliveryService/GetRecordDeliveryItemByRecordDeliveryID" +
            "Response")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordDeliveryItem[]> GetRecordDeliveryItemByRecordDeliveryIDAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeliveryService/AddRecordDeliveryItem", ReplyAction="http://tempuri.org/IRecordDeliveryService/AddRecordDeliveryItemResponse")]
        int AddRecordDeliveryItem(PMSLargeScreen.PMSMainService.DcRecordDeliveryItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeliveryService/AddRecordDeliveryItem", ReplyAction="http://tempuri.org/IRecordDeliveryService/AddRecordDeliveryItemResponse")]
        System.Threading.Tasks.Task<int> AddRecordDeliveryItemAsync(PMSLargeScreen.PMSMainService.DcRecordDeliveryItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeliveryService/UpdateReocrdDeliveryItem", ReplyAction="http://tempuri.org/IRecordDeliveryService/UpdateReocrdDeliveryItemResponse")]
        int UpdateReocrdDeliveryItem(PMSLargeScreen.PMSMainService.DcRecordDeliveryItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeliveryService/UpdateReocrdDeliveryItem", ReplyAction="http://tempuri.org/IRecordDeliveryService/UpdateReocrdDeliveryItemResponse")]
        System.Threading.Tasks.Task<int> UpdateReocrdDeliveryItemAsync(PMSLargeScreen.PMSMainService.DcRecordDeliveryItem model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeliveryService/DeleteRecordDeliveryItem", ReplyAction="http://tempuri.org/IRecordDeliveryService/DeleteRecordDeliveryItemResponse")]
        int DeleteRecordDeliveryItem(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeliveryService/DeleteRecordDeliveryItem", ReplyAction="http://tempuri.org/IRecordDeliveryService/DeleteRecordDeliveryItemResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordDeliveryItemAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordDeliveryServiceChannel : PMSLargeScreen.PMSMainService.IRecordDeliveryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordDeliveryServiceClient : System.ServiceModel.ClientBase<PMSLargeScreen.PMSMainService.IRecordDeliveryService>, PMSLargeScreen.PMSMainService.IRecordDeliveryService {
        
        public RecordDeliveryServiceClient() {
        }
        
        public RecordDeliveryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordDeliveryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordDeliveryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordDeliveryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSLargeScreen.PMSMainService.DcRecordDelivery[] GetDelivery(int skip, int take) {
            return base.Channel.GetDelivery(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordDelivery[]> GetDeliveryAsync(int skip, int take) {
            return base.Channel.GetDeliveryAsync(skip, take);
        }
        
        public int GetDeliveryCount() {
            return base.Channel.GetDeliveryCount();
        }
        
        public System.Threading.Tasks.Task<int> GetDeliveryCountAsync() {
            return base.Channel.GetDeliveryCountAsync();
        }
        
        public int AddRecordDelivery(PMSLargeScreen.PMSMainService.DcRecordDelivery model) {
            return base.Channel.AddRecordDelivery(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordDeliveryAsync(PMSLargeScreen.PMSMainService.DcRecordDelivery model) {
            return base.Channel.AddRecordDeliveryAsync(model);
        }
        
        public int UpdateReocrdDelivery(PMSLargeScreen.PMSMainService.DcRecordDelivery model) {
            return base.Channel.UpdateReocrdDelivery(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateReocrdDeliveryAsync(PMSLargeScreen.PMSMainService.DcRecordDelivery model) {
            return base.Channel.UpdateReocrdDeliveryAsync(model);
        }
        
        public int DeleteRecordDelivery(System.Guid id) {
            return base.Channel.DeleteRecordDelivery(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordDeliveryAsync(System.Guid id) {
            return base.Channel.DeleteRecordDeliveryAsync(id);
        }
        
        public PMSLargeScreen.PMSMainService.DcRecordDeliveryItem[] GetRecordDeliveryItemByRecordDeliveryID(System.Guid id) {
            return base.Channel.GetRecordDeliveryItemByRecordDeliveryID(id);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordDeliveryItem[]> GetRecordDeliveryItemByRecordDeliveryIDAsync(System.Guid id) {
            return base.Channel.GetRecordDeliveryItemByRecordDeliveryIDAsync(id);
        }
        
        public int AddRecordDeliveryItem(PMSLargeScreen.PMSMainService.DcRecordDeliveryItem model) {
            return base.Channel.AddRecordDeliveryItem(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordDeliveryItemAsync(PMSLargeScreen.PMSMainService.DcRecordDeliveryItem model) {
            return base.Channel.AddRecordDeliveryItemAsync(model);
        }
        
        public int UpdateReocrdDeliveryItem(PMSLargeScreen.PMSMainService.DcRecordDeliveryItem model) {
            return base.Channel.UpdateReocrdDeliveryItem(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateReocrdDeliveryItemAsync(PMSLargeScreen.PMSMainService.DcRecordDeliveryItem model) {
            return base.Channel.UpdateReocrdDeliveryItemAsync(model);
        }
        
        public int DeleteRecordDeliveryItem(System.Guid id) {
            return base.Channel.DeleteRecordDeliveryItem(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordDeliveryItemAsync(System.Guid id) {
            return base.Channel.DeleteRecordDeliveryItemAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PMSMainService.IRecordTestService")]
    public interface IRecordTestService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestBySearchInPage", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestBySearchInPageResponse")]
        PMSLargeScreen.PMSMainService.DcRecordTest[] GetRecordTestBySearchInPage(int skip, int take, string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestBySearchInPage", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestBySearchInPageResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordTest[]> GetRecordTestBySearchInPageAsync(int skip, int take, string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestCountBySearchInPage", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestCountBySearchInPageResponse")]
        int GetRecordTestCountBySearchInPage(string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/GetRecordTestCountBySearchInPage", ReplyAction="http://tempuri.org/IRecordTestService/GetRecordTestCountBySearchInPageResponse")]
        System.Threading.Tasks.Task<int> GetRecordTestCountBySearchInPageAsync(string productId, string compositionStd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/AddRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/AddRecordTestResponse")]
        int AddRecordTest(PMSLargeScreen.PMSMainService.DcRecordTest model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/AddRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/AddRecordTestResponse")]
        System.Threading.Tasks.Task<int> AddRecordTestAsync(PMSLargeScreen.PMSMainService.DcRecordTest model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/UpdateRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/UpdateRecordTestResponse")]
        int UpdateRecordTest(PMSLargeScreen.PMSMainService.DcRecordTest model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/UpdateRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/UpdateRecordTestResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordTestAsync(PMSLargeScreen.PMSMainService.DcRecordTest model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/DeleteRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/DeleteRecordTestResponse")]
        int DeleteRecordTest(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordTestService/DeleteRecordTest", ReplyAction="http://tempuri.org/IRecordTestService/DeleteRecordTestResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordTestAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordTestServiceChannel : PMSLargeScreen.PMSMainService.IRecordTestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordTestServiceClient : System.ServiceModel.ClientBase<PMSLargeScreen.PMSMainService.IRecordTestService>, PMSLargeScreen.PMSMainService.IRecordTestService {
        
        public RecordTestServiceClient() {
        }
        
        public RecordTestServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordTestServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordTestServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordTestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSLargeScreen.PMSMainService.DcRecordTest[] GetRecordTestBySearchInPage(int skip, int take, string productId, string compositionStd) {
            return base.Channel.GetRecordTestBySearchInPage(skip, take, productId, compositionStd);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordTest[]> GetRecordTestBySearchInPageAsync(int skip, int take, string productId, string compositionStd) {
            return base.Channel.GetRecordTestBySearchInPageAsync(skip, take, productId, compositionStd);
        }
        
        public int GetRecordTestCountBySearchInPage(string productId, string compositionStd) {
            return base.Channel.GetRecordTestCountBySearchInPage(productId, compositionStd);
        }
        
        public System.Threading.Tasks.Task<int> GetRecordTestCountBySearchInPageAsync(string productId, string compositionStd) {
            return base.Channel.GetRecordTestCountBySearchInPageAsync(productId, compositionStd);
        }
        
        public int AddRecordTest(PMSLargeScreen.PMSMainService.DcRecordTest model) {
            return base.Channel.AddRecordTest(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordTestAsync(PMSLargeScreen.PMSMainService.DcRecordTest model) {
            return base.Channel.AddRecordTestAsync(model);
        }
        
        public int UpdateRecordTest(PMSLargeScreen.PMSMainService.DcRecordTest model) {
            return base.Channel.UpdateRecordTest(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordTestAsync(PMSLargeScreen.PMSMainService.DcRecordTest model) {
            return base.Channel.UpdateRecordTestAsync(model);
        }
        
        public int DeleteRecordTest(System.Guid id) {
            return base.Channel.DeleteRecordTest(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordTestAsync(System.Guid id) {
            return base.Channel.DeleteRecordTestAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PMSMainService.IRecordVHPService")]
    public interface IRecordVHPService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/GetRecordVHP", ReplyAction="http://tempuri.org/IRecordVHPService/GetRecordVHPResponse")]
        PMSLargeScreen.PMSMainService.DcRecordVHP[] GetRecordVHP(System.Guid planVHPId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/GetRecordVHP", ReplyAction="http://tempuri.org/IRecordVHPService/GetRecordVHPResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordVHP[]> GetRecordVHPAsync(System.Guid planVHPId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/GetRecordVHPCount", ReplyAction="http://tempuri.org/IRecordVHPService/GetRecordVHPCountResponse")]
        int GetRecordVHPCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/GetRecordVHPCount", ReplyAction="http://tempuri.org/IRecordVHPService/GetRecordVHPCountResponse")]
        System.Threading.Tasks.Task<int> GetRecordVHPCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/AddRecordVHP", ReplyAction="http://tempuri.org/IRecordVHPService/AddRecordVHPResponse")]
        int AddRecordVHP(PMSLargeScreen.PMSMainService.DcRecordVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/AddRecordVHP", ReplyAction="http://tempuri.org/IRecordVHPService/AddRecordVHPResponse")]
        System.Threading.Tasks.Task<int> AddRecordVHPAsync(PMSLargeScreen.PMSMainService.DcRecordVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/UpdateReocrdVHP", ReplyAction="http://tempuri.org/IRecordVHPService/UpdateReocrdVHPResponse")]
        int UpdateReocrdVHP(PMSLargeScreen.PMSMainService.DcRecordVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/UpdateReocrdVHP", ReplyAction="http://tempuri.org/IRecordVHPService/UpdateReocrdVHPResponse")]
        System.Threading.Tasks.Task<int> UpdateReocrdVHPAsync(PMSLargeScreen.PMSMainService.DcRecordVHP model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/DeleteRecordVHP", ReplyAction="http://tempuri.org/IRecordVHPService/DeleteRecordVHPResponse")]
        int DeleteRecordVHP(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordVHPService/DeleteRecordVHP", ReplyAction="http://tempuri.org/IRecordVHPService/DeleteRecordVHPResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordVHPAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordVHPServiceChannel : PMSLargeScreen.PMSMainService.IRecordVHPService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordVHPServiceClient : System.ServiceModel.ClientBase<PMSLargeScreen.PMSMainService.IRecordVHPService>, PMSLargeScreen.PMSMainService.IRecordVHPService {
        
        public RecordVHPServiceClient() {
        }
        
        public RecordVHPServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordVHPServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordVHPServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordVHPServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSLargeScreen.PMSMainService.DcRecordVHP[] GetRecordVHP(System.Guid planVHPId) {
            return base.Channel.GetRecordVHP(planVHPId);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordVHP[]> GetRecordVHPAsync(System.Guid planVHPId) {
            return base.Channel.GetRecordVHPAsync(planVHPId);
        }
        
        public int GetRecordVHPCount() {
            return base.Channel.GetRecordVHPCount();
        }
        
        public System.Threading.Tasks.Task<int> GetRecordVHPCountAsync() {
            return base.Channel.GetRecordVHPCountAsync();
        }
        
        public int AddRecordVHP(PMSLargeScreen.PMSMainService.DcRecordVHP model) {
            return base.Channel.AddRecordVHP(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordVHPAsync(PMSLargeScreen.PMSMainService.DcRecordVHP model) {
            return base.Channel.AddRecordVHPAsync(model);
        }
        
        public int UpdateReocrdVHP(PMSLargeScreen.PMSMainService.DcRecordVHP model) {
            return base.Channel.UpdateReocrdVHP(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateReocrdVHPAsync(PMSLargeScreen.PMSMainService.DcRecordVHP model) {
            return base.Channel.UpdateReocrdVHPAsync(model);
        }
        
        public int DeleteRecordVHP(System.Guid id) {
            return base.Channel.DeleteRecordVHP(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordVHPAsync(System.Guid id) {
            return base.Channel.DeleteRecordVHPAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PMSMainService.IRecordMillingService")]
    public interface IRecordMillingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillings", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingsResponse")]
        PMSLargeScreen.PMSMainService.DcRecordMilling[] GetRecordMillings(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillings", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingsResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordMilling[]> GetRecordMillingsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingCount", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingCountResponse")]
        int GetRecordMillingCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingCount", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingCountResponse")]
        System.Threading.Tasks.Task<int> GetRecordMillingCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingsByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingsByVHPPlanLotResponse")]
        PMSLargeScreen.PMSMainService.DcRecordMilling[] GetRecordMillingsByVHPPlanLot(int skip, int take, string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingsByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingsByVHPPlanLotResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordMilling[]> GetRecordMillingsByVHPPlanLotAsync(int skip, int take, string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingCountByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingCountByVHPPlanLotRespons" +
            "e")]
        int GetRecordMillingCountByVHPPlanLot(string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/GetRecordMillingCountByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMillingService/GetRecordMillingCountByVHPPlanLotRespons" +
            "e")]
        System.Threading.Tasks.Task<int> GetRecordMillingCountByVHPPlanLotAsync(string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/AddRecordMilling", ReplyAction="http://tempuri.org/IRecordMillingService/AddRecordMillingResponse")]
        int AddRecordMilling(PMSLargeScreen.PMSMainService.DcRecordMilling model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/AddRecordMilling", ReplyAction="http://tempuri.org/IRecordMillingService/AddRecordMillingResponse")]
        System.Threading.Tasks.Task<int> AddRecordMillingAsync(PMSLargeScreen.PMSMainService.DcRecordMilling model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/UpdateRecordMilling", ReplyAction="http://tempuri.org/IRecordMillingService/UpdateRecordMillingResponse")]
        int UpdateRecordMilling(PMSLargeScreen.PMSMainService.DcRecordMilling model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/UpdateRecordMilling", ReplyAction="http://tempuri.org/IRecordMillingService/UpdateRecordMillingResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordMillingAsync(PMSLargeScreen.PMSMainService.DcRecordMilling model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/DeleteRecordMilling", ReplyAction="http://tempuri.org/IRecordMillingService/DeleteRecordMillingResponse")]
        int DeleteRecordMilling(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMillingService/DeleteRecordMilling", ReplyAction="http://tempuri.org/IRecordMillingService/DeleteRecordMillingResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordMillingAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordMillingServiceChannel : PMSLargeScreen.PMSMainService.IRecordMillingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordMillingServiceClient : System.ServiceModel.ClientBase<PMSLargeScreen.PMSMainService.IRecordMillingService>, PMSLargeScreen.PMSMainService.IRecordMillingService {
        
        public RecordMillingServiceClient() {
        }
        
        public RecordMillingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordMillingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordMillingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordMillingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSLargeScreen.PMSMainService.DcRecordMilling[] GetRecordMillings(int skip, int take) {
            return base.Channel.GetRecordMillings(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordMilling[]> GetRecordMillingsAsync(int skip, int take) {
            return base.Channel.GetRecordMillingsAsync(skip, take);
        }
        
        public int GetRecordMillingCount() {
            return base.Channel.GetRecordMillingCount();
        }
        
        public System.Threading.Tasks.Task<int> GetRecordMillingCountAsync() {
            return base.Channel.GetRecordMillingCountAsync();
        }
        
        public PMSLargeScreen.PMSMainService.DcRecordMilling[] GetRecordMillingsByVHPPlanLot(int skip, int take, string vhpplanlot) {
            return base.Channel.GetRecordMillingsByVHPPlanLot(skip, take, vhpplanlot);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordMilling[]> GetRecordMillingsByVHPPlanLotAsync(int skip, int take, string vhpplanlot) {
            return base.Channel.GetRecordMillingsByVHPPlanLotAsync(skip, take, vhpplanlot);
        }
        
        public int GetRecordMillingCountByVHPPlanLot(string vhpplanlot) {
            return base.Channel.GetRecordMillingCountByVHPPlanLot(vhpplanlot);
        }
        
        public System.Threading.Tasks.Task<int> GetRecordMillingCountByVHPPlanLotAsync(string vhpplanlot) {
            return base.Channel.GetRecordMillingCountByVHPPlanLotAsync(vhpplanlot);
        }
        
        public int AddRecordMilling(PMSLargeScreen.PMSMainService.DcRecordMilling model) {
            return base.Channel.AddRecordMilling(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordMillingAsync(PMSLargeScreen.PMSMainService.DcRecordMilling model) {
            return base.Channel.AddRecordMillingAsync(model);
        }
        
        public int UpdateRecordMilling(PMSLargeScreen.PMSMainService.DcRecordMilling model) {
            return base.Channel.UpdateRecordMilling(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordMillingAsync(PMSLargeScreen.PMSMainService.DcRecordMilling model) {
            return base.Channel.UpdateRecordMillingAsync(model);
        }
        
        public int DeleteRecordMilling(System.Guid id) {
            return base.Channel.DeleteRecordMilling(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordMillingAsync(System.Guid id) {
            return base.Channel.DeleteRecordMillingAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PMSMainService.IRecordMachineService")]
    public interface IRecordMachineService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachines", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachinesResponse")]
        PMSLargeScreen.PMSMainService.DcRecordMachine[] GetRecordMachines(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachines", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachinesResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordMachine[]> GetRecordMachinesAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachineCount", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachineCountResponse")]
        int GetRecordMachineCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachineCount", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachineCountResponse")]
        System.Threading.Tasks.Task<int> GetRecordMachineCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachinesByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachinesByVHPPlanLotResponse")]
        PMSLargeScreen.PMSMainService.DcRecordMachine[] GetRecordMachinesByVHPPlanLot(int skip, int take, string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachinesByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachinesByVHPPlanLotResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordMachine[]> GetRecordMachinesByVHPPlanLotAsync(int skip, int take, string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachineCountByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachineCountByVHPPlanLotRespons" +
            "e")]
        int GetRecordMachineCountByVHPPlanLot(string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/GetRecordMachineCountByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordMachineService/GetRecordMachineCountByVHPPlanLotRespons" +
            "e")]
        System.Threading.Tasks.Task<int> GetRecordMachineCountByVHPPlanLotAsync(string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/AddRecordMachine", ReplyAction="http://tempuri.org/IRecordMachineService/AddRecordMachineResponse")]
        int AddRecordMachine(PMSLargeScreen.PMSMainService.DcRecordMachine model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/AddRecordMachine", ReplyAction="http://tempuri.org/IRecordMachineService/AddRecordMachineResponse")]
        System.Threading.Tasks.Task<int> AddRecordMachineAsync(PMSLargeScreen.PMSMainService.DcRecordMachine model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/UpdateRecordMachine", ReplyAction="http://tempuri.org/IRecordMachineService/UpdateRecordMachineResponse")]
        int UpdateRecordMachine(PMSLargeScreen.PMSMainService.DcRecordMachine model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/UpdateRecordMachine", ReplyAction="http://tempuri.org/IRecordMachineService/UpdateRecordMachineResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordMachineAsync(PMSLargeScreen.PMSMainService.DcRecordMachine model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/DeleteRecordMachine", ReplyAction="http://tempuri.org/IRecordMachineService/DeleteRecordMachineResponse")]
        int DeleteRecordMachine(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordMachineService/DeleteRecordMachine", ReplyAction="http://tempuri.org/IRecordMachineService/DeleteRecordMachineResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordMachineAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordMachineServiceChannel : PMSLargeScreen.PMSMainService.IRecordMachineService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordMachineServiceClient : System.ServiceModel.ClientBase<PMSLargeScreen.PMSMainService.IRecordMachineService>, PMSLargeScreen.PMSMainService.IRecordMachineService {
        
        public RecordMachineServiceClient() {
        }
        
        public RecordMachineServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordMachineServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordMachineServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordMachineServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSLargeScreen.PMSMainService.DcRecordMachine[] GetRecordMachines(int skip, int take) {
            return base.Channel.GetRecordMachines(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordMachine[]> GetRecordMachinesAsync(int skip, int take) {
            return base.Channel.GetRecordMachinesAsync(skip, take);
        }
        
        public int GetRecordMachineCount() {
            return base.Channel.GetRecordMachineCount();
        }
        
        public System.Threading.Tasks.Task<int> GetRecordMachineCountAsync() {
            return base.Channel.GetRecordMachineCountAsync();
        }
        
        public PMSLargeScreen.PMSMainService.DcRecordMachine[] GetRecordMachinesByVHPPlanLot(int skip, int take, string vhpplanlot) {
            return base.Channel.GetRecordMachinesByVHPPlanLot(skip, take, vhpplanlot);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordMachine[]> GetRecordMachinesByVHPPlanLotAsync(int skip, int take, string vhpplanlot) {
            return base.Channel.GetRecordMachinesByVHPPlanLotAsync(skip, take, vhpplanlot);
        }
        
        public int GetRecordMachineCountByVHPPlanLot(string vhpplanlot) {
            return base.Channel.GetRecordMachineCountByVHPPlanLot(vhpplanlot);
        }
        
        public System.Threading.Tasks.Task<int> GetRecordMachineCountByVHPPlanLotAsync(string vhpplanlot) {
            return base.Channel.GetRecordMachineCountByVHPPlanLotAsync(vhpplanlot);
        }
        
        public int AddRecordMachine(PMSLargeScreen.PMSMainService.DcRecordMachine model) {
            return base.Channel.AddRecordMachine(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordMachineAsync(PMSLargeScreen.PMSMainService.DcRecordMachine model) {
            return base.Channel.AddRecordMachineAsync(model);
        }
        
        public int UpdateRecordMachine(PMSLargeScreen.PMSMainService.DcRecordMachine model) {
            return base.Channel.UpdateRecordMachine(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordMachineAsync(PMSLargeScreen.PMSMainService.DcRecordMachine model) {
            return base.Channel.UpdateRecordMachineAsync(model);
        }
        
        public int DeleteRecordMachine(System.Guid id) {
            return base.Channel.DeleteRecordMachine(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordMachineAsync(System.Guid id) {
            return base.Channel.DeleteRecordMachineAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PMSMainService.IRecordDeMoldService")]
    public interface IRecordDeMoldService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMolds", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsResponse")]
        PMSLargeScreen.PMSMainService.DcRecordDeMold[] GetRecordDeMolds(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMolds", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordDeMold[]> GetRecordDeMoldsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCount", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCountResponse")]
        int GetRecordDeMoldsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCount", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCountResponse")]
        System.Threading.Tasks.Task<int> GetRecordDeMoldsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsByVHPPlanLotResponse")]
        PMSLargeScreen.PMSMainService.DcRecordDeMold[] GetRecordDeMoldsByVHPPlanLot(int skip, int take, string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsByVHPPlanLotResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordDeMold[]> GetRecordDeMoldsByVHPPlanLotAsync(int skip, int take, string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCountByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCountByVHPPlanLotResponse" +
            "")]
        int GetRecordDeMoldsCountByVHPPlanLot(string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCountByVHPPlanLot", ReplyAction="http://tempuri.org/IRecordDeMoldService/GetRecordDeMoldsCountByVHPPlanLotResponse" +
            "")]
        System.Threading.Tasks.Task<int> GetRecordDeMoldsCountByVHPPlanLotAsync(string vhpplanlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/AddRecordDeMold", ReplyAction="http://tempuri.org/IRecordDeMoldService/AddRecordDeMoldResponse")]
        int AddRecordDeMold(PMSLargeScreen.PMSMainService.DcRecordDeMold model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/AddRecordDeMold", ReplyAction="http://tempuri.org/IRecordDeMoldService/AddRecordDeMoldResponse")]
        System.Threading.Tasks.Task<int> AddRecordDeMoldAsync(PMSLargeScreen.PMSMainService.DcRecordDeMold model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/UpdateRecordDeMold", ReplyAction="http://tempuri.org/IRecordDeMoldService/UpdateRecordDeMoldResponse")]
        int UpdateRecordDeMold(PMSLargeScreen.PMSMainService.DcRecordDeMold model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/UpdateRecordDeMold", ReplyAction="http://tempuri.org/IRecordDeMoldService/UpdateRecordDeMoldResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordDeMoldAsync(PMSLargeScreen.PMSMainService.DcRecordDeMold model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/DeleteRecordDeMold", ReplyAction="http://tempuri.org/IRecordDeMoldService/DeleteRecordDeMoldResponse")]
        int DeleteRecordDeMold(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordDeMoldService/DeleteRecordDeMold", ReplyAction="http://tempuri.org/IRecordDeMoldService/DeleteRecordDeMoldResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordDeMoldAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordDeMoldServiceChannel : PMSLargeScreen.PMSMainService.IRecordDeMoldService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordDeMoldServiceClient : System.ServiceModel.ClientBase<PMSLargeScreen.PMSMainService.IRecordDeMoldService>, PMSLargeScreen.PMSMainService.IRecordDeMoldService {
        
        public RecordDeMoldServiceClient() {
        }
        
        public RecordDeMoldServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordDeMoldServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordDeMoldServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordDeMoldServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSLargeScreen.PMSMainService.DcRecordDeMold[] GetRecordDeMolds(int skip, int take) {
            return base.Channel.GetRecordDeMolds(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordDeMold[]> GetRecordDeMoldsAsync(int skip, int take) {
            return base.Channel.GetRecordDeMoldsAsync(skip, take);
        }
        
        public int GetRecordDeMoldsCount() {
            return base.Channel.GetRecordDeMoldsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetRecordDeMoldsCountAsync() {
            return base.Channel.GetRecordDeMoldsCountAsync();
        }
        
        public PMSLargeScreen.PMSMainService.DcRecordDeMold[] GetRecordDeMoldsByVHPPlanLot(int skip, int take, string vhpplanlot) {
            return base.Channel.GetRecordDeMoldsByVHPPlanLot(skip, take, vhpplanlot);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordDeMold[]> GetRecordDeMoldsByVHPPlanLotAsync(int skip, int take, string vhpplanlot) {
            return base.Channel.GetRecordDeMoldsByVHPPlanLotAsync(skip, take, vhpplanlot);
        }
        
        public int GetRecordDeMoldsCountByVHPPlanLot(string vhpplanlot) {
            return base.Channel.GetRecordDeMoldsCountByVHPPlanLot(vhpplanlot);
        }
        
        public System.Threading.Tasks.Task<int> GetRecordDeMoldsCountByVHPPlanLotAsync(string vhpplanlot) {
            return base.Channel.GetRecordDeMoldsCountByVHPPlanLotAsync(vhpplanlot);
        }
        
        public int AddRecordDeMold(PMSLargeScreen.PMSMainService.DcRecordDeMold model) {
            return base.Channel.AddRecordDeMold(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordDeMoldAsync(PMSLargeScreen.PMSMainService.DcRecordDeMold model) {
            return base.Channel.AddRecordDeMoldAsync(model);
        }
        
        public int UpdateRecordDeMold(PMSLargeScreen.PMSMainService.DcRecordDeMold model) {
            return base.Channel.UpdateRecordDeMold(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordDeMoldAsync(PMSLargeScreen.PMSMainService.DcRecordDeMold model) {
            return base.Channel.UpdateRecordDeMoldAsync(model);
        }
        
        public int DeleteRecordDeMold(System.Guid id) {
            return base.Channel.DeleteRecordDeMold(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordDeMoldAsync(System.Guid id) {
            return base.Channel.DeleteRecordDeMoldAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PMSMainService.IRecordBondingService")]
    public interface IRecordBondingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondings", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingsResponse")]
        PMSLargeScreen.PMSMainService.DcRecordBonding[] GetRecordBondings(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondings", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingsResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordBonding[]> GetRecordBondingsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondingCount", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingCountResponse")]
        int GetRecordBondingCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondingCount", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingCountResponse")]
        System.Threading.Tasks.Task<int> GetRecordBondingCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondingPlates", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingPlatesResponse")]
        PMSLargeScreen.PMSMainService.DcRecordBondingPlate[] GetRecordBondingPlates(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondingPlates", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingPlatesResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordBondingPlate[]> GetRecordBondingPlatesAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondingPlatesByBondingID", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingPlatesByBondingIDRespons" +
            "e")]
        PMSLargeScreen.PMSMainService.DcRecordBondingPlate[] GetRecordBondingPlatesByBondingID(System.Guid bondingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondingPlatesByBondingID", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingPlatesByBondingIDRespons" +
            "e")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordBondingPlate[]> GetRecordBondingPlatesByBondingIDAsync(System.Guid bondingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondingTargets", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingTargetsResponse")]
        PMSLargeScreen.PMSMainService.DcRecordBondingTarget[] GetRecordBondingTargets(System.Guid bongdingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/GetRecordBondingTargets", ReplyAction="http://tempuri.org/IRecordBondingService/GetRecordBondingTargetsResponse")]
        System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordBondingTarget[]> GetRecordBondingTargetsAsync(System.Guid bongdingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/AddRecordBongding", ReplyAction="http://tempuri.org/IRecordBondingService/AddRecordBongdingResponse")]
        int AddRecordBongding(PMSLargeScreen.PMSMainService.DcRecordBonding model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/AddRecordBongding", ReplyAction="http://tempuri.org/IRecordBondingService/AddRecordBongdingResponse")]
        System.Threading.Tasks.Task<int> AddRecordBongdingAsync(PMSLargeScreen.PMSMainService.DcRecordBonding model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/UpdateRecordBongding", ReplyAction="http://tempuri.org/IRecordBondingService/UpdateRecordBongdingResponse")]
        int UpdateRecordBongding(PMSLargeScreen.PMSMainService.DcRecordBonding model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/UpdateRecordBongding", ReplyAction="http://tempuri.org/IRecordBondingService/UpdateRecordBongdingResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordBongdingAsync(PMSLargeScreen.PMSMainService.DcRecordBonding model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/DeleteRecordBongding", ReplyAction="http://tempuri.org/IRecordBondingService/DeleteRecordBongdingResponse")]
        int DeleteRecordBongding(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/DeleteRecordBongding", ReplyAction="http://tempuri.org/IRecordBondingService/DeleteRecordBongdingResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordBongdingAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/AddRecordBongdingTarget", ReplyAction="http://tempuri.org/IRecordBondingService/AddRecordBongdingTargetResponse")]
        int AddRecordBongdingTarget(PMSLargeScreen.PMSMainService.DcRecordBondingTarget model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/AddRecordBongdingTarget", ReplyAction="http://tempuri.org/IRecordBondingService/AddRecordBongdingTargetResponse")]
        System.Threading.Tasks.Task<int> AddRecordBongdingTargetAsync(PMSLargeScreen.PMSMainService.DcRecordBondingTarget model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/UpdateRecordBongdingTarget", ReplyAction="http://tempuri.org/IRecordBondingService/UpdateRecordBongdingTargetResponse")]
        int UpdateRecordBongdingTarget(PMSLargeScreen.PMSMainService.DcRecordBondingTarget model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/UpdateRecordBongdingTarget", ReplyAction="http://tempuri.org/IRecordBondingService/UpdateRecordBongdingTargetResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordBongdingTargetAsync(PMSLargeScreen.PMSMainService.DcRecordBondingTarget model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/DeleteRecordBongdingTarget", ReplyAction="http://tempuri.org/IRecordBondingService/DeleteRecordBongdingTargetResponse")]
        int DeleteRecordBongdingTarget(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/DeleteRecordBongdingTarget", ReplyAction="http://tempuri.org/IRecordBondingService/DeleteRecordBongdingTargetResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordBongdingTargetAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/AddRecordBongdingPlate", ReplyAction="http://tempuri.org/IRecordBondingService/AddRecordBongdingPlateResponse")]
        int AddRecordBongdingPlate(PMSLargeScreen.PMSMainService.DcRecordBondingPlate model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/AddRecordBongdingPlate", ReplyAction="http://tempuri.org/IRecordBondingService/AddRecordBongdingPlateResponse")]
        System.Threading.Tasks.Task<int> AddRecordBongdingPlateAsync(PMSLargeScreen.PMSMainService.DcRecordBondingPlate model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/UpdateRecordBongdingPlate", ReplyAction="http://tempuri.org/IRecordBondingService/UpdateRecordBongdingPlateResponse")]
        int UpdateRecordBongdingPlate(PMSLargeScreen.PMSMainService.DcRecordBondingPlate model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/UpdateRecordBongdingPlate", ReplyAction="http://tempuri.org/IRecordBondingService/UpdateRecordBongdingPlateResponse")]
        System.Threading.Tasks.Task<int> UpdateRecordBongdingPlateAsync(PMSLargeScreen.PMSMainService.DcRecordBondingPlate model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/DeleteRecordBongdingPlate", ReplyAction="http://tempuri.org/IRecordBondingService/DeleteRecordBongdingPlateResponse")]
        int DeleteRecordBongdingPlate(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordBondingService/DeleteRecordBongdingPlate", ReplyAction="http://tempuri.org/IRecordBondingService/DeleteRecordBongdingPlateResponse")]
        System.Threading.Tasks.Task<int> DeleteRecordBongdingPlateAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordBondingServiceChannel : PMSLargeScreen.PMSMainService.IRecordBondingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordBondingServiceClient : System.ServiceModel.ClientBase<PMSLargeScreen.PMSMainService.IRecordBondingService>, PMSLargeScreen.PMSMainService.IRecordBondingService {
        
        public RecordBondingServiceClient() {
        }
        
        public RecordBondingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordBondingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordBondingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordBondingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PMSLargeScreen.PMSMainService.DcRecordBonding[] GetRecordBondings(int skip, int take) {
            return base.Channel.GetRecordBondings(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordBonding[]> GetRecordBondingsAsync(int skip, int take) {
            return base.Channel.GetRecordBondingsAsync(skip, take);
        }
        
        public int GetRecordBondingCount() {
            return base.Channel.GetRecordBondingCount();
        }
        
        public System.Threading.Tasks.Task<int> GetRecordBondingCountAsync() {
            return base.Channel.GetRecordBondingCountAsync();
        }
        
        public PMSLargeScreen.PMSMainService.DcRecordBondingPlate[] GetRecordBondingPlates(int skip, int take) {
            return base.Channel.GetRecordBondingPlates(skip, take);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordBondingPlate[]> GetRecordBondingPlatesAsync(int skip, int take) {
            return base.Channel.GetRecordBondingPlatesAsync(skip, take);
        }
        
        public PMSLargeScreen.PMSMainService.DcRecordBondingPlate[] GetRecordBondingPlatesByBondingID(System.Guid bondingId) {
            return base.Channel.GetRecordBondingPlatesByBondingID(bondingId);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordBondingPlate[]> GetRecordBondingPlatesByBondingIDAsync(System.Guid bondingId) {
            return base.Channel.GetRecordBondingPlatesByBondingIDAsync(bondingId);
        }
        
        public PMSLargeScreen.PMSMainService.DcRecordBondingTarget[] GetRecordBondingTargets(System.Guid bongdingId) {
            return base.Channel.GetRecordBondingTargets(bongdingId);
        }
        
        public System.Threading.Tasks.Task<PMSLargeScreen.PMSMainService.DcRecordBondingTarget[]> GetRecordBondingTargetsAsync(System.Guid bongdingId) {
            return base.Channel.GetRecordBondingTargetsAsync(bongdingId);
        }
        
        public int AddRecordBongding(PMSLargeScreen.PMSMainService.DcRecordBonding model) {
            return base.Channel.AddRecordBongding(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordBongdingAsync(PMSLargeScreen.PMSMainService.DcRecordBonding model) {
            return base.Channel.AddRecordBongdingAsync(model);
        }
        
        public int UpdateRecordBongding(PMSLargeScreen.PMSMainService.DcRecordBonding model) {
            return base.Channel.UpdateRecordBongding(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordBongdingAsync(PMSLargeScreen.PMSMainService.DcRecordBonding model) {
            return base.Channel.UpdateRecordBongdingAsync(model);
        }
        
        public int DeleteRecordBongding(System.Guid id) {
            return base.Channel.DeleteRecordBongding(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordBongdingAsync(System.Guid id) {
            return base.Channel.DeleteRecordBongdingAsync(id);
        }
        
        public int AddRecordBongdingTarget(PMSLargeScreen.PMSMainService.DcRecordBondingTarget model) {
            return base.Channel.AddRecordBongdingTarget(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordBongdingTargetAsync(PMSLargeScreen.PMSMainService.DcRecordBondingTarget model) {
            return base.Channel.AddRecordBongdingTargetAsync(model);
        }
        
        public int UpdateRecordBongdingTarget(PMSLargeScreen.PMSMainService.DcRecordBondingTarget model) {
            return base.Channel.UpdateRecordBongdingTarget(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordBongdingTargetAsync(PMSLargeScreen.PMSMainService.DcRecordBondingTarget model) {
            return base.Channel.UpdateRecordBongdingTargetAsync(model);
        }
        
        public int DeleteRecordBongdingTarget(System.Guid id) {
            return base.Channel.DeleteRecordBongdingTarget(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordBongdingTargetAsync(System.Guid id) {
            return base.Channel.DeleteRecordBongdingTargetAsync(id);
        }
        
        public int AddRecordBongdingPlate(PMSLargeScreen.PMSMainService.DcRecordBondingPlate model) {
            return base.Channel.AddRecordBongdingPlate(model);
        }
        
        public System.Threading.Tasks.Task<int> AddRecordBongdingPlateAsync(PMSLargeScreen.PMSMainService.DcRecordBondingPlate model) {
            return base.Channel.AddRecordBongdingPlateAsync(model);
        }
        
        public int UpdateRecordBongdingPlate(PMSLargeScreen.PMSMainService.DcRecordBondingPlate model) {
            return base.Channel.UpdateRecordBongdingPlate(model);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRecordBongdingPlateAsync(PMSLargeScreen.PMSMainService.DcRecordBondingPlate model) {
            return base.Channel.UpdateRecordBongdingPlateAsync(model);
        }
        
        public int DeleteRecordBongdingPlate(System.Guid id) {
            return base.Channel.DeleteRecordBongdingPlate(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRecordBongdingPlateAsync(System.Guid id) {
            return base.Channel.DeleteRecordBongdingPlateAsync(id);
        }
    }
}
